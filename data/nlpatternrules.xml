<!--

Rules to parse natural language performatives.

The special variable "SPEAKER" is pre-bound with the ID of the speaker agent.

-->

<NLPatternRules defaultPriority="100">
	<!-- Patterns for performative "perf.callattention" -->
	<NLPattern name="callattention-1"
			   head="perf.callattention(LISTENER)"
			   body="nounPhraseNoDeterminer(X2, N2, P2, C2) #derefFromContext(C2, LISTENER) ('!'|'?')*"
			   priority="50"/>

	<!-- Patterns for performative "perf.greet" -->
	<NLPattern name="greet-1"
			   head="perf.greet(LISTENER)"
			   body="('hello' ['there']|['oh'] 'hi' ['there']|['oh'] 'hey' ['there']|'yo')
			   		 [[','] nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER)]
			   		 ('!'|'?')*"/>

	<NLPattern name="greet-hithere"
			   head="perf.greet(LISTENER)"
			   body="'hi' 'there' [[','] nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER)]
			   		 ('!'|'?')*"/>

	<!-- Patterns for performative "perf.greet" -->
	<NLPattern name="greet-2a"
			   head="perf.greet(LISTENER)"
			   body="nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER) [','] ('hello'|'hi'|'hey') [','] ('!'|'?')*"/>
	<NLPattern name="greet-2b"
			   head="perf.greet(LISTENER)"
			   body="('hello'|'hi'|'hey') ('!'|'?')*"/>
	<NLPattern name="greet-2c"
			   head="perf.greet(LISTENER)"
			   body="('hello'|'hi'|'hey') [','] [nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER)] ('!'|'?')*"/>

	<!-- Patterns for performative "perf.farewell" -->
	<NLPattern name="farewell-1"
			   head="perf.farewell(LISTENER)"
			   body="['ok' [',']] ('farewell'|
			          'see' 'you' ['later']|
			          'talk' 'to' 'you' 'later'|
			          'have' 'a' 'good' 'one'|
			          'goodbye'|
			          ['good'] 'bye'|
			          'bye' 'bye'|
			          'so' 'long')
			         [[','] nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER)]
			         ('!'|'?')*"
			   priority="200"/>

	<!-- Patterns for performative "perf.thankyou" -->
	<NLPattern name="thankyou-1"
			   head="perf.thankyou(LISTENER)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ['great' [',']] ('thank' 'you'| 'thanks')
			   		 [[','] nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER)]
			   		 ('!'|'.')*"
			   priority="200"/>

	<!-- Patterns for performative "perf.youarewelcome" -->
	<NLPattern name="youarewelcome-1"
			   head="perf.youarewelcome(LISTENER)"
			   body="('you' verb('verb.be'[symbol], N, [second-person], [present-tense]) 'welcome'|'think' 'nothing' 'of' 'it')
			   		 [[','] nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER)]
			   		 ('!'|'.')*"
			   priority="200"/>

	<!-- Patterns for performative "perf.ack.ok" -->
	<NLPattern name="ok-1"
			   head="perf.ack.ok(LISTENER)"
			   body="('ok'|'okay'|'got' 'it'|'i' 'see'|'obviously'|'cool'|'coolio'|'fine')
			   		 [[','] nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER)]
			   		 ('!'|'.')*"
			   priority="200"/>

	<!-- Patterns for performative "perf.ackresponse" -->
	<!-- every "ok" is also an "ackresponse" -->
	<NLPattern name="ackresponse1"
			   head="perf.ackresponse(LISTENER)"
			   body="('ok'|'okay'|'got' 'it'|'i' 'see'|'obviously'|'cool'|'coolio'|'fine')
			   		 [[','] nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LISTENER)]
			   		 ('!'|'.')*"/>
	<NLPattern name="ackresponse2"
			   head="perf.ackresponse(LISTENER)"
			   body="[('yes'|'yep'|['hell'] 'yeah') [',']] ('same' ['here'] | 'me' ('too'|'neither')) ('!'|'.')*"
			   priority="200"/>

	<!-- Patterns for performative "perf.q.howareyou" -->
	<NLPattern name="howareyou-1"
			   head="perf.q.howareyou(LISTENER)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('how' verb('verb.be'[symbol], N, [second-person], T) 'you' ['doing']|
			   		  'how' 'do' 'you' 'do'|
			   		  'are' 'you' 'ok'|
			   		  'how' verb('verb.be'[symbol], [singular], [third-person], T) 'it' 'going')
			   		 ('!'|'?')*"/>

	<!-- Patterns for performative "perf.nicetomeetyou" -->
	<NLPattern name="nicetomeetyou-1"
			   head="perf.nicetomeetyou(LISTENER)"
			   body="(['it' 'is' 'very'] 'nice'|'pleased'|'delighted'|'lovely'|'great'|'glad'|
			          ['it' 'is' 'a'] 'pleasure') 
			   		 'to'
			   		 ('meet' 'you'|'make' 'your' 'acquaintance') 
			   		 [[','] (nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L) #derefFromContext(C_L, LISTENER) | 'you')]
			   		 ('!'|'.')*"/>

	<NLPattern name="nicetomeetyoutoo-1"
			   head="perf.nicetomeetyoutoo(LISTENER)"
			   body="perf.nicetomeetyou(LISTENER) ('too'|'as' 'well') ('!'|'.')*"/>

	<!-- Patterns for performative "perf.sentiment" -->
	<NLPattern name="sentiment-good"
			   head="perf.sentiment(LISTENER, 'good'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 (['very'] 'good' | 'awesome' | 'great' | 'fantastic' | 'amazing' | 'wonderful' | 'excellent' | emoticon(':)'[symbol])) ('!'|'?')*"
			   priority="150"/>

	<NLPattern name="sentiment-bad"
			   head="perf.sentiment(LISTENER, 'bad'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 (('ow'|'oww'|'owww') | 'i' 'am'  'sorry' | 'too' 'bad' | 'that' ('is'|'\'s') ('bad'|'sad') | emoticon(':('[symbol]))
			   		 ('.')*  ('!'|'?')*"
			   priority="150"/>

	<NLPattern name="sentiment-surprise"
			   head="perf.sentiment(LISTENER, 'surprise'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ('lol' | 'wow' | 'what' 'the' ('fuck'|'hell'|'heck') | 'wtf') ('!'|'?')*"
			   priority="150"/>

	<!-- Patterns for performative "perf.changemind" -->
	<NLPattern name="changemind-1"
			   head="perf.changemind(LISTENER)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ['i'] verb('verb.change'[symbol], [singular], [first-person], T) 'my' 'mind' ('!'|'.')*"/>			   

	<NLPattern name="changemind-2"
			   head="perf.changemind(LISTENER)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ['i'] verb('action.take'[symbol], [singular], [first-person], T) ('it'|'that') 'back' ('!'|'.')*"/>			   

	<!-- Patterns for performative "perf.inform" -->
	<!-- rules for variants of "my name is david" -->
	<NLPattern name="inform-myname1"
			   head="perf.inform(LISTENER, name(SPEAKER,NAME))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'i' verb('verb.be'[symbol], [singular], [first-person], T) ['called'] proper-noun(NAME, [singular])
			   		 ('!'|'.')*"
			   priority="200"/>
	<NLPattern name="inform-myname2"
			   head="perf.inform(LISTENER, name(SPEAKER,NAME))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('you' 'can'|'people') 'call' 'me' proper-noun(NAME, [singular]) ('!'|'.')*"/>

	<NLPattern name="inform-obj's-name-is"
			   head="perf.inform(LISTENER, name(SUBJECT,NAME))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) '\'s' noun('name'[name], N2)
			   		 verb('verb.be'[symbol], [singular], [third-person], T)
			   		 proper-noun(NAME, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="inform-name-of-obj-is"
			   head="perf.inform(LISTENER, name(SUBJECT,NAME))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'the' noun('name'[name], N2) 'of' nounPhrase(X, N, P, C)
			   		 verb('verb.be'[symbol], [singular], [third-person], T)
			   		 proper-noun(NAME, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="inform-obj-is-called"
			   head="perf.inform(LISTENER, name(SUBJECT,NAME))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C)
			   		 verb('verb.be'[symbol], [singular], [third-person], T) 'called'
			   		 proper-noun(NAME, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="inform-i-will-call-x-name"
			   head="perf.inform(LISTENER, name(OBJECT,NAME))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'i' 'will' 'call'
			   		 nounPhrase(X, N, P, C)
			   		 proper-noun(NAME, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>
	<NLPattern name="inform-X-is-named"
			   head="perf.inform(LISTENER, name(OBJECT,NAME))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C)
			   		 verb('verb.be'[symbol], [singular], P2, T2)
			   		 'named'
			   		 proper-noun(NAME, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>

	<!-- e.g.: "the crate is closed" -->
	<NLPattern name="inform-X-is-adj-noun"
			   head="perf.inform(LISTENER, #cons(X2,SUBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) 
			   		 ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"
			   priority="150"/>
	<NLPattern name="inform-X-is-not-adj-noun"
			   head="perf.inform(LISTENER, #not(#cons(X2,SUBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 'not' ['very'] (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) ('!'|'.')* #derefFromContext(C, SUBJECT)"/>

	<NLPattern name="inform-X-is-adj-property-with-value"
			   head="perf.inform(LISTENER, #cons(X2_PARENT:[property-with-value],SUBJECT,X2:[property-with-value]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'.')* #derefFromContext(C, SUBJECT)"
			   priority="200"/>
	<NLPattern name="inform-X-is-a-noun-property-with-value"
			   head="perf.inform(LISTENER, #cons(X2_PARENT:[property-with-value],SUBJECT,X2:[property-with-value]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun(X2, [singular]) #sortParent(X2, X2_PARENT) ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>
	<NLPattern name="inform-X-is-not-a-noun-property-with-value"
			   head="perf.inform(LISTENER, #not(#cons(X2_PARENT:[property-with-value],SUBJECT,X2:[property-with-value])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 'not'
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun(X2, [singular]) #sortParent(X2, X2_PARENT) ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>
	<NLPattern name="inform-X-is-a-noun-role"
			   head="perf.inform(LISTENER, role(SUBJECT,X2:[role]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 (indefinite-article('a'[symbol], [singular]) | 'the')
			   		 noun(X2, [singular]) ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"
			   priority="250"/>
	<NLPattern name="inform-X-is-not-a-role"
			   head="perf.inform(LISTENER, #not(role(SUBJECT,X2:[role])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 'not'
			   		 (indefinite-article('a'[symbol], [singular]) | 'the')
			   		 noun(X2, [singular]) ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"
			   priority="250"/>			   
	<NLPattern name="inform-X-is-a-noun-profession"
			   head="perf.inform(LISTENER, profession(SUBJECT,X2:[profession]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 (indefinite-article('a'[symbol], [singular]) | 'the')
			   		 noun(X2, [singular]) ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"
			   priority="300"/>
	<NLPattern name="inform-X-is-not-a-profession"
			   head="perf.inform(LISTENER, #not(profession(SUBJECT,X2:[profession])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 'not'
			   		 (indefinite-article('a'[symbol], [singular]) | 'the')
			   		 noun(X2, [singular]) ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"
			   priority="300"/>	

	<NLPattern name="inform-X-is-not-adj"
			   head="perf.inform(LISTENER, #not(#cons(X2_PARENT:[property-with-value], SUBJECT,X2:[property-with-value])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 'not' adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'.')* #derefFromContext(C, SUBJECT)"
			   priority="200"/>
	<NLPattern name="inform-X-is-adj-property-with-2-values"
			   head="perf.inform(LISTENER, #or(#cons(X2_PARENT:[property-with-value],SUBJECT,X2:[property-with-value]),
			   								   #cons(X3_PARENT:[property-with-value],SUBJECT,X3:[property-with-value])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) ['either']
			   		 adjective(X2) #sortParent(X2, X2_PARENT)
			   		 'or'
			   		 adjective(X3) #sortParent(X3, X3_PARENT)
			   		 ('!'|'.')* #derefFromContext(C, SUBJECT)"
			   priority="200"/>

	<NLPattern name="inform-X-is-propernoun"
			   head="perf.inform(LISTENER, QUERY)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 properNounCompound(X2, N) ('!'|'.')*
			   		 #derefQuery(C, X2, QUERY)"/>

	<NLPattern name="inform-X-is-not-propernoun"
			   head="perf.inform(LISTENER, #not(QUERY))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 'not'
			   		 properNounCompound(X2, N) ('!'|'.')*
			   		 #derefQuery(C, X2, QUERY)"/>

	<!-- e.g.: "all chairs are small" -->
	<NLPattern name="inform-universal-are-adj|noun"
			   head="perf.inform(LISTENER, #or(#not(LEFTSIDE), #cons(X2, V:[#id])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) (adjective(X2)|indefinite-article(ART, N2:[singular]) noun(X2, N2)|noun(X2, N3:[plural])) ('!'|'.')*
			   		 #derefUniversal(C, V, LEFTSIDE)"/>
	<NLPattern name="inform-plural-are-adj|noun"
			   head="perf.inform(LISTENER, #or(#not(#cons(X, V:[#id])), #cons(X2, V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 noun(X, N:[plural]) verb('verb.be'[symbol], N, P, T) (adjective(X2)|indefinite-article(ART, N2:[singular]) noun(X2, N2)|noun(X2, N3:[plural])) ('!'|'.')*"/>
	<NLPattern name="inform-be-not-adj|noun"
			   head="perf.inform(LISTENER, #or(#not(LEFTSIDE), #not(#cons(X2, V:[#id]))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 'not' (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) ('!'|'.')*
			   		 #derefUniversal(C, V, LEFTSIDE)"/>
	<NLPattern name="inform-are-not-adj|noun"
		       head="perf.inform(LISTENER, #or(#not(#cons(X, V:[#id])), #not(#cons(X2, V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 noun(X, N:[plural]) verb('verb.be'[symbol], N, P, T) 'not' (adjective(X2)|indefinite-article(ART, N2:[singular]) noun(X2, N2)|noun(X2, N3:[plural])) ('!'|'.')*"/>
	<!-- e.g.: "all chairs speak english" -->
	<NLPattern name="inform-universal-verb-object"
		       head="perf.inform(LISTENER, #or(#not(LEFTSIDE), #cons(VERB, V:[#id], OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb(VERB, N, P, T) 
			   		 nounPhrase(X3, N3, P3, C3) ('!'|'.')*
			   		 #derefFromContext(C3, OBJECT)
			   		 #derefUniversal(C, V, LEFTSIDE)"/>
	<NLPattern name="perf-inform-np-be-adj-universal"
			   head="perf.inform(LISTENER, #or(#not(LEFTSIDE), #cons(X2_PARENT:[property-with-value], V:[#id], X2:[property-with-value])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'.')*
			   		 #derefUniversal(C, V, LEFTSIDE)"
			   priority="200"/>
	<NLPattern name="perf-inform-np-be-not-adj-universal"
			   head="perf.inform(LISTENER, #or(#not(LEFTSIDE), #not(#cons(X2_PARENT:[property-with-value], V:[#id], X2:[property-with-value]))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 'not' adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'.')*
			   		 #derefUniversal(C, V, LEFTSIDE)"
			   priority="200"/>

	<NLPattern name="my-property-with-value-is-X"
			   head="perf.inform(LISTENER, #cons(X2:[property-with-value], SPEAKER, X3))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 possessive-determiner('determiner.my'[symbol], N)
			   		 noun(X2, N2)
			   		 verb('verb.be'[symbol], N, P, T) noun(X3,N3) ('!'|'.')*"/>
	<NLPattern name="your-property-with-value-is-X"
			   head="perf.inform(LISTENER, #cons(X2:[property-with-value], LISTENER, X3))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 possessive-determiner('determiner.your'[symbol], N)
			   		 noun(X2, N2)
			   		 verb('verb.be'[symbol], N, P, T) noun(X3,N3) ('!'|'.')*"/>


	<!-- e.g.: "socrates was a man" -->
	<NLPattern name="inform-hypothetical-be-adj|noun"
			   head="perf.inform(LISTENER, #list(LEFTSIDE, #cons(X2, V:[#id])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N))  ('!'|'.')* 
			   		 #derefHypothetical(C, V, LEFTSIDE)"/>
	<NLPattern name="inform-hypothetical-be-not-adj|noun"
			   head="perf.inform(LISTENER, #list(LEFTSIDE, #not(#cons(X2, V:[#id]))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 'not' (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N))  ('!'|'.')* 
			   		 #derefHypothetical(C, V, LEFTSIDE)"/>

	<NLPattern name="inform-hypothetical-be-property-with-value"
			   head="perf.inform(LISTENER, #list(LEFTSIDE, #cons(X2_PARENT:[property-with-value], V:[#id], X2:[property-with-value])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'.')* 
			   		 #derefHypothetical(C, V, LEFTSIDE)"
			   priority="200"/>
	<NLPattern name="inform-hypothetical-be-not-property-with-value"
			   head="perf.inform(LISTENER, #list(LEFTSIDE, #not(#cons(X2_PARENT:[property-with-value], V:[#id], X2:[property-with-value]))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 'not' adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'.')* 
			   		 #derefHypothetical(C, V, LEFTSIDE)"
			   priority="200"/>

	<!-- e.g.: "the ship is mine" -->
	<NLPattern name="inform-object-be-mine"
			   head="perf.inform(LISTENER, verb.own(SPEAKER, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 possessive-pronoun(PP2,[singular],G2,[first-person]) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)"/>
	<NLPattern name="inform-object-be-yours"
			   head="perf.inform(LISTENER, verb.own(LISTENER, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 possessive-pronoun(PP2,[singular],G2,[second-person]) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)"/>
	<NLPattern name="inform-obj-is-obj's"
			   head="perf.inform(LISTENER, verb.own(OWNER, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 nounPhrase(X2, [singular], P, C2) '\'s'  ('!'|'.')* 
					 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OWNER)"/>

	<!-- e.g.: "I am in the kitchen" -->
	<NLPattern name="inform-obj-be-prep"
			   head="perf.inform(LISTENER, #cons(PREPOSITION, SUBJECT, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2)  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="inform-be-not-prep-obj"
			   head="perf.inform(LISTENER, #not(#cons(PREPOSITION, SUBJECT, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 'not' preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2)  ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="inform-be-not-prep-query"
			   head="perf.inform(LISTENER, #and(#cons(PREPOSITION, SUBJECT, QUERY_V), QUERY))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2)  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)
			   		 #derefQuery(C2, QUERY_V, QUERY)"/>

	<!-- e.g.: "I have the white key" -->
	<NLPattern name="inform-verb"
			   head="perf.inform(LISTENER, #cons(VERB, SUBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb(VERB, N, P, T) ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="inform-verb-context"
			   head="perf.inform(LISTENER, #cons(VERB, SUBJECT, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb(VERB, N, P, T) 
			   		 nounPhrase(X2, [singular], P2, C2)  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="inform-verb-context-future"
			   head="perf.inform(LISTENER, #and(STATEMENT:#cons(VERB, SUBJECT, OBJECT), time.future(STATEMENT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) ('will'|'shall') verb(VERB, N, P, T) 
			   		 nounPhrase(X2, [singular], P2, C2)  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="inform-donot-verb-context"
			   head="perf.inform(LISTENER, #not(#cons(VERB, SUBJECT, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) ('will'|'shall'|verb('verb.do'[symbol], N, P, [present-tense])) 'not' verb(VERB, N3, P3, [infinitive-tense])
			   		 nounPhrase(X2, [singular], P2, C2)  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="inform-verb-a-noun"
			   head="perf.inform(LISTENER, #and(#cons(VERB, SUBJECT, NOUN_V:[#id]), #cons(X2, NOUN_V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb(VERB, N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun(X2, N2)  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>	
	<NLPattern name="inform-not-verb-a-noun"
			   head="perf.inform(LISTENER, #or(#not(#cons(VERB, SUBJECT, NOUN_V:[#id])), #not(#cons(X2, NOUN_V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) 'do' 'not' verb(VERB, N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun(X2, N2)  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="inform-relationverb-noun"
			   head="perf.inform(LISTENER, #list(#cons(VERB, SUBJECT, X2), #or(#not(#cons(X2, V:[#id])), #cons(VERB, SUBJECT, V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb(VERB, N, P, T) #symbolToSort(VERB, VERB_SORT:[relation-verb])
			   		 (noun(X2, [plural])|noun(X2, [uncountable])) ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>	
	<NLPattern name="inform-not-relationverb-noun"
			   head="perf.inform(LISTENER, #list(#not(#cons(VERB, SUBJECT, X2)), #or(#not(#cons(X2, V:[#id])), #not(#cons(VERB, SUBJECT, V)))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) 
			   		 verb('verb.do'[symbol], ND, PD, [present-tense]) 'not'
			   		 verb(VERB, N, P, T) #symbolToSort(VERB, VERB_SORT:[relation-verb])
			   		 (noun(X2, [plural])|noun(X2, [uncountable])) ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>	
	<NLPattern name="inform-future-verb"
			   head="perf.inform(LISTENER, #and(VC:#cons(VERB, SUBJECT), time.future(VC)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) 'will' verb(VERB, N, P, T)  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>	
	<NLPattern name="inform-future-continuous-verb"
			   head="perf.inform(LISTENER, #and(VC:#cons(VERB, SUBJECT), time.future(VC)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) 
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'going to'
			   		 verb(VERB, N2, P2, [infinitive-tense])  ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>	
	<NLPattern name="inform-future-verb-a-noun"
			   head="perf.inform(LISTENER, #and(VC:#cons(VERB, SUBJECT, NOUN_V), #and(#cons(X2, NOUN_V), time.future(VC))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) 'will' verb(VERB, N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun(X2, N2) ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>	

	<!-- "there is a crate here" / "there is a crate in the kitchen" -->
	<NLPattern name="inform-there-is-a-noun-loc"
			   head="perf.inform(LISTENER, #and(space.at(QUERY_V, LOCATION), QUERY))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'there' verb('verb.be'[symbol], N, P, [present-tense])
			   		 indefinite-article('a'[symbol], [singular]) nounPhraseNoDeterminer(X2, N2, P2, C2)
					 noun(X3:[space.location], N3) ('!'|'.')* 
    		   		 #derefFromContext(noun(X3, N3), LOCATION)
					 #derefQuery(C2, QUERY_V, QUERY)"/>	

	<NLPattern name="inform-there-is-a-noun-prep"
			   head="perf.inform(LISTENER, #and(#cons(PREP, QUERY_V, OBJECT), QUERY))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'there' verb('verb.be'[symbol], N, P, [present-tense])
			   		 indefinite-article('a'[symbol], [singular]) nounPhraseNoDeterminer(X2, N2, P2, C2)
					 preposition(PREP)
					 nounPhrase(X3, N3, P3, C3) ('!'|'.')* 
    		   		 #derefFromContext(C3, OBJECT)
					 #derefQuery(C2, QUERY_V, QUERY)"/>	
					 
    <!-- e.g.: "the color of my key is white" -->
	<NLPattern name="inform-property-with-value"
			   head="perf.inform(LISTENER, #cons(X2:[property-with-value], OBJECT, X3))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         'the' noun(X2, [singular]) 'of'
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) adjective(X3) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)"/>
	<NLPattern name="inform-property-with-value-not"
			   head="perf.inform(LISTENER, #not(#cons(X2:[property-with-value], OBJECT, X3)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         'the' noun(X2, [singular]) 'of'
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 'not' adjective(X3) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)"/>
	<NLPattern name="inform-property-with-value-saxon"
			   head="perf.inform(LISTENER, #cons(X2:[property-with-value], OBJECT, X3))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         nounPhrase(X, N, P, C) '\'s' noun(X2, [singular])
			   		 verb('verb.be'[symbol], N, P, T) adjective(X3)
			   		 ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)"
			   priority="200"/>
	<NLPattern name="inform-property-with-value-saxon-not"
			   head="perf.inform(LISTENER, #not(#cons(X2:[property-with-value], OBJECT, X3)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         nounPhrase(X, N, P, C) '\'s' noun(X2, [singular])
			   		 verb('verb.be'[symbol], N, P, T) 'not' adjective(X3)
			   		 ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)"
			   priority="200"/>

	<NLPattern name="inform-property-with-2-values"
			   head="perf.inform(LISTENER, #or(#cons(X2:[property-with-value], OBJECT, X3),
			   								   #cons(X2, OBJECT, X4)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         'the' noun(X2, [singular]) 'of'
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, T) 
			   		 ['either'] adjective(X3) ['or'] adjective(X4) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)"/>

	<NLPattern name="inform-haveable-property-with-value"
			   head="perf.inform(LISTENER, #cons(X3:[haveable-property-with-value], OBJECT, OBJECT2))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         nounPhrase(X, N, P, C)
    		         verb('verb.have'[symbol], N, P, T)
    		         preposition(X3) 
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OBJECT2)"/>

	<NLPattern name="inform-haveable-property-with-verb-value"
			   head="perf.inform(LISTENER, #cons(X3:[haveable-property-with-value], OBJECT, #cons(VERB:[symbol], OBJECT, OBJECT2)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         nounPhrase(X, N, P, C)
    		         verb('verb.have'[symbol], N, P, T)
    		         preposition(X3) 
    		         verb(VERB, VN, VP, [infinitive-tense])
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OBJECT2)"/>

	<NLPattern name="inform-role"
			   head="perf.inform(LISTENER, role(OBJECT, OBJECT2, ROLE:[role]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         nounPhrase(X, N:[singular], P, C)
    		         verb('verb.be'[symbol], N, P, T)
    		         (indefinite-article(ART, [singular]) | 'the') noun(ROLE, N)
    		         preposition('space.at'[space.at]) 
			   		 nounPhrase(X3, N3, P3, C3) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C3, OBJECT2)"
			   priority="200"/>
	<NLPattern name="inform-profession"
			   head="perf.inform(LISTENER, profession(OBJECT, OBJECT2, ROLE:[profession]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         nounPhrase(X, N:[singular], P, C)
    		         verb('verb.be'[symbol], N, P, T)
    		         (indefinite-article(ART, [singular]) | 'the') noun(ROLE, N)
    		         preposition('space.at'[space.at]) 
			   		 nounPhrase(X3, N3, P3, C3) ('!'|'.')* 
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C3, OBJECT2)"
			   priority="250"/>

	<NLPattern name="inform-present-continuous-verb-obj"
			   head="perf.inform(LISTENER, #cons(VERB, SUBJECT, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         ['i' 'think']
    		         nounPhrase(X, N:[singular], P, C)
    		         verb('verb.be'[symbol], N2, P2, [present-tense]) verb(VERB, N3, P3, [gerund-tense]) 
    		         nounPhrase(X4, N4, P4, C4) ('!'|'.')* 
    		         #derefFromContext(C, SUBJECT)
    		         #derefFromContext(C4, OBJECT)"/>

	<NLPattern name="inform-present-continuous-verb-noun"
			   head="perf.inform(LISTENER, #cons(VERB, SUBJECT, X4))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         ['i' 'think']
    		         nounPhrase(X, N:[singular], P, C)
    		         verb('verb.be'[symbol], N2, P2, [present-tense]) verb(VERB, N3, P3, [gerund-tense]) 
    		         noun(X4, N4) ('!'|'.')* 
    		         #derefFromContext(C, SUBJECT)"
    		   priority="50"/>

	<NLPattern name="inform-cardinal-direction-continuous-present"
			   head="perf.inform(LISTENER, facing-direction(SUBJECT, X4:[cardinal-direction]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         ['i' 'think']
    		         nounPhrase(X, N:[singular], P, C)
    		         verb('verb.be'[symbol], N2, P2, [present-tense]) 
    		         ['now'] 
    		         (verb('verb.face'[symbol], N3, P3, [gerund-tense])|
    		          verb('verb.look-at'[symbol], N3, P3, [gerund-tense])|
    		          'looking')
    		         ['to'] ['the']
    		         noun(X4, N4) ['now'] ('!'|'.')* 
    		         #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="inform-cardinal-direction"
			   head="perf.inform(LISTENER, facing-direction(SUBJECT, X4:[cardinal-direction]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         ['i' 'think']
    		         nounPhrase(X, N:[singular], P, C)
    		         (verb('verb.face'[symbol], N3, P3, [present-tense])|
    		          verb('verb.look-at'[symbol], N3, P3, [present-tense])|
    		          'look'|'looks')
    		         ['to'] ['the']
    		         noun(X4, N4) ['now'] ('!'|'.')* 
    		         #derefFromContext(C, SUBJECT)"/>

	<NLPattern name="inform-X-can-Y"
			   head="perf.inform(LISTENER, verb.can(OBJECT, #cons(VERB,OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X2, N, P, C) verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 verb(VERB, N2, P2, [infinitive-tense]) 
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>

	<NLPattern name="inform-X-can-Y-obj"
			   head="perf.inform(LISTENER, verb.can(OBJECT, #cons(VERB,OBJECT,OBJECT3)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X2, N, P, C) verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 verb(VERB, N2, P2, [infinitive-tense]) 
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C3, OBJECT3)"/>

	<NLPattern name="inform-X-does-noun"
			   head="perf.inform(LISTENER, verb.do(OBJECT, NOUN))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X2, N, P, C) verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 noun(NOUN, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>
	<NLPattern name="inform-X-does-nothing"
			   head="perf.inform(LISTENER, verb.do(OBJECT, 'nothing'[nothing]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X2, N, P, C) verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 'nothing'
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="inform-X-be-my-haveable-relation"
    		   head="perf.inform(LISTENER, #cons(RELATION:[haveable-relation], SPEAKER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 nounPhrase(X, [singular], P, C)
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 'my'
			   		 noun(RELATION, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="inform-X-be-your-haveable-relation"
    		   head="perf.inform(LISTENER, #cons(RELATION:[haveable-relation], LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 nounPhrase(X, [singular], P, C)
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 'your'
			   		 noun(RELATION, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="inform-X-be-Y's-haveable-relation"
    		   head="perf.inform(LISTENER, #cons(RELATION:[haveable-relation], OBJECT2, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 nounPhrase(X, [singular], P, C)
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2) '\'s'
			   		 noun(RELATION, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OBJECT2)"/>

    <NLPattern name="inform-X-and-Y-be-haveable-relation"
    		   head="perf.inform(LISTENER, #cons(RELATION:[haveable-relation], OBJECT, OBJECT2))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 nounPhrase(X, [singular], P, C)
			   		 'and'
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 noun(RELATION, [plural])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OBJECT2)"/>			   		 


    <NLPattern name="inform-X-be-not-my-haveable-relation"
    		   head="perf.inform(LISTENER, #not(#cons(RELATION:[haveable-relation], SPEAKER, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 nounPhrase(X, [singular], P, C)
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'not'
			   		 'my'
			   		 noun(RELATION, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="inform-X-be-not-your-haveable-relation"
    		   head="perf.inform(LISTENER, #not(#cons(RELATION:[haveable-relation], LISTENER, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 nounPhrase(X, [singular], P, C)
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'not'
			   		 'your'
			   		 noun(RELATION, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="inform-X-be-not-Y's-haveable-relation"
    		   head="perf.inform(LISTENER, #not(#cons(RELATION:[haveable-relation], OBJECT2, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 nounPhrase(X, [singular], P, C)
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'not'
			   		 nounPhrase(X2, [singular], P2, C2) '\'s'
			   		 noun(RELATION, [singular])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OBJECT2)"/>

    <NLPattern name="inform-X-and-Y-be-not-haveable-relation"
    		   head="perf.inform(LISTENER, #not(#cons(RELATION:[haveable-relation], OBJECT, OBJECT2)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 nounPhrase(X, [singular], P, C)
			   		 'and'
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'not'
			   		 noun(RELATION, [plural])
			   		 ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OBJECT2)"/>		

	<!-- Inform performatives for properties with value, without actual values -->
	<NLPattern name="inform-i-verb-my-obj"
		       head="perf.inform(LISTENER, #cons(VERB, SPEAKER, #cons(PROP, SPEAKER, QUERY_VARIABLE)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         ['i' 'think']
    		         nounPhrase(X, N:[singular], P, C)
    		         verb(VERB, N, P, T)
    		         possessive-determiner('determiner.my'[symbol], N)
    		         noun(PROP, N2)
    		         ('!'|'.')*
    		         #derefFromContext(C, SPEAKER)"/>
	<NLPattern name="inform-i-verb-my-obj-time"
		       head="perf.inform(LISTENER, #and(PRED:#cons(VERB, SPEAKER, #cons(PROP, SPEAKER, QUERY_VARIABLE)), #cons(TIMEADV:[time], PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         ['i' 'think']
    		         nounPhrase(X, N:[singular], P, C)
    		         verb(VERB, N, P, T)
    		         possessive-determiner('determiner.my'[symbol], N)
    		         noun(PROP, N2)
    		         [adverb(TIMEADV)]
    		         ('!'|'.')*
    		         #derefFromContext(C, SPEAKER)"/>

    <!-- talking about the ambient, "it's dark", "it's sunny", etc. -->
	<NLPattern name="inform-ambient"
			   head="perf.inform(LISTENER, #cons(ADJ, LOCATION))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'it' verb('verb.be'[symbol], N, [third-person], [present-tense])
			   		 adjective(ADJ) (#subsumes([temperature], ADJ) | #subsumes([brightness], ADJ))
			   		 [['in'] 'here'] 
			   		 ('!'|'.')* 
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)
			   		 "/>

    <!-- talking about measuring units (kilograms, celcius, etc.) -->
	<NLPattern name="inform-value-units1"
			   head="perf.inform(LISTENER, #cons(PROPERTY:[property-with-value], SUBJECT, NEWVALUE))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N:[singular], P, C) '\'s'
			   		 noun(PROPERTY, [singular])
			   		 verb('verb.be'[symbol], N, [third-person], [present-tense])
			   		 cardinal(VALUE)
			   		 noun(UNIT:[measuring-unit], N2) #changeConstantSort(VALUE, UNIT, NEWVALUE)
			   		 ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"/>  
	<NLPattern name="inform-value-units2"
			   head="perf.inform(LISTENER, #cons(PROPERTY:[property-with-value], SUBJECT, NEWVALUE))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'the' noun(PROPERTY, [singular]) 'of'
			   		 nounPhrase(X, N:[singular], P, C)
			   		 verb('verb.be'[symbol], N, [third-person], [present-tense])
			   		 cardinal(VALUE)
			   		 noun(UNIT:[measuring-unit], N2) #changeConstantSort(VALUE, UNIT, NEWVALUE)
			   		 ('!'|'.')* 
			   		 #derefFromContext(C, SUBJECT)"/>  			   		 
	<NLPattern name="inform-value-units3"
			   head="perf.inform(LISTENER, QUERY)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N:[singular], P, C)
			   		 verb('verb.be'[symbol], N, [third-person], [present-tense])
			   		 cardinal(VALUE)
			   		 noun(UNIT:[measuring-unit], N2) #changeConstantSort(VALUE, UNIT, NEWVALUE)
			   		 ('!'|'.')* 
			   		 #derefQuery(C, NEWVALUE, QUERY)"/>  	

	<!-- special case for having a collision, which is a way to say you collided with -->
	<NLPattern name="inform-have-collision-with-a-context"
			   head="perf.inform(LISTENER, verb.collide-with(SUBJECT, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.have'[symbol], N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun('collision'[collision], N2) 
			   		 ('with'|'against')
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)
					 #derefFromContext(C3, OBJECT)"/>	
	<NLPattern name="inform-have-collision-with-a-noun"
			   head="perf.inform(LISTENER, #and(verb.collide-with(SUBJECT, NOUN_V:[#id]), #cons(X3, NOUN_V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.have'[symbol], N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun('collision'[collision], N2) 
			   		 ('with'|'against') 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun(X3, N3) 
			   		 ('!'|'.')* 
					 #derefFromContext(C, SUBJECT)"/>	

	<NLPattern name="q.predicate-have-collision"
			   head="perf.q.predicate(LISTENER, #and(V:verb.collide-with(SUBJECT, OBJECT), time.past(V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
					 verb('verb.do'[symbol], ND, PD, [past-tense]) 			   		 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.have'[symbol], N3, P3, T3) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun('collision'[collision], N4)
			   		 [('with'|'against') 
			   		  (indefinite-pronoun('pronoun.something'[symbol], N5, G5, P5) | indefinite-pronoun('pronoun.anything'[symbol], N5, G5, P5))] 
			   		 ('!'|'?')* 
					 #derefFromContext(C2, SUBJECT)"
			   priority="200"/>	
	<NLPattern name="q.predicate-have-collision-with-context"
			   head="perf.q.predicate(LISTENER, #and(V:verb.collide-with(SUBJECT, OBJECT), time.past(V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
					 verb('verb.do'[symbol], ND, PD, [past-tense]) 			   		 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.have'[symbol], N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun('collision'[collision], N3) 
			   		 ('with'|'against') 
			   		 nounPhrase(X4, N4, P4, C4)
			   		 ('!'|'?')* 
					 #derefFromContext(C2, SUBJECT)
					 #derefFromContext(C4, OBJECT)"
			   priority="200"/>	
	<NLPattern name="q.predicate-have-collision-with-a-noun"
			   head="perf.q.predicate(LISTENER, #and(V:verb.collide-with(SUBJECT, OBJECT:[#id]), #and(time.past(V), #cons(X4,OBJECT))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
					 verb('verb.do'[symbol], ND, PD, [past-tense]) 			   		 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.have'[symbol], N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun('collision'[collision], N3) 
			   		 ('with'|'against') 
 			   		 indefinite-article('a'[symbol], [singular])
			   		 noun(X4, N4) 
			   		 ('!'|'?')* 
					 #derefFromContext(C2, SUBJECT)"
			   priority="200"/>	

    <NLPattern name="q.query-what-have-collision-with"
    		   head="perf.q.query(LISTENER, V, #and(PRED:verb.collide-with(QUERY_ARG1,V), time.past(PRED)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.do'[symbol], N, P, [past-tense])
			   		 nounPhrase(X1, N, P, C1)
			   		 verb('verb.have'[symbol], N, P, T) 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun('collision'[collision], N3) 
			   		 ('with'|'against') 
			   		  ('!'|'?')* 
    		   		 #derefFromContext(C1, QUERY_ARG1)"/>

	<!-- Patterns for performative "perf.inform.answer" -->
	<NLPattern name="answer-yes"
			   head="perf.inform.answer(LISTENER, 'yes'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('yes' | ['hell'] 'yeah' | 'of' 'course' | 'sure' | 'i' 'do' | 'ok') ('!'|'?'|'.')*"/>
	<NLPattern name="answer-yes2"
			   head="perf.inform.answer(LISTENER, 'yes'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['sure' ('!'|'.')* [',']] ('i' 'will') ('!'|'?'|'.')*"/>
	<NLPattern name="answer-yes3"
			   head="perf.inform.answer(LISTENER, 'yes'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'i' 'think' 'so' ('!'|'?'|'.')*"/>
	<NLPattern name="answer-yes-complex"
			   head="perf.inform.answer(LISTENER, 'yes'[symbol], P)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('yes' | ['hell'] 'yeah' | 'of' 'course' | 'sure') [','] perf.inform(LISTENER, P) ('!'|'?'|'.')*"/>
	<NLPattern name="answer-yes-complex2"
			   head="perf.inform.answer(LISTENER, 'yes'[symbol], P)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('yes' | ['hell'] 'yeah' | 'of' 'course' | 'sure') [','] perf.inform(LISTENER, #and(P, time.future(P))) ('!'|'?'|'.')*"
			   priority="200"/>
	<NLPattern name="answer-yes-complex-specialcase"
			   head="perf.inform.answer(LISTENER, 'yes'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('yes' | ['hell'] 'yeah' | 'of' 'course' | 'sure') [','] 'i' 'do' ('!'|'?'|'.')*"
			   priority="200"/>
	<!-- this is a special case to cover an answer given by one of the beta testers, might have to be expanded for variations: -->
	<NLPattern name="answer-yes-no-choice"
			   head="perf.inform.answer(LISTENER, 'yes'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'i' 'have' 'no' 'choice' ('!'|'?'|'.')*"/>

	<NLPattern name="answer-no"
			   head="perf.inform.answer(LISTENER, 'no'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('no' ['way'] | 'nope' | 'nah' | 'absolutely' 'not' |
			   		  'not' 'really' | 'not' 'at' 'all' | 'hell' 'no' | 'fuck' 'no') ('!'|'?'|'.')*"/>
	<NLPattern name="answer-no2"
			   head="perf.inform.answer(LISTENER, 'no'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['no' [',']] 'i' ('do'|'will') 'not' ('!'|'?'|'.')*"/>
	<NLPattern name="answer-no3"
			   head="perf.inform.answer(LISTENER, 'no'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'i' 'do' 'not' 'think' 'so' ('!'|'?'|'.')*"/>
	<NLPattern name="answer-no4"
			   head="perf.inform.answer(LISTENER, 'no'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ['no' [',']] 'not' 'really' ('!'|'?'|'.')*"/>
	<NLPattern name="answer-unknown"
			   head="perf.inform.answer(LISTENER, 'unknown'[symbol])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 (['i'] 'do' 'not' ('know'|'remember') |
			          ['i' 'am'] 'not' 'sure') ('!'|'?'|'.')*"
			   priority="200"/>

	<NLPattern name="answer-with-query-followup"
			   head="#list(perf.inform.answer(LISTENER, ANSWER:[symbol]), perf.q.query(LISTENER, VARIABLE, QUERY))"
			   body="perf.inform.answer(LISTENER, ANSWER)
			         [(','|'.')]
			         perf.q.query(LISTENER, VARIABLE, QUERY)"
			   priority="75"/>
			   
	<NLPattern name="answer-nounPhrase"
			   head="perf.inform.answer(LISTENER, SUBJECT)"
			   body="nounPhrase(X, N, P, C) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="answer-properNounCompound"
			   head="perf.inform.answer(LISTENER, proper-noun(X, N))"
			   body="properNounCompound(X, N) ('!'|'?')*"/>

	<NLPattern name="answer-nounPhrase-token"
			   head="perf.inform.answer(LISTENER, proper-noun(NAME1, [singular]))"
			   body="#token(NAME1) ('!'|'?')*"
			   priority="25"/>

	<NLPattern name="answer-nounPhrase-2tokens"
			   head="perf.inform.answer(LISTENER, proper-noun(NAME_SYMBOL, [singular]))"
			   body="#token(NAME1)
			   	     #token(NAME2) ('!'|'?')*
			   	     #concatenateSymbols(NAME1,' '[symbol],NAME2,NAME_SYMBOL)"
			   priority="25"/>

	<!-- Patterns for performative "perf.q.predicate" -->
	<NLPattern name="q.predicate-verb"
			   head="perf.q.predicate(LISTENER, #cons(VERB, SUBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         verb('verb.do'[symbol], N, P, [present-tense])
    		         nounPhrase(X, N2, P2, C)
    		         verb(VERB, N3, P3, [infinitive-tense])
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>  
	<NLPattern name="q.predicate-1-present"
			   head="perf.q.predicate(LISTENER, #cons(X2,SUBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) ['not'] nounPhrase(X, N, P, C) 
			   		 ['not'] (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-1-present2"
			   head="perf.q.predicate(LISTENER, #cons(X2,SUBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 [('would'|'could') 'you'] ['please'] 'tell' 'me' 'if' 
			   		 nounPhrase(X, N, P, C)
			   		 verb('verb.be'[symbol], N, P, [present-tense]) ['not']
			   		 (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) ('!'|'?'|'.')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-1-past"
			   head="perf.q.predicate(LISTENER, #and(PRED:#cons(X2,SUBJECT), time.past(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [past-tense]) nounPhrase(X, N, P, C) 
			   		 ['not'] (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-verb-future"
			   head="perf.q.predicate(LISTENER, #and(PRED:#cons(VERB, SUBJECT), time.future(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         verb('verb.will'[symbol], N, P, [present-tense])
    		         nounPhrase(X, N2, P2, C)
    		         verb(VERB, N3, P3, [infinitive-tense])
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>  

	<NLPattern name="q.predicate-give-future"
			   head="perf.q.predicate(LISTENER, #and(PRED:action.give(SUBJECT, OBJECT, TARGET), time.future(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         verb('verb.will'[symbol], N, P, [present-tense])
    		         nounPhrase(X, N2, P2, C)
    		         verb('action.give'[symbol], N3, P3, [infinitive-tense])
    		         nounPhrase(X4, N4, P4, C4)
    		         'to'
    		         nounPhrase(X5, N5, P5, C5)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)
			   		 #derefFromContext(C5, TARGET)"/>  

	<NLPattern name="q.predicate-give-future2"
			   head="perf.q.predicate(LISTENER, #and(PRED:action.give(SUBJECT, OBJECT, TARGET), time.future(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         verb('verb.will'[symbol], N, P, [present-tense])
    		         nounPhrase(X, N2, P2, C)
    		         verb('action.give'[symbol], N3, P3, [infinitive-tense])
    		         nounPhrase(X5, N5, P5, C5)
    		         nounPhrase(X4, N4, P4, C4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)
			   		 #derefFromContext(C5, TARGET)"/>  

	<NLPattern name="q.predicate-1-incorrect-grammar-present"
			   head="perf.q.predicate(LISTENER, #cons(X2,SUBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C)  verb('verb.be'[symbol], N, P, [present-tense])
			   		 (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) '?' ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-1-incorrect-grammar-past"
			   head="perf.q.predicate(LISTENER, #and(PRED:#cons(X2,SUBJECT), time.past(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [past-tense])
			   		 (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) '?'  ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>

	<NLPattern name="q.predicate-1-timeadverb"
			   head="perf.q.predicate(LISTENER, #and(PRED:#cons(X2,SUBJECT), #cons(TIMEADV:[time.past], PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [past-tense]) nounPhrase(X, N, P, C) 
			   		 ['not'] (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) 
			   		 adverb(TIMEADV) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-be-universal-adj|noun"
		       head="perf.q.predicate(LISTENER, #or(#not(LEFTSIDE), #cons(X2, V:[#id])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 ['not'] (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) ('!'|'?')*
			   		 #derefUniversal(C, V, LEFTSIDE)"/>
	<NLPattern name="q.predicate-hypothetical"
			   head="perf.q.predicate(LISTENER, #cons(X2, V:[#id]), LEFTSIDE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 ['not'] (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) ('!'|'?')*
			   		 #derefHypothetical(C, V, LEFTSIDE)"/>
	<NLPattern name="q.predicate-hypothetical-past"
			   head="perf.q.predicate(LISTENER, #and(PRED:#cons(X2, V:[#id]), time.past(PRED)), LEFTSIDE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [past-tense]) nounPhrase(X, N, P, C) 
			   		 ['not'] (adjective(X2)|indefinite-article(ART, [singular]) noun(X2, N)) ('!'|'?')*
			   		 #derefHypothetical(C, V, LEFTSIDE)"/>

	<NLPattern name="q.predicate-be-obj-property-with-value"
		       head="perf.q.predicate(LISTENER, #cons(X2_PARENT:[property-with-value], SUBJECT, X2:[property-with-value]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 ['not'] adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>
	<NLPattern name="q.predicate-universal-bc-prop-with-value"
		       head="perf.q.predicate(LISTENER, #or(#not(LEFTSIDE), #cons(X2_PARENT:[property-with-value], V:[#id], X2:[property-with-value])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 ['not'] adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'?')*
			   		 #derefUniversal(C, V, LEFTSIDE)"
			   priority="200"/>
	<NLPattern name="q.predicate-hypothetical-bt-prop-with-value"
		       head="perf.q.predicate(LISTENER, #and(LEFTSIDE, #cons(X2_PARENT:[property-with-value], V:[#id], X2:[property-with-value])))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 ['not'] adjective(X2) #sortParent(X2, X2_PARENT) ('!'|'?')*
			   		 #derefHypothetical(C, V, LEFTSIDE)"
			   priority="200"/>

	<NLPattern name="q.predicate-property-with-value"
			   head="perf.q.predicate(LISTENER, #cons(X2_PARENT:[property-with-value], SUBJECT, X2:[property-with-value]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 ['not'] 
			   		 indefinite-article('a'[symbol], [singular])
			   		 noun(X2, [singular]) #sortParent(X2, X2_PARENT) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>
	<NLPattern name="q.predicate-property-with-value2"
			   head="perf.q.predicate(LISTENER, #cons(PROPERTY:[property-with-value], SUBJECT, X3:[property-with-value]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 'the' noun(PROPERTY, PN) 'of'
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 ['not'] 
			   		 adjective(X3) ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/>			   
	<NLPattern name="q.predicate-property-with-value3"
			   head="perf.q.predicate(LISTENER, #cons(PROPERTY:[property-with-value], SUBJECT, X3:[property-with-value]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'tell' 'me' 'if'
			   		 'the' noun(PROPERTY, PN) 'of'
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 verb('verb.be'[symbol], N, P, T)
			   		 adjective(X3) ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/>			   
	<NLPattern name="q.predicate-role"
			   head="perf.q.predicate(LISTENER, role(SUBJECT, X2:[role]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 ['not'] 
			   		 (indefinite-article('a'[symbol], [singular]) | 'the')
			   		 noun(X2, [singular]) #sortParent(X2, X2_PARENT) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="250"/>
	<NLPattern name="q.predicate-profession"
			   head="perf.q.predicate(LISTENER, profession(SUBJECT, X2:[profession]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 ['not'] 
			   		 (indefinite-article('a'[symbol], [singular]) | 'the')
			   		 noun(X2, [singular]) #sortParent(X2, X2_PARENT) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="300"/>

	<NLPattern name="q.predicate-be-obj-propernoun"
		       head="perf.q.predicate(LISTENER, name(SUBJECT,X2))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 properNounCompound(X2, N) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>

	<NLPattern name="q.predicate-be-obj-mine"
		       head="perf.q.predicate(LISTENER, verb.own(SPEAKER, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C)  
			   		 possessive-pronoun(PP2,[singular],G2,[first-person]) ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)"/>
	<NLPattern name="q.predicate-be-obj-yours"
		       head="perf.q.predicate(LISTENER, verb.own(LISTENER, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 possessive-pronoun(PP2,[singular],G2,[second-person]) ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)"/>
	<NLPattern name="q.predicate-be-obj-obj's"
		       head="perf.q.predicate(LISTENER, verb.own(OWNER, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, T) nounPhrase(X, N, P, C)  
			   		 nounPhrase(X2, [singular], P, C2) '\'s' ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OWNER)"/>
	<NLPattern name="q.predicate-be-obj-prep-obj"
		       head="perf.q.predicate(LISTENER, #cons(PREPOSITION, SUBJECT, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C)  
			   		 ['not'] preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"
			   priority="150"/>
	<NLPattern name="q.predicate-was-obj-prep-obj"
		       head="perf.q.predicate(LISTENER, #and(PRED:#cons(PREPOSITION, SUBJECT, OBJECT), time.past(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [past-tense]) nounPhrase(X, N, P, C)  
			   		 ['not'] preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"
			   priority="150"/>

	<NLPattern name="q.predicate-obj-be-prep-query"
		       head="perf.q.predicate(LISTENER, #and(#cons(PREPOSITION, SUBJECT, QUERY_V), QUERY))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C)  
			   		 ['not'] preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefQuery(C2, QUERY_V, QUERY)"/>

	<NLPattern name="q.predicate-have-obj-been-prep-obj"
		       head="perf.q.predicate(LISTENER, #and(PRED:#cons(PREPOSITION, SUBJECT, OBJECT), time.past(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.have'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C)  
			   		 ['not'] 'been'
			   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) 
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="q.predicate-be-obj-prep-obj-time"
		       head="perf.q.predicate(LISTENER, #and(PRED:#cons(PREPOSITION, SUBJECT, OBJECT), #cons(ADVTIME:[time], PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [past-tense]) nounPhrase(X, N, P, C)  
			   		 ['not'] preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) 
			   		 adverb(ADVTIME) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="q.predicate-have-obj-been-prep-obj-time"
		       head="perf.q.predicate(LISTENER, #and(PRED:#cons(PREPOSITION, SUBJECT, OBJECT), #cons(ADVTIME:[time],PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.have'[symbol], N, P, T) nounPhrase(X, N, P, C)  
			   		 ['not'] 'been'
			   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) 
			   		 adverb(ADVTIME) 
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>			   		 
	<NLPattern name="predicate-is"
			   head="perf.q.predicate(LISTENER, PREDICATE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, T) nounPhrase(X, N, P, C)  
			   		 ('!'|'?')*
					 #derefQuery(C, V, PREDICATE)"/>			   		 
	<NLPattern name="predicate-is-there"
			   head="perf.q.predicate(LISTENER, PREDICATE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, T) 'there' nounPhrase(X, N, P, C)  
			   		 ('!'|'?')*
					 #derefQuery(C, V, PREDICATE)"
			   priority="150"/>

	<NLPattern name="predicate-is-there2"
			   head="perf.q.predicate(LISTENER, PREDICATE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, T) 'there'
			   		 'more' noun(NOUN, NN)
			   		 ('!'|'?')*
					 #derefQuery(#and(determiner.other(NOUN, NN), noun(NOUN, NN)), V, PREDICATE)"/>

	<NLPattern name="predicate-is-there-uncountable-prep"
			   head="perf.q.predicate(LISTENER, #and(#cons(PREPOSITION, V, O2), PREDICATE))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], [singular], P, T) ['there'] nounPhrase(X, [uncountable], P, C)
			   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, O2) 
					 #derefQuery(C, V, PREDICATE)"
			   priority="250"/>			   		 
	<NLPattern name="predicate-is-there-uncountable-prep-prep"
			   head="perf.q.predicate(LISTENER, #and(#cons(PREPOSITION, V, O2), #and(#cons(PREPOSITION2, V, O3), PREDICATE)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], [singular], P, T) ['there'] nounPhrase(X, [uncountable], P, C)
			   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2)
			   		 preposition(PREPOSITION2) nounPhrase(X3, [singular], P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, O2) 
			   		 #derefFromContext(C3, O3) 
					 #derefQuery(C, V, PREDICATE)"
			   priority="300"/>			   		 
	<NLPattern name="predicate-is-there-uncountable"
			   head="perf.q.predicate(LISTENER, PREDICATE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], [singular], P, T) ['there'] nounPhrase(X, [uncountable], P, C)  
			   		 ('!'|'?')*
					 #derefQuery(C, V, PREDICATE)"
			   priority="200"/>
	<NLPattern name="predicate-is-there-prep"
			   head="perf.q.predicate(LISTENER, #and(PREDICATE, #cons(PREPOSITION, V, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, TV) ['there'] nounPhrase(X, N, P, C)
			   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2)  ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)
					 #derefQuery(C, V, PREDICATE)"
			   priority="200"/>

	<NLPattern name="predicate-is-there-gerund-verb"
			   head="perf.q.predicate(LISTENER, #and(PREDICATE, #cons(VERB, V, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, TV) ['there'] nounPhrase(X, N, P, C)
			   		 verb(VERB, NV2, PV2, [gerund-tense]) nounPhrase(X2, [singular], P2, C2)  ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)
					 #derefQuery(C, V, PREDICATE)"/>

	<NLPattern name="predicate-is-there-passive-verb"
			   head="perf.q.predicate(LISTENER, #and(PREDICATE, #cons(VERB, OBJECT, V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, TV) ['there'] nounPhrase(X, N, P, C)
			   		 verb(VERB, NV2, PV2, [participle-tense]) 'by' nounPhrase(X2, [singular], P2, C2)  ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)
					 #derefQuery(C, V, PREDICATE)"/>

	<NLPattern name="predicate-is-there-adverb"
			   head="perf.q.predicate(LISTENER, PREDICATE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, [present-tense]) ['there'] nounPhrase(X, N, P, C)
			   		 adverb(ADVERB) ('!'|'?')*
					 #derefQuery(#and(C, adverb(ADVERB)), V, PREDICATE)"/>
	<NLPattern name="predicate-is-there-adverb-past"
			   head="perf.q.predicate(LISTENER, PREDICATE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, [past-tense]) ['there'] 
			   		 [adverb('time.ever'[time.ever])] 
			   		 nounPhrase(X, N, P, C)
			   		 adverb(ADVERB) ('!'|'?')*
					 #derefQuery(#and(adverb('time.past'[time.past]), #and(C, adverb(ADVERB))), V, PREDICATE)"/>
	<NLPattern name="predicate-is-there-adverb-timeadverb"
			   head="perf.q.predicate(LISTENER, PREDICATE)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, [past-tense]) ['there'] nounPhrase(X, N, P, C)
			   		 adverb(ADVERB) 
			   		 adverb(ADVERB2:[time.past])
			   		 ('!'|'?')*
					 #derefQuery(#and(adverb(ADVERB2), #and(C, adverb(ADVERB))), V, PREDICATE)"/>
	<NLPattern name="predicate-is-there-prep-adverb"
			   head="perf.q.predicate(LISTENER, #and(PREDICATE, #cons(PREPOSITION, V, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, TV) ['there'] nounPhrase(X, N, P, C)
			   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2)
			   		 adverb(ADVERB) ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)
					 #derefQuery(#and(C, adverb(ADVERB)), V, PREDICATE)"
			   priority="150"/>		   		 

	<NLPattern name="predicate-is-there-another-noun-in"
			   head="perf.q.predicate(LISTENER, #and(#cons(NOUN, V), #and(space.at(V, LOCATION), !=(V, REFERENCE_OBJECT))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, T) 'there' ('another'|'any' 'other')
			   		 noun(NOUN, [singular])
			   		 (preposition('space.at'[space.at])|'on')
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(#and(noun(NOUN, [singular]), the(NOUN, [singular])), REFERENCE_OBJECT)
					 #derefFromContext(C2, LOCATION)"
			   priority="200"/>			   		 


	<NLPattern name="query-what-other-noun-is-prep-np"
			   head="perf.q.query(LISTENER, Q, #and(#cons(NOUN, Q), #and(#cons(PREPOSITION, Q, LOCATION), !=(Q, REFERENCE_OBJECT))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') 'other'
			   		 noun(NOUN, NN)
			   		 verb('verb.be'[symbol], NV, P, [present-tense]) ['there']
			   		 preposition(PREPOSITION)
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(#and(noun(NOUN, [singular]), the(NOUN, [singular])), REFERENCE_OBJECT)
					 #derefFromContext(C2, LOCATION)"/>	   		 
	<NLPattern name="query-what-other-noun-was-prep-np"
			   head="perf.q.query(LISTENER, Q, #and(#cons(NOUN, Q), #and(PRED:#cons(PREPOSITION, Q, LOCATION), #and(!=(Q, REFERENCE_OBJECT), time.past(PRED)))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') 'other'
			   		 noun(NOUN, NN)
			   		 verb('verb.be'[symbol], NV, P, [past-tense]) ['there']
			   		 preposition(PREPOSITION)
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(#and(noun(NOUN, [singular]), the(NOUN, [singular])), REFERENCE_OBJECT)
					 #derefFromContext(C2, LOCATION)"/>	  
	<NLPattern name="query-what-other-noun-was-here"
			   head="perf.q.query(LISTENER, Q, #and(#cons(NOUN, Q), #and(PRED:space.at(Q, LOCATION), #and(!=(Q, REFERENCE_OBJECT), time.past(PRED)))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') 'other'
			   		 noun(NOUN, NN)
			   		 verb('verb.be'[symbol], NV, P, [past-tense]) ['there']
			   		 ['in'] 'here'
			   		 ('!'|'?')*
			   		 #derefFromContext(#and(noun(NOUN, [singular]), the(NOUN, [singular])), REFERENCE_OBJECT)
					 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>

	<NLPattern name="q.predicate-be-there-obj-prep-obj-prep-obj"
		       head="perf.q.predicate(LISTENER, #and(PREDICATE, #and(#cons(PREPOSITION1, V, OBJECT),#cons(PREPOSITION2, V, OBJECT2))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, TV) ['there']
			   		 nounPhrase(X, N, P, C)
			   		 preposition(PREPOSITION1) nounPhrase(X2, [singular], P2, C2)
			   		 preposition(PREPOSITION2) nounPhrase(X3, [singular], P3, C3) ('!'|'?')*
			   		 #derefQuery(C, V, PREDICATE)
			   		 #derefFromContext(C2, OBJECT)
			   		 #derefFromContext(C3, OBJECT2)"
			   priority="200"/>
	<NLPattern name="q.predicate-be-there-no-query-!=-obj"
		       head="perf.q.predicate(LISTENER, #and(PREDICATE, !=(V, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, TV) ['there'] 'no' nounPhrase(X, N, P, C)
			   		 preposition('!='[!=]) nounPhrase(X2, [singular], P2, C2)  ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)
					 #derefQuery(C, V, PREDICATE)"
			   />
	<NLPattern name="q.predicate-there-be-no-query-!=-obj"
		       head="perf.q.predicate(LISTENER, #and(PREDICATE, !=(V, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'there' verb('verb.be'[symbol], NV, P, TV) 'no' nounPhrase(X, N, P, C)
			   		 preposition('!='[!=]) nounPhrase(X2, [singular], P2, C2) '?' ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)
					 #derefQuery(C, V, PREDICATE)"
			   />
	<NLPattern name="q.predicate-haveable-property-with-value"
			   head="perf.q.predicate(LISTENER, #cons(X3:[haveable-property-with-value], OBJECT, OBJECT2))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         verb('verb.do'[symbol], N, P, T)
    		         nounPhrase(X, N, P, C)
    		         'have'
    		         preposition(X3) 
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OBJECT2)"/>  

	<NLPattern name="q.predicate-haveable-property-with-verb-value"
			   head="perf.q.predicate(LISTENER, #cons(X3:[haveable-property-with-value], OBJECT, #cons(VERB:[symbol], OBJECT, OBJECT2)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         verb('verb.do'[symbol], N, P, T)
    		         nounPhrase(X, N, P, C)
    		         'have'
    		         preposition(X3) 
    		         verb(VERB, VN, VP, [infinitive-tense])
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)
			   		 #derefFromContext(C2, OBJECT2)"/>  

	<NLPattern name="predicate-is-there-event"
			   head="perf.q.predicate(LISTENER, #cons(ADJ, VARIABLE))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], NV, P, T) 'there' ('something'|'anything')
			   		 adjective(ADJ) [('happening'|'going' 'on')]
			   		 ('!'|'?')*"/>	

    <NLPattern name="q.predicate-is-preposition-noun"
    		   head="perf.q.predicate(LISTENER, #and(object(X), #and(#cons(NOUN, Y), #cons(PREPOSITION, X, Y))))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'there'
			   		 ('something'|'anything')
			   		 preposition(PREPOSITION)
			   		 (indefinite-article('a'[symbol], [singular]) | 
			   		  indefinite-article('some'[symbol], [plural]) | 
			   		  indefinite-article('article.any'[symbol], [plural]))
			   		 noun(NOUN, [singular])
			   		 ('!'|'?')*"/>
    <NLPattern name="q.predicate-is-preposition-adjective-noun"
    		   head="perf.q.predicate(LISTENER, #and(object(X), #and(#cons(NOUN, Y), #and(#cons(ADJ, Y), #cons(PREPOSITION, X, Y)))))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'there'
			   		 ('something'|'anything')
			   		 preposition(PREPOSITION)
			   		 (indefinite-article('a'[symbol], [singular]) | 
			   		  indefinite-article('some'[symbol], [plural]) | 
			   		  indefinite-article('article.any'[symbol], [plural]))
			   		 adjective(ADJ)
			   		 noun(NOUN, [singular])
			   		 ('!'|'?')*"/>
    <NLPattern name="q.predicate-is-preposition-adjective-with-value-noun"
    		   head="perf.q.predicate(LISTENER, #and(object(X), #and(#cons(NOUN, Y), #and(#cons(ADJ_PARENT:[property-with-value], Y, ADJ), #cons(PREPOSITION, X, Y)))))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'there'
			   		 ('something'|'anything')
			   		 preposition(PREPOSITION)
			   		 (indefinite-article('a'[symbol], [singular]) | 
			   		  indefinite-article('some'[symbol], [plural]) | 
			   		  indefinite-article('article.any'[symbol], [plural]))
			   		 adjective(ADJ) #sortParent(ADJ, ADJ_PARENT)			   		 
			   		 noun(NOUN, [singular])
			   		 ('!'|'?')*"
			   priority="150"/>			   		 		   		 

	<!-- e.g.: "can I go to the kitchen?" -->
	<NLPattern name="q.predicate-can"
			   head="perf.q.predicate(LISTENER, verb.can(SUBJECT, #cons(VERB, SUBJECT, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, T) nounPhrase(X, N, P, C) verb(VERB, N2, P2, [infinitive-tense]) 
			   		 nounPhrase(X3, N3, P3, C3) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C3, OBJECT)"/>
	<NLPattern name="q.predicate-can-propernoun"
			   head="perf.q.predicate(LISTENER, verb.can(SUBJECT, #cons(VERB, SUBJECT, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, T) nounPhrase(X, N, P, C) verb(VERB, N2, P2, [infinitive-tense]) 
			   		 properNounCompound(X3, N3) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(proper-noun(X3, N3), OBJECT)"
			   priority="200"/>

	<NLPattern name="q.predicate-can-X-verb-a-noun-with-Y"
			   head="perf.q.predicate(LISTENER, verb.can(SUBJECT, #cons(VERB, SUBJECT, NOUN, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, [infinitive-tense]) 
			   	     (['some'] noun(NOUN, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular])) 
			   		 'with' nounPhrase(X4, N4, P4, C4) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)"/>

	<NLPattern name="q.action-can-take-propernoun"
			   head="perf.q.action(LISTENER, action.take(SPEAKER, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 verb('action.take'[symbol], N2, P2, [infinitive-tense]) 
			   		 properNounCompound(X3, N3) 
			   		 ['with' 'me']
			   		 ('!'|'?')*
					 #derefFromContext(C, SPEAKER)
			   		 #derefFromContext(proper-noun(X3, N3), OBJECT)"
			   priority="250"/>

	<NLPattern name="q.predicate-can-take-with-me"
			   head="perf.q.predicate(LISTENER, verb.can(SPEAKER, action.take(SPEAKER, OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, T) nounPhrase(X, N, P, C) 
			   		 verb('action.take'[symbol], N2, P2, [infinitive-tense]) 
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 'with'
			   		 nounPhrase(X4, N4, P4, C4) 
			   		 ('!'|'?')*
					 #derefFromContext(C, SPEAKER)
			   		 #derefFromContext(C3, OBJECT)
			   		 #derefFromContext(C4, SPEAKER)"/>

	<!-- e.g.: "Do I have the white key?" -->
	<NLPattern name="q.predicate-do-np-have-np"
			   head="perf.q.predicate(LISTENER, #cons(VERB:'verb.have'[symbol], SUBJECT, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, T) 
			   		 (nounPhrase(X2, [singular], P2, C2)|nounPhrase(X2, [uncountable], P2, C2)) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"
		   	   priority="200"/>
	<NLPattern name="q.predicate-do-np-have-query"
			   head="perf.q.predicate(LISTENER, #and(#cons(VERB:'verb.have'[symbol], SUBJECT, QUERY_V), QUERY_EXP))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, T) 
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefQuery(C3, QUERY_V, QUERY_EXP)"
			   priority="200"/>

	<NLPattern name="q.predicate-do-np-have-material"
			   head="perf.q.predicate(LISTENER, #cons(VERB:'verb.have'[symbol], SUBJECT, MATERIAL:[material]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, T) 
			   		 noun(NOUN, N3) #symbolToSort(NOUN, MATERIAL)
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)"
			   priority="250"/>

	<NLPattern name="q.predicate-do-np-need-material"
			   head="perf.q.predicate(LISTENER, #cons(VERB:'verb.need'[symbol], SUBJECT, MATERIAL:[material]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, T) 
			   		 noun(NOUN, N3) #symbolToSort(NOUN, MATERIAL)
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)"
			   priority="250"/>

	<NLPattern name="q.predicate-do-obj-verb-obj-past"
			   head="perf.q.predicate(LISTENER, #and(PRED:#cons(VERB, SUBJECT, OBJECT), time.past(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [past-tense]) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, T) 
			   		 (nounPhrase(X2, [singular], P2, C2)|nounPhrase(X2, [uncountable], P2, C2)) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>

	<NLPattern name="predicate-do-np-need-noun"
			   head="perf.q.predicate(LISTENER, verb.need(SUBJECT, NOUN_SORT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb('verb.need'[symbol], N2, P2, T) 
			   		 (noun(NOUN, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular]))
			   		 #symbolToSort(NOUN, NOUN_SORT)
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)"/>

	<NLPattern name="predicate-do-np-need-to-verb"
			   head="perf.q.predicate(LISTENER, verb.need(SUBJECT, #cons(VERB, SUBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb('verb.need'[symbol], N2, P2, [infinitive-tense]) 
			   		 'to'
			   		 verb(VERB, N3, P4, [infinitive-tense]) 
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)"/>

	<!-- predicates involving actions with time constraints -->
	<NLPattern name="q.predicate-be-obj-verb"
			   head="perf.q.predicate(LISTENER, #cons(VERB, SUBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) verb(VERB, N2, P2, [gerund-tense]) 
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-be-obj-verb-past"
			   head="perf.q.predicate(LISTENER, #and(PRED:#cons(VERB, SUBJECT), time.past(PRED)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [past-tense]) nounPhrase(X, N, P, C) verb(VERB, N2, P2, [infinitive-tense]) 
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-do-obj-verb-time"
			   head="perf.q.predicate(LISTENER, #and(ACTION:#cons(VERB, SUBJECT), #cons(TIMEADVERB:[time.past], ACTION)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [past-tense]) nounPhrase(X, N, P, C) verb(VERB, N2, P2, [infinitive-tense]) 
			   		 adverb(TIMEADVERB)
			   		 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)"/>

	<NLPattern name="q.predicate-only-x"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #cons(NOUN, QUERY_V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 'the' 'only' 
			   		 noun(NOUN, N2) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-only-x-prep-y"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(#cons(PREP, QUERY_V, OBJECT), #cons(NOUN, QUERY_V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 'the' 'only' 
			   		 noun(NOUN, N2) preposition(PREP) 
			   		 nounPhrase(X3, N3, P3, C3)  ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C3, OBJECT)"/>
	<NLPattern name="q.predicate-only-x-adj"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(#cons(NOUN, QUERY_V), #cons(ADJ, QUERY_V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 'the' ('only'|'last') 
			   		 noun(NOUN, N2) adjective(ADJ) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-only-x-location"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(#cons(NOUN, QUERY_V), space.at(QUERY_V, LOCATION))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 'the' ('only'|'last') 
			   		 noun(NOUN, N2) 
			   		 noun(L3:[space.location], N3) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(noun(L3, N3), LOCATION)"/>

	<NLPattern name="q.predicate-only-x2"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #cons(NOUN, QUERY_V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.do'[symbol], N0, P0, T0) ('it'|'this'|'that') verb('verb.mean'[symbol], N00, P00, T00)
			   		 nounPhrase(X, N, P, C)  verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' 'only' 
			   		 noun(NOUN, N2) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-only-x-prep-y2"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(#cons(PREP, QUERY_V, OBJECT), #cons(NOUN, QUERY_V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.do'[symbol], N0, P0, T0) ('it'|'this'|'that') verb('verb.mean'[symbol], N00, P00, T00)
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' 'only' 
			   		 noun(NOUN, N2) preposition(PREP) 
			   		 nounPhrase(X3, N3, P3, C3)  ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C3, OBJECT)"/>
	<NLPattern name="q.predicate-only-x-adj2"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(#cons(NOUN, QUERY_V), #cons(ADJ, QUERY_V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.do'[symbol], N0, P0, T0) ('it'|'this'|'that') verb('verb.mean'[symbol], N00, P00, T00)
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' ('only'|'last') 
			   		 noun(NOUN, N2) adjective(ADJ) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-only-x-location2"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(#cons(NOUN, QUERY_V), space.at(QUERY_V, LOCATION))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.do'[symbol], N0, P0, T0) ('it'|'this'|'that') verb('verb.mean'[symbol], N00, P00, T00)
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' ('only'|'last') 
			   		 noun(NOUN, N2) 
			   		 noun(L3:[space.location], N3) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(noun(L3, N3), LOCATION)"/>


 	<!-- special case for asking about the "last human", which implies, "last human alive" -->
	<NLPattern name="q.predicate-last-human"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(human(QUERY_V), alive(QUERY_V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 'the' 'last'
			   		 noun('human'[human], N2) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>
	<NLPattern name="q.predicate-last-human-here"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(human(QUERY_V), #and(alive(QUERY_V), space.at(QUERY_V, LOCATION)))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 'the' 'last'
			   		 noun('human'[human], N2)
			   		 noun(L3:[space.location], N3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(noun(L3, N3), LOCATION)"
			   priority="200"/>
	<NLPattern name="q.predicate-last-human2"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(human(QUERY_V), alive(QUERY_V))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.do'[symbol], N0, P0, T0) ('it'|'this'|'that') verb('verb.mean'[symbol], N00, P00, T00)
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense])
			   		 'the' 'last'
			   		 noun('human'[human], N2) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>
	<NLPattern name="q.predicate-last-human-here2"
			   head="perf.q.predicate-negated(LISTENER, #and(!=(QUERY_V, SUBJECT), #and(human(QUERY_V), #and(alive(QUERY_V), space.at(QUERY_V, LOCATION)))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 verb('verb.do'[symbol], N0, P0, T0) ('it'|'this'|'that') verb('verb.mean'[symbol], N00, P00, T00)
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense])
			   		 'the' 'last'
			   		 noun('human'[human], N2)
			   		 noun(L3:[space.location], N3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(noun(L3, N3), LOCATION)"
			   priority="200"/>
	<NLPattern name="q.predicate-any-X-LOC"
			   head="perf.q.predicate(LISTENER, #and(space.at(QUERY_VARIABLE, LOCATION), CONSTRAINT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) 
			   		 (preposition('space.at'[space.at]) nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LOCATION) | 
			   		  adverb(X3:[space.location]) #derefFromContext(noun(X3,[singular]), LOCATION))
			   		 ('!'|'?')*
			   		 #derefQuery(C, QUERY_VARIABLE, CONSTRAINT)"
			   priority="200"/>
	<NLPattern name="q.predicate-any-X-LOC-other-than"
			   head="perf.q.predicate(LISTENER, #and(space.at(QUERY_VARIABLE, LOCATION), #and(!=(QUERY_VARIABLE, EXCEPTION), CONSTRAINT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) 
			   		 preposition('!='[!=]) nounPhrase(X3, N3, P3, C3)
			   		 (preposition('space.at'[space.at]) nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LOCATION) | 
			   		  adverb(X4:[space.location]) #derefFromContext(noun(X4,[singular]), LOCATION))
			   		 ('!'|'?')*
			   		 #derefQuery(C, QUERY_VARIABLE, CONSTRAINT)
			   		 #derefFromContext(C3, EXCEPTION)"
			   priority="250"/>
	<NLPattern name="q.predicate-any-X-LOC-other-than2"
			   head="perf.q.predicate(LISTENER, #and(space.at(QUERY_VARIABLE, LOCATION), #and(!=(QUERY_VARIABLE, EXCEPTION), CONSTRAINT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C) 
			   		 (preposition('space.at'[space.at]) nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, LOCATION) | 
			   		  adverb(X4:[space.location]) #derefFromContext(noun(X4,[singular]), LOCATION))
			   		 preposition('!='[!=]) nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
			   		 #derefQuery(C, QUERY_VARIABLE, CONSTRAINT)
			   		 #derefFromContext(C3, EXCEPTION)"
			   priority="250"/>
	<NLPattern name="q.predicate-someone-with-X"
			   head="perf.q.predicate(LISTENER, #and(character(QV), #and(!=(QV,OBJECT), #and(space.at(OBJECT, L), space.at(QV, L)))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) ['there'] 
			   		 (indefinite-pronoun('pronoun.anyone'[symbol], N2, G2, P) | 
			   		  indefinite-pronoun('pronoun.someone'[symbol], N2, G2, P)) ['there']
			   		 'with'
			   		 nounPhrase(X3, N3, P3, C3) ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT)"/>
	<NLPattern name="q.predicate-is-this-location"
			   head="perf.q.predicate(LISTENER, space.at(SPEAKER, LOCATION))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'this'
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'?')*
			   		 #derefFromContext(#and(adjective(X2, 'space.location'[space.location]), C2), LOCATION)"/>

	<NLPattern name="q.predicate-speak-language"
			   head="perf.q.predicate(LISTENER, verb.speak(SUBJECT, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 (verb('verb.do'[symbol], N, P, [present-tense]) | verb('verb.can'[symbol], N, P, [present-tense]))
			   		 nounPhrase(X2, N2, P2, C2)
			   		 verb('verb.speak'[symbol], N3, P3, [infinitive-tense]) 
			   		 nounPhrase(X4, N4, P4, C4) ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)"/>

	<NLPattern name="q.predicate-no-other"
			   head="perf.q.predicate(LISTENER, QUERY)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 ('no'|'any') 'other' noun(X, N) ('!'|'?')*
			   		 #derefQuery(#and(noun(X, N), determiner.other(X,N)), QUERY_V, QUERY)"/>
	<NLPattern name="q.predicate-no-other-prep"
			   head="perf.q.predicate(LISTENER, #and(#cons(PREP, QUERY_V, OBJECT), QUERY))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 ('no'|'any') 'other' noun(X, N) 
			   		 preposition(PREP)
			   		 nounPhrase(X4, N4, P4, C4)
			   		 ('!'|'?')*
			   		 #derefQuery(#and(noun(X, N), determiner.other(X,N)), QUERY_V, QUERY)
			   		 #derefFromContext(C4, OBJECT)"/>
	<NLPattern name="q.predicate-no-other-location"
			   head="perf.q.predicate(LISTENER, #and(space.at(QUERY_V, LOCATION), QUERY))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'so') [',']]
			   		 ('no'|'any') 'other' noun(X, N) 
			   		 noun(X2:[space.location], N2)
			   		 ('!'|'?')*
			   		 #derefQuery(#and(noun(X, N), determiner.other(X,N)), QUERY_V, QUERY)
			   		 #derefFromContext(noun(X2, N2), LOCATION)"/>

	<NLPattern name="q.predicate-verb-uncountable-noun"
			   head="perf.q.predicate(LISTENER, #and(#cons(VERB, SUBJECT, QUERY_V), #cons(X3, QUERY_V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 (verb('verb.do'[symbol], N, P, [past-tense]) | verb('verb.have'[symbol], N, P, [present-tense]) )
			   		 nounPhrase(X2, N, P, C) 
			   		 verb(VERB, N2, P2, T2) 
					 ['any'] noun(X3, [uncountable]) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>

	<NLPattern name="q.predicate-verb-uncountable-noun-object"
			   head="perf.q.predicate(LISTENER, #and(#cons(VERB, SUBJECT, QUERY_V, OBJECT), #cons(X3, QUERY_V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 (verb('verb.do'[symbol], N, P, [past-tense]) | verb('verb.have'[symbol], N, P, [present-tense]) )
			   		 nounPhrase(X2, N, P, C) 
			   		 verb(VERB, N2, P2, T2) 
					 ['any'] noun(X3, [uncountable]) 
			   		 preposition(PREP)
			   		 nounPhrase(X4, N4, P4, C4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)"/>

	<NLPattern name="q.predicate-verb-uncountable-noun-we"
			   head="perf.q.predicate(LISTENER, #and(#cons(VERB, SUBJECT_V, QUERY_V), #cons(X3, QUERY_V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 (verb('verb.do'[symbol], N, P, [past-tense]) | verb('verb.have'[symbol], N, P, [present-tense]) )
			   		 'we'
			   		 verb(VERB, N2, P2, T2) 
					 ['any'] noun(X3, [uncountable]) 
			   		 ('!'|'?')*"
			   priority="150"/>

	<NLPattern name="q.predicate-verb-uncountable-noun-object-we"
			   head="perf.q.predicate(LISTENER, #and(#cons(VERB, SUBJECT_V, QUERY_V, OBJECT), #cons(X3, QUERY_V)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 (verb('verb.do'[symbol], N, P, [past-tense]) | verb('verb.have'[symbol], N, P, [present-tense]) )
			   		 'we'
			   		 verb(VERB, N2, P2, T2) 
					 ['any'] noun(X3, [uncountable]) 
			   		 preposition(PREP)
			   		 nounPhrase(X4, N4, P4, C4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C4, OBJECT)"
			   priority="150"/>

	<NLPattern name="q.predicate-can-X-do-Y"
			   head="perf.q.predicate(LISTENER, verb.can(OBJECT, #cons(VERB,OBJECT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, N, P, C) 
			   		 verb(VERB, N2, P2, [infinitive-tense]) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)"
			   priority="200"/>
	<NLPattern name="q.query-what-can-X-do"
			   head="perf.q.query(LISTENER, QUERY_V, verb.can(OBJECT, QUERY_V))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb('verb.do'[symbol], N2, P2, [infinitive-tense]) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)"/>

	<NLPattern name="q.predicate-direction"
			   head="perf.q.predicate(LISTENER, facing-direction(SUBJECT, X3:[cardinal-direction]))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, N, P, C) 
			   		 (verb('verb.face'[symbol], N2, P2, [gerund-tense])|
			   		  verb('verb.look-at'[symbol], N2, P2, [gerund-tense])|
			   		  'looking')
			   		 ['to'] ['the']
			   		 noun(X3, N3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="q.predicate-my-property-with-value"
			   head="perf.q.predicate(LISTENER, #cons(PROPERTY, SPEAKER, VALUE))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 possessive-determiner('determiner.my'[symbol], N2)
			   		 noun(PROPERTY, [singular])
			   		 noun(VALUE, N3)
			   		 ('!'|'?')*"/>

	<NLPattern name="q.predicate-can-np-action-noun"
			   head="perf.q.predicate(LISTENER, verb.can(SUBJECT, #cons(VERB, SUBJECT, HO:'hypothetical-object'[#id])), #cons(NOUN, HO))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 ['some']
			   		 (noun(NOUN, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular]))
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/>

	<NLPattern name="q.predicate-can-noun-action"
			   head="perf.q.predicate(LISTENER, verb.can(HO:'hypothetical-object'[#id], #cons(VERB, HO)), #cons(NOUN, HO))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 (noun(NOUN, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular]))
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 ('!'|'?')*"/>

	<NLPattern name="q.predicate-can-noun-action-np"
			   head="perf.q.predicate(LISTENER, verb.can(HO:'hypothetical-object'[#id], #cons(VERB, HO, OBJECT)), #cons(NOUN, HO))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 (noun(NOUN, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular]))
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)"/>

	<NLPattern name="q.predicate-can-noun-action-noun"
			   head="perf.q.predicate(LISTENER, verb.can(HO1:'hypothetical-object1'[#id], #cons(VERB, HO1, HO2:'hypothetical-object2'[#id])), #and(#cons(NOUN1, HO1), #cons(NOUN2, HO2)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 (noun(NOUN1, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN1, [singular]))
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 (noun(NOUN2, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN2, [singular]))
			   		 ('!'|'?')*"/>

    <!-- "action.print" is special, since you create NEW objects, so the hypothetical-object parse, does not make sense -->
	<NLPattern name="q.predicate-can-print-noun"
			   head="perf.q.predicate(LISTENER, verb.can(SUBJECT, action.print(SUBJECT, NOUN_SORT)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('action.print'[symbol], N3, P3, [infinitive-tense]) 
			   		 (['some'] noun(NOUN, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular])) 
			   		 #symbolToSort(NOUN, NOUN_SORT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"
			   priority="200"/>

	<NLPattern name="q.predicate-can-action-noun-in-location"
			   head="perf.q.predicate(LISTENER, verb.can(SOMEONE:'hypothetical-character'[#id], #cons(VERB, SOMEONE, HO:'hypothetical-object'[#id])), #and(#cons(NOUN, HO), space.at(SOMEONE, LOCATION)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 ['some']
			   		 noun(NOUN, [plural])
			   		 preposition('space.at'[space.at])
			   		 nounPhrase(X5, [singular], P5, C5)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C5, LOCATION)"/>

	<NLPattern name="q.predicate-can-verb-object-in-location"
			   head="perf.q.predicate(LISTENER, verb.can(SOMEONE:'hypothetical-character'[#id], #cons(VERB, SOMEONE, OBJECT)), space.at(SOMEONE, LOCATION))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 nounPhrase(X4, N4, P4, C4)
			   		 preposition('space.at'[space.at])
			   		 nounPhrase(X5, [singular], P5, C5)
 			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)
			   		 #derefFromContext(C5, LOCATION)"/>

	<NLPattern name="q.predicate-can-verb-object-in-here"
			   head="perf.q.predicate(LISTENER, verb.can(SOMEONE:'hypothetical-character'[#id], #cons(VERB, SOMEONE, OBJECT)), space.at(SOMEONE, LOCATION))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 nounPhrase(X4, N4, P4, C4)
					 [preposition('space.at'[space.at])] 'here'
 			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)
    		   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>

	<!-- special cases for understanding that `doing laundry' means `cloean clothes' -->
	<NLPattern name="q.predicate-can-do-laundry"
			   head="perf.q.predicate(LISTENER, verb.can(SUBJECT, verb.clean(SUBJECT, HO:'hypothetical-object'[#id])), clothing(HO))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.do'[symbol], N3, P3, [infinitive-tense]) 
			   		 ['some']
			   		 noun('laundry'[laundry], [singular])
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/>
	<NLPattern name="q.predicate-can-do-laundry-in"
			   head="perf.q.predicate(LISTENER, verb.can(SOMEONE:'hypothetical-character'[#id], verb.clean(SOMEONE, HO:'hypothetical-object'[#id])), #and(clothing(HO), space.at(SOMEONE, LOCATION)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.do'[symbol], N3, P3, [infinitive-tense]) 
			   		 ['some']
			   		 noun('laundry'[laundry], [singular])
			   		 preposition('space.at'[space.at])
			   		 nounPhrase(X4, [singular], P4, C4)
 			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, LOCATION)"/>
	<NLPattern name="q.predicate-can-do-laundry-in-here"
			   head="perf.q.predicate(LISTENER, verb.can(SOMEONE:'hypothetical-character'[#id], verb.clean(SOMEONE, HO:'hypothetical-object'[#id])), #and(clothing(HO), space.at(SOMEONE, LOCATION)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.do'[symbol], N3, P3, [infinitive-tense]) 
			   		 ['some']
			   		 noun('laundry'[laundry], [singular])
			   		 [preposition('space.at'[space.at])] 'here'
 			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>

    <NLPattern name="q.predicate-is-this-a-X"
    		   head="perf.q.predicate(LISTENER, #cons(NOUN, SUBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 demonstrative-determiner(DETERMINER:[symbol], [singular]) 
    		   		 indefinite-article('a'[symbol], [singular])
    		   		 noun(NOUN, NN)
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(#and(#cons(DETERMINER, X:'object'[object], [singular]), noun(X,[singular])), SUBJECT)"/> 

    <NLPattern name="q.predicate-do-i-verb-object"
    		   head="perf.q.predicate(LISTENER, #cons(VERB, SUBJECT, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
					 verb('verb.do'[symbol], ND, PD, [present-tense]) 			   		 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N, P, [present-tense]) #symbolToSort(VERB, VERB_SYMBOL:[relation-verb])
			   		 nounPhrase(X3, N3, P3, C3)
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)
    		   		 #derefFromContext(C3, OBJECT)"/> 
    <NLPattern name="q.predicate-do-i-verb-object-past"
    		   head="perf.q.predicate(LISTENER, #and(V:#cons(VERB, SUBJECT, OBJECT), time.past(V)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
					 verb('verb.do'[symbol], ND, PD, [past-tense]) 			   		 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N, P, [present-tense]) #symbolToSort(VERB, VERB_SYMBOL:[relation-verb])
			   		 nounPhrase(X3, N3, P3, C3)
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)
    		   		 #derefFromContext(C3, OBJECT)"/> 
    <NLPattern name="q.predicate-do-i-verb-object-2"
    		   head="perf.q.predicate(LISTENER, #cons(VERB, SUBJECT, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 'do' 'you' 'know' 'if'
					 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N, P, [present-tense]) #symbolToSort(VERB, VERB_SYMBOL:[relation-verb])
			   		 nounPhrase(X3, N3, P3, C3)
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)
    		   		 #derefFromContext(C3, OBJECT)"/> 

    <NLPattern name="q.predicate-do-obj-verb-noun"
    		   head="perf.q.predicate(LISTENER, #cons(VERB, SUBJECT, X3))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
					 verb('verb.do'[symbol], ND, PD, [present-tense]) 			   		 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N, P, [present-tense]) #symbolToSort(VERB, VERB_SYMBOL:[relation-verb])
			   		 (noun(X3, [plural])|noun(X3, [uncountable]))
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)"/> 
    <NLPattern name="q.predicate-do-i-verb-a-noun-past"
    		   head="perf.q.predicate(LISTENER, #and(V:#cons(VERB, SUBJECT, V2:[#id]), #and(time.past(V), #cons(X3, V2))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
					 verb('verb.do'[symbol], ND, PD, [past-tense]) 			   		 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N, P, [present-tense]) #symbolToSort(VERB, VERB_SORT:[relation-verb])
			   		 indefinite-article(ART:'a'[symbol], N) 
			   		 noun(X3, [singular])
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)"/> 

    <NLPattern name="q.predicate-do-i-verb-something-past"
    		   head="perf.q.predicate(LISTENER, #and(V:#cons(VERB, SUBJECT, OBJECT), time.past(V)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
					 verb('verb.do'[symbol], ND, PD, [past-tense]) 			   		 
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N, P, [present-tense]) #symbolToSort(VERB, VERB_SORT:[relation-verb])
			   		 (indefinite-pronoun('pronoun.something'[symbol], N3, G3, P3) | indefinite-pronoun('pronoun.anything'[symbol], N3, G3, P3))
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)"/> 

    <NLPattern name="q.predicate-do-obj-verb-noun2"
    		   head="perf.q.predicate(LISTENER, #cons(VERB, SUBJECT, X3))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 'do' 'you' 'know' 'if'
					 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N, P, [present-tense]) #symbolToSort(VERB, VERB_SYMBOL:[relation-verb])
			   		 (noun(X3, [plural])|noun(X3, [uncountable]))
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)"/> 

    <NLPattern name="q.predicate-need-help"
    		   head="perf.q.predicate(LISTENER, verb.need(LISTENER, verb.help(SPEAKER, LISTENER)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 'do' 'you'
			   		 verb('verb.need'[symbol], N, P, [present-tense])
			   		 ['my'] 'help' ('!'|'?')*"/> 

    <NLPattern name="q.predicate-is-np-a-adj-noun?"
    		   head="perf.q.predicate(LISTENER, #and(#cons(NOUN, SUBJECT), #cons(ADJECTIVE, SUBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 indefinite-article('a'[symbol], [singular])
			   		 adjective(ADJECTIVE)
			   		 noun(NOUN, [singular])
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/> 

    <NLPattern name="q.predicate-work-in-np"
    		   head="perf.q.predicate(LISTENER, verb.works-at(SUBJECT, LOCATION))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.do'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.works-at'[symbol], N3, P3, [infinitive-tense])
			   		 nounPhrase(X4, [singular], P4, C4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, LOCATION)"/> 

    <NLPattern name="q.predicate-work-in-here"
    		   head="perf.q.predicate(LISTENER, verb.works-at(SUBJECT, LOCATION))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.do'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.work'[symbol], N3, P3, [infinitive-tense])
			   		 [preposition('space.at'[space.at])]
			   		 'here'
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/> 

    <NLPattern name="q.query-work-in-here"
    		   head="perf.q.query(LISTENER, Q, #and(character(Q), verb.works-at(Q, LOCATION)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 'who'
			   		 verb('verb.work'[symbol], N3, P3, [present-tense])
			   		 [preposition('space.at'[space.at])]
			   		 'here'
			   		 ('!'|'?')*
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"
			   priority="150"/> 

    <NLPattern name="q.predicate-is-X-your-haveable-relation"
    		   head="perf.q.predicate(LISTENER, #cons(RELATION:[haveable-relation], LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 'your'
			   		 noun(RELATION, [singular])
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.predicate-is-X-Y's-haveable-relation"
    		   head="perf.q.predicate(LISTENER, #cons(RELATION:[haveable-relation], OBJECT3, OBJECT2))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 nounPhrase(X3, [singular], P3, C3) '\'s'
			   		 noun(RELATION, [singular])
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"/>

    <NLPattern name="q.predicate-does-X-have-any-haveable-relation"
    		   head="perf.q.predicate(LISTENER, #cons(RELATION:[haveable-relation], OBJECT, V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.do'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb('verb.have'[symbol], N3, P3, [infinitive-tense])
			   		 ('any'|'some'|indefinite-article('a'[symbol], [singular]))
			   		 noun(RELATION, N4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)"
			   priority="250"/>

    <NLPattern name="q.predicate-is-propernoun-here"
    		   head="perf.q.predicate(LISTENER, #and(name(X,NAME2), space.at(X, LOCATION)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 properNounCompound(NAME2, N2)
			   		 [(preposition('space.at'[space.at])|'on')] 'here'
			   		 ('!'|'?')*
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"
			   priority="50"/>		   

    <NLPattern name="q.query-who-is-your-haveable-relation"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #cons(RELATION:[haveable-relation], LISTENER, V)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 'who'
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 'your'
			   		 noun(RELATION, [singular])
			   		 ('!'|'?')*"/>

    <NLPattern name="q.predicate-be-X-and-Y-haveable-relation"
    		   head="perf.q.predicate(LISTENER, #cons(RELATION:[haveable-relation], OBJECT2, OBJECT3))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 'and'
			   		 nounPhrase(X3, [singular], P3, C3)
			   		 noun(RELATION, [plural])
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"/>

    <NLPattern name="q.predicate-be-anyone-here-adjective"
    		   head="perf.q.predicate(LISTENER, #and(character(VARIABLE), #and(space.at(VARIABLE, LOCATION), #cons(ADJ, VARIABLE))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 ['there'] ('anyone'|'someone')
			   		 'here'
			   		 adjective(ADJ)
			   		 ('!'|'?')*
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>

    <NLPattern name="q.predicate-be-anyone-here-not-adjective"
    		   head="perf.q.predicate(LISTENER, #and(character(VARIABLE), #and(space.at(VARIABLE, LOCATION), #not(#cons(ADJ, VARIABLE)))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 ['there'] ('anyone'|'someone')
			   		 'here' 'not'
			   		 adjective(ADJ)
			   		 ('!'|'?')*
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>

	<!-- Passive voice question: -->
    <NLPattern name="q.predicate-passive"
    		   head="perf.q.predicate(LISTENER, #cons(VERB, SUBJECT, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, [singular], P2, C2)
			   		 verb(VERB, N3, P3, [participle-tense]) 'by'
			   		 nounPhrase(X4, [singular], P4, C4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT)
			   		 #derefFromContext(C4, SUBJECT)"/> 

	<NLPattern name="q.action-see"
			   head="perf.q.action(LISTENER, verb.see(SUBJECT, OBJECT))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, T) nounPhrase(X, N, P, C) verb('verb.see'[symbol], N, P, T) 
			   		 (nounPhrase(X2, [singular], P2, C2)|nounPhrase(X2, [uncountable], P2, C2)) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="q.action-see2"
			   head="perf.q.action(LISTENER, verb.see(SUBJECT, QUERY_V), QUERY_EXP, [number.1])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, T) nounPhrase(X, N, P, C) verb('verb.see'[symbol], N, P, T) 
			   		 (nounPhrase(X2, [singular], P2, C2)|nounPhrase(X2, [uncountable], P2, C2)) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
			   		 #derefQuery(C2, QUERY_V, QUERY_EXP)"/>			   		 
	<NLPattern name="q.action-see3"
			   head="perf.q.action(LISTENER, verb.see(SUBJECT, QUERY_V:[#id]), #cons(NOUN, QUERY_V), [number.1])"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, T) nounPhrase(X, N, P, C) verb('verb.see'[symbol], N, P, T) 
			   		 (noun(NOUN, [plural]) | noun(NOUN, [uncountable])) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="q.action-see4"
    		   head="perf.q.action(LISTENER, verb.see(LISTENER, QUERY_VARIABLE), QUERY, [number.1])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 verb('verb.can'[symbol], N, [second-person], T)
    		   		 subject-personal-pronoun(X1, N, G, P:[second-person])
    		         verb('verb.see'[symbol], N2, [no-person], [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO) ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 #derefQuery(CO, QUERY_VARIABLE, QUERY)"
    		   priority="200"/>

    <!-- Patterns for performative "perf.q.whereis" (for where are objects or characters)-->
    <NLPattern name="q.whereis-obj"
			   head="perf.q.whereis(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 ('where' verb('verb.be'[symbol], N, P, [present-tense]) | verb('verb.locate'[symbol], N, P, [present-tense]))
			   		 nounPhrase(X, N2, P, C) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="q.whereis-obj2"
			   head="perf.q.whereis(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 'do' 'you' 'know'
			   		 'where' nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="q.whereis-query"
			   head="perf.q.whereis(LISTENER, SUBJECT, LOCATION, QUERY)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 ('where' verb('verb.be'[symbol], N, P, [present-tense]) | verb('verb.locate'[symbol], N, P, [present-tense]))
			   		 nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefQuery(C, SUBJECT, QUERY)"/>
    <NLPattern name="where-is-this"
    		   head="perf.q.whereis(LISTENER, LOCATION, LOCATION2, space.at(SPEAKER, LOCATION))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense]) 'this' ('!'|'?')*"/>

    <NLPattern name="where-can-X-find-context"
    		   head="perf.q.whereis(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'where' ('can'|'do') nounPhrase(X_S, N_S, P_S, C_S)
			   		 (verb('verb.find'[symbol], N_S, P_S, [present-tense]) | verb('verb.get'[symbol], N_S, P_S, [present-tense]))
			   		 nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"
    		   priority="200"/>
    <NLPattern name="where-can-X-find-query"
    		   head="perf.q.whereis(LISTENER, SUBJECT, LOCATION, QUERY)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'where' ('can'|'do') nounPhrase(X_S, N_S, P_S, C_S)
			   		 (verb('verb.find'[symbol], N_S, P_S, [present-tense]) | verb('verb.get'[symbol], N_S, P_S, [present-tense]))
			   		 nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefQuery(C, SUBJECT, QUERY)"
    		   priority="250"/>
    <NLPattern name="where-is-context-in-Y"
    		   head="perf.q.whereis(LISTENER, SUBJECT, LOCATION, space.at(LOCATION, LOCATION_CONSTRAINT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X, N, P, C) 
			   		 preposition('space.at'[space.at])
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)
    		   		 #derefFromContext(C2, LOCATION_CONSTRAINT)"/>
    <NLPattern name="q.whereto-find/get-obj"
			   head="perf.q.whereto(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' ('can'|'do'|'should') nounPhrase(X_S, N_S, P_S, C_S) 'go to'
			   		 (verb('verb.find'[symbol], N_S, P_S, [present-tense]) | verb('verb.get'[symbol], N_S, P_S, [present-tense]))
			   		 nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whereis-find/get-query"
			   head="perf.q.whereto(LISTENER, QUERY_VARIABLE, LOCATION, QUERY)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' ('can'|'do'|'should') nounPhrase(X_S, N_S, P_S, C_S) 'go to'
			   		 (verb('verb.find'[symbol], N_S, P_S, [present-tense]) | verb('verb.get'[symbol], N_S, P_S, [present-tense]))
			   		 nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefQuery(C, QUERY_VARIABLE, QUERY)"
    		   priority="250"/>

    <NLPattern name="need-object-meaning-where"
    		   head="perf.q.whereis(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 nounPhrase(X, N, P, C)
			   		 #derefFromContext(C, SPEAKER)
			   		 verb('verb.need'[symbol], N, P, [present-tense]) nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)"
    		   priority="200"/>

    <NLPattern name="whereis-other-people"
    		   head="perf.q.whereis(LISTENER, QUERY_V, QUERY_L, #and(#cons(NAME, QUERY_V), #and(!=(QUERY_V, LISTENER), !=(QUERY_V, SPEAKER))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('where' verb('verb.be'[symbol], N, P, [present-tense]) | verb('verb.locate'[symbol], N, P, [present-tense]))
			   		 ['the']
			   		 determiner('determiner.other'[symbol], N2)
			   		 noun(NAME, N3) ('!'|'?')*"/>

    <NLPattern name="whereis-someone"
    		   head="perf.q.whereis(LISTENER, QUERY_V, QUERY_L, character(QUERY_V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('where' verb('verb.be'[symbol], N, P, [present-tense]) | verb('verb.locate'[symbol], N, P, [present-tense]) )
			   		 indefinite-pronoun('pronoun.someone'[symbol],[plural],[gender],[third-person])
			   		 ('!'|'?')*"/>

    <NLPattern name="whereis-someone-else"
    		   head="perf.q.whereis(LISTENER, QUERY_V, QUERY_L, #and(character(QUERY_V), #and(!=(QUERY_V, LISTENER), !=(QUERY_V, SPEAKER))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('where' verb('verb.be'[symbol], N, P, [present-tense]) | verb('verb.locate'[symbol], N, P, [present-tense]))
			   		 indefinite-pronoun('pronoun.someone'[symbol],[plural],[gender],[third-person])
			   		 'else'
			   		 ('!'|'?')*"/>

    <NLPattern name="where-did-X-go"
    		   head="perf.q.whereis(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where'
			   		 verb('verb.do'[symbol], N, P, [past-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 verb('verb.go'[symbol], N3, P3, T3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/>


    <NLPattern name="where-is-superlative-object"
    		   head="perf.q.whereis(LISTENER, V, L, #and(#cons(NOUN, V), #cons(SUPERLATIVE, V, OBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' adjective(SUPERLATIVE) #subsumes([superlative-adjective], SUPERLATIVE)
			   		 noun(NOUN, N2) 
			   		 ('to'|'from')
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT)"/>
    <NLPattern name="where-is-superlative-object2"
    		   head="perf.q.whereis(LISTENER, V, L, #and(#cons(NOUN, V), #cons(SUPERLATIVE, V, OBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' noun(NOUN, N2) 
			   		 adjective(SUPERLATIVE) #subsumes([superlative-adjective], SUPERLATIVE) ('to'|'from')
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT)"/>
    <NLPattern name="where-is-nearest"
    		   head="perf.q.whereis(LISTENER, V, L, #and(#cons(NOUN, V), space.nearest-to(V, SPEAKER)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' adjective('space.nearest-to'[space.nearest-to])
			   		 noun(NOUN, N2) ('!'|'?')*"/>
    <NLPattern name="where-is-farthest"
    		   head="perf.q.whereis(LISTENER, V, L, #and(#cons(NOUN, V), space.farthest-from(V, SPEAKER)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' adjective('space.farthest-from'[space.farthest-from])
			   		 noun(NOUN, N2) ('!'|'?')*"/>


    <!-- Special case rule for food / drinks -->
    <NLPattern name="special-case-whereisfood1"
    		   head="perf.q.whereis(LISTENER, SOMEONE:'hypothetical-character'[#id], LOCATION, verb.can(SOMEONE, verb.find(SOMEONE, 'food'[food])))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' ('can'|'do') nounPhrase(X_S, N_S, P_S, C_S)
			   		 (verb('verb.find'[symbol], N_S, P_S, [present-tense]) | verb('verb.get'[symbol], N_S, P_S, [present-tense]))
			   		 [('the'|'some')] noun('food'[food],N) ('!'|'?')*"
    		   priority="300"/>
    <NLPattern name="special-case-whereisfood2"
    		   head="perf.q.whereis(LISTENER, SOMEONE:'hypothetical-character'[#id], verb.can(SOMEONE, verb.find(SOMEONE, 'food'[food])))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('where' verb('verb.be'[symbol], N_S, P_S, [present-tense]) | verb('verb.locate'[symbol], N_S, P_S, [present-tense]))
			   		 ['the'] noun('food'[food],N) ('!'|'?')*"
    		   priority="300"/>


    <!-- Patterns for performative "perf.q.whereis" (for where can things be done) -->
    <NLPattern name="q.whereis-can-pronoun-verb-obj"
			   head="perf.q.whereis(LISTENER, SOMEONE:'hypothetical-character'[#id], LOCATION, verb.can(SOMEONE, #cons(VERB, SOMEONE, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' ('can'|'do') subject-personal-pronoun(X1, N, G, P)
			   		 verb(VERB, N_S, P_S, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
			   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)
    		   		 #derefFromContext(C2, OBJECT)"/>
    <NLPattern name="q.whereis-pronoun-verb-query"
			   head="perf.q.whereis(LISTENER, SOMEONE:'hypothetical-character'[#id], LOCATION, #and(verb.can(SOMEONE, #cons(VERB, SOMEONE, QUERY_VARIABLE:'hypothetical-object'[#id])), QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' ('can'|'do') subject-personal-pronoun(X1, N, G, P)
			   		 verb(VERB, N_S, P_S, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
			   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)
    		   		 #derefQuery(C2, QUERY_VARIABLE, QUERY)"
    		   priority="150"/>
    <NLPattern name="q.whereto-pronoun-verb-obj"
			   head="perf.q.whereto(LISTENER, SOMEONE:'hypothetical-character'[#id], LOCATION, verb.can(SOMEONE, #cons(VERB, SOMEONE, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' ('can'|'do'|'should') subject-personal-pronoun(X1, N, G, P) 'go to'
			   		 verb(VERB, N_S, P_S, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
			   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)
    		   		 #derefFromContext(C2, OBJECT)"/>
    <NLPattern name="q.whereto-pronoun-verb-query"
			   head="perf.q.whereto(LISTENER, SOMEONE:'hypothetical-character'[#id], LOCATION, #and(verb.can(SOMEONE, #cons(VERB, SOMEONE, QUERY_VARIABLE:'hypothetical-object'[#id])), QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' ('can'|'do'|'should') subject-personal-pronoun(X1, N, G, P) 'go to'
			   		 verb(VERB, N_S, P_S, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
			   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)
    		   		 #derefQuery(C2, QUERY_VARIABLE, QUERY)"
    		   priority="150"/>

    <!-- special case for doing laundry -->
    <NLPattern name="q.whereto-clean"
			   head="perf.q.whereis(LISTENER, SOMEONE:'hypothetical-character'[#id], LOCATION, #and(verb.can(SOMEONE, verb.clean(SOMEONE, OBJECT:'hypothetical-object'[#id])), clothing(OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' ('can'|'do') subject-personal-pronoun(X1, N, G, P)
			   		 verb('verb.do'[symbol], N_S, P_S, [present-tense])
			   		 noun('laundry'[laundry], [singular]) ('!'|'?')* 
			   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)"
    		   priority="200"/>

    <NLPattern name="where-is-that-followup"
    		   head="perf.q.whereis(LISTENER, SUBJECT)"
    		   body="['and'] 'where' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 demonstrative-pronoun('far-demonstrative-pronoun'[symbol], N, G, P) ('!'|'?')* 
    		   		 #derefFromContext(object-personal-pronoun('object-personal-pronoun.it'[symbol],N,[gender-neutral],P), SUBJECT)"/> 

    <!-- Patterns for performative "perf.q.whereto", special rules for "where should I go?" or "what should I do?" that queries for goals -->
    <NLPattern name="q.whereto-goal"
			   head="perf.q.whereto(LISTENER, SOMEONE:'hypothetical-character'[#id], LOCATION, #or(verb.can(SOMEONE, GOAL), #not(goal(SPEAKER, GOAL))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'great') [',']]
			   		 'where' ('do'|'should') subject-personal-pronoun(X1, N, G, P) ['go'] ('!'|'?')* 
			   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)"/>
    <NLPattern name="what-should-i-do?"
    		   head="perf.q.query(LISTENER, GOAL, goal(SPEAKER, GOAL))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'great') [',']]
			   		 ['tell' 'me'] 'what' ('do'|'should') subject-personal-pronoun('subject-personal-pronoun.i'[symbol], N, G, P) ['do'] ['now'] ('!'|'?')* 
			   		 #derefFromContext(subject-personal-pronoun('subject-personal-pronoun.i'[symbol], N, G, P), SPEAKER)"
			   priority="250"/>

    <!-- Patterns for performative "perf.q.query" (very specific ones that are not very generic) -->
    <!-- 'how much do I weight?' -->
    <NLPattern name="q.query-weight"
			   head="perf.q.query(LISTENER, V, weight(SUBJECT,V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' 'much' verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) ('weight'|'weigh') ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>
    <!-- 'how heavy am I?' -->
    <NLPattern name="q.query-weight2"
			   head="perf.q.query(LISTENER, V, weight(SUBJECT,V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' 'heavy' verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>
    <!-- how tall am I? -->
    <NLPattern name="q.query-height"
			   head="perf.q.query(LISTENER, V, height(SUBJECT,V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' 'tall' verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>
    <!-- what are you doing? -->
    <NLPattern name="what-are-you-doing"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #cons(V,SUBJECT,QUERY_VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'where') verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb(V, N2, P2, [gerund-tense])
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="what-are-you-doing-adverb"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(ACTION:#cons(V,SUBJECT,QUERY_VARIABLE), #cons(TIMEADVERB:[time], ACTION)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'where') verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb(V, N2, P2, [gerund-tense])
			   		 adverb(TIMEADVERB)
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="tell-me-what-you-are-verb"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #cons(V,SUBJECT,QUERY_VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'tell' 'me' 'what'
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 verb(V, N2, P2, [gerund-tense])
			   		 ('!'|'.')* 
    		   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="tell-me-what-you-are-verb-adverb"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(ACTION:#cons(V,SUBJECT,QUERY_VARIABLE), #cons(TIMEADVERB:[time], ACTION)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'tell' 'me' 'what' 
			   		 nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 verb(V, N2, P2, [gerund-tense])
			   		 adverb(TIMEADVERB)
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <!-- special case for age -->
    <NLPattern name="how-old"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, property.age(SUBJECT, QUERY_VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' 'old' 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X, N, P, C)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>

    <!-- what happened? -->
    <NLPattern name="what-happens-present"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, verb.happen(WHO, QUERY_VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 (verb('verb.happen'[symbol], N, P, [present-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [present-tense])
			   		  verb('verb.happen'[symbol], N, P, [gerund-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [present-tense])
			   		  verb('verb.go'[symbol], N3, P3, [gerund-tense]) 'on') 
			   		 ['to' nounPhrase(X2, N3, P3, C3) #derefFromContext(C3, WHO)]
			   		 ('!'|'?')*"/>
    <NLPattern name="what-is-wrong-with"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, verb.happen(WHO, QUERY_VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.be'[symbol], N2, P2, [present-tense])
			   		 'wrong'
			   		 ['with' nounPhrase(X2, N3, P3, C3) #derefFromContext(C3, WHO)]
			   		 ('!'|'?')*"/>
    <NLPattern name="what-happens-present-adj"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(verb.happen(WHO, QUERY_VARIABLE), #cons(ADJ, QUERY_VARIABLE)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 (verb('verb.happen'[symbol], N, P, [present-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [present-tense])
			   		  verb('verb.happen'[symbol], N, P, [gerund-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [present-tense])
			   		  verb('verb.go'[symbol], N3, P3, [gerund-tense]) 'on') 
			   		 ['to' nounPhrase(X2, N3, P3, C3) #derefFromContext(C3, WHO)]
			   		 'that' verb('verb.be'[symbol], N4, P4, [present-tense]) adjective(ADJ)
			   		 ('!'|'?')*"/>
    <NLPattern name="what-happens-past"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(VH:verb.happen(WHO, QUERY_VARIABLE), time.past(VH)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 (verb('verb.happen'[symbol], N, P, [past-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [past-tense]) verb('verb.happen'[symbol], N, P, [gerund-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [present-tense]) verb('verb.go'[symbol], N3, P3, [gerund-tense]) 'on')
			   		 ['to' nounPhrase(X3, N3, P3, C3) #derefFromContext(C3, WHO)]
			   		 ('!'|'?')*"/>
    <NLPattern name="what-happens-past-q"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(VH:verb.happen(WHO, QUERY_VARIABLE), #and(time.past(VH), WHO_QUERY)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 (verb('verb.happen'[symbol], N, P, [past-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [past-tense]) verb('verb.happen'[symbol], N, P, [gerund-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [present-tense]) verb('verb.go'[symbol], N3, P3, [gerund-tense]) 'on')
			   		 'to' nounPhrase(X3, N3, P3, C3) #derefQuery(C3, WHO, WHO_QUERY)
			   		 ('!'|'?')*"/>
    <NLPattern name="what-happens-past-other"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(VH:verb.happen(WHO, QUERY_VARIABLE), #and(time.past(VH), WHO_QUERY)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 (verb('verb.happen'[symbol], N, P, [past-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [past-tense]) verb('verb.happen'[symbol], N, P, [gerund-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [present-tense]) verb('verb.go'[symbol], N3, P3, [gerund-tense]) 'on')
			   		 'to' ['the'] 'other' noun(X3, N3)
			   		 #derefQuery(#and(noun(X3, N3), determiner.other(X3, N3)), WHO, WHO_QUERY)
			   		 ('!'|'?')*"/>
    <NLPattern name="what-happens-past-others"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(VH:verb.happen(WHO, QUERY_VARIABLE), #and(human(WHO), #and(!=(WHO,SPEAKER), time.past(VH)))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 (verb('verb.happen'[symbol], N, P, [past-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [past-tense]) verb('verb.happen'[symbol], N, P, [gerund-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [present-tense]) verb('verb.go'[symbol], N3, P3, [gerund-tense]) 'on')
			   		 'to' ['the'] 'others'
			   		 ('!'|'?')*"/>
    <NLPattern name="what-happens-past2"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(VH:verb.happen(WHO, QUERY_VARIABLE), time.past(VH)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.do'[symbol], N, P, [past-tense])
			   		 verb('verb.happen'[symbol], N2, P2, [infinitive-tense])
			   		 ['to' nounPhrase(X3, N3, P3, C3) #derefFromContext(C3, WHO)]
			   		 ('!'|'?')*"/>			   		
    <NLPattern name="what-happens-past-adj"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(VH:verb.happen(WHO, QUERY_VARIABLE), #and(#cons(ADJ, QUERY_VARIABLE), time.past(VH))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 (verb('verb.happen'[symbol], N, P, [past-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [past-tense])
			   		  verb('verb.happen'[symbol], N, P, [gerund-tense]) |
			   		  verb('verb.be'[symbol], N2, P2, [past-tense])
			   		  verb('verb.go'[symbol], N3, P3, [gerund-tense]) 'on')
			   		 ['to' nounPhrase(X3, N3, P3, C3) #derefFromContext(C3, WHO)]
			   		 'that' verb('verb.be'[symbol], N4, P4, T4) adjective(ADJ)
			   		 ('!'|'?')*"/>
    <NLPattern name="q.query-happen"
			   head="perf.q.query(LISTENER, QUERY_VARIABLE, verb.happen(WHO, QUERY_VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         verb('verb.do'[symbol], N, P, [past-tense])
    		         ('something'|'anything')
			   		 verb('verb.happen'[symbol], N2, P2, [infinitive-tense])
			   		 ['to' nounPhrase(X3, N3, P3, C3) #derefFromContext(C3, WHO)]
			   		 ('!'|'?')*"/>
    <NLPattern name="whats-up"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, verb.happen(WHO, QUERY_VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ('whats'|'what' verb('verb.be'[symbol], N, [third-person], [present-tense])) 'up' ('!'|'?')*"
			   priority="150"/>

    <!-- Patterns for performative "perf.q.query" -->
    <NLPattern name="q.query-what-verb"
    		   head="perf.q.query(LISTENER, V, #cons(VERB, V))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb(VERB, N, P, [present-tense]) ('!'|'?')* "/>
    <NLPattern name="q.query-who-verb"
    		   head="perf.q.query(LISTENER, V, #and(#cons(VERB, V), character(V)))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb(VERB, N, P, [present-tense]) ('!'|'?')* "/>
    <NLPattern name="q.query-is-query"
    		   head="perf.q.query(LISTENER, V, QUERY)"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 [[('can'|'could'|'would') 'you'] 'tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefQuery(C, V, QUERY)"/>
    <NLPattern name="q.query-is-preposition-noun"
    		   head="perf.q.query(LISTENER, X, #and(object(X), #and(#cons(NOUN, Y), #cons(PREPOSITION, X, Y))))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 preposition(PREPOSITION)
			   		 (indefinite-article('a'[symbol], [singular]) | 
			   		  indefinite-article('some'[symbol], [plural]) | 
			   		  indefinite-article('article.any'[symbol], [plural]))
			   		 noun(NOUN, [singular])
			   		 ('!'|'?')*"/>
    <NLPattern name="q.query-is-preposition-adjective-noun"
    		   head="perf.q.query(LISTENER, X, #and(object(X), #and(#cons(NOUN, Y), #and(#cons(ADJ, Y), #cons(PREPOSITION, X, Y)))))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 preposition(PREPOSITION)
			   		 (indefinite-article('a'[symbol], [singular]) | 
			   		  indefinite-article('some'[symbol], [plural]) | 
			   		  indefinite-article('article.any'[symbol], [plural]))
			   		 adjective(ADJ)
			   		 noun(NOUN, [singular])
			   		 ('!'|'?')*"/>
    <NLPattern name="q.query-is-preposition-adjective-with-value-noun"
    		   head="perf.q.query(LISTENER, X, #and(object(X), #and(#cons(NOUN, Y), #and(#cons(ADJ_PARENT:[property-with-value], Y, ADJ), #cons(PREPOSITION, X, Y)))))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 preposition(PREPOSITION)
			   		 (indefinite-article('a'[symbol], [singular]) | 
			   		  indefinite-article('some'[symbol], [plural]) | 
			   		  indefinite-article('article.any'[symbol], [plural]))
			   		 adjective(ADJ) #sortParent(ADJ, ADJ_PARENT)			   		 
			   		 noun(NOUN, [singular])
			   		 ('!'|'?')*"
			   priority="150"/>
    <NLPattern name="q.query-what-do-obj-verb"
			   head="perf.q.query(LISTENER, V, #cons(V2,QUERY_ARG1,V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.do'[symbol], N, P, [present-tense])
			   		 nounPhrase(X1, N, P, C1)
			   		 verb(V2, N2, [no-person], [infinitive-tense]) 
			   		  ('!'|'?')* 
    		   		 #derefFromContext(C1, QUERY_ARG1)"/>
    <NLPattern name="q.query-tell-me-what-X-verb"
    		   head="perf.q.query(LISTENER, V, #cons(V2,QUERY_ARG1,V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.tell'[symbol], N0, P0, [present-tense]) 'me' 
			   		 ['tell' 'me'] 'what' [verb('verb.do'[symbol], N, P, [present-tense])]
			   		 nounPhrase(X1, N, P, C1)
			   		 verb(V2, N2, [no-person], [infinitive-tense]) 
			   		  ('!'|'?')* 
    		   		 #derefFromContext(C1, QUERY_ARG1)"
    		   priority="150"/>
    <NLPattern name="query-who-verb-np-present"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #cons(VERB, V, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb(VERB, N, P, [present-tense]) [preposition('space.at'[space.at])] nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"
    		   priority="75"/>

    <NLPattern name="query-who-be-in-np-past"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #and(V2:space.at(V, OBJECT), time.past(V2))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [past-tense]) [preposition('space.at'[space.at])] nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="query-who-verb-np-past"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #and(V2:#cons(VERB, V, OBJECT), time.past(V2))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb(VERB, N, P, [past-tense]) [preposition('space.at'[space.at])] nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"
    		   priority="75"/>
    <NLPattern name="query-who-is-np-gerund"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #cons(VERB, OBJECT, V)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, [gerund-tense]) ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>
    <NLPattern name="q.query-who-do-obj-verb"
			   head="perf.q.query(LISTENER, V, #and(character(V), #cons(VERB, OBJECT, V)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, [infinitive-tense]) ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>
    <NLPattern name="q.query-query"
    		   head="perf.q.query(LISTENER, V, #and(character(V), QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 indefinite-article(ART:'a'[symbol], N) 
    		   		 nounPhraseNoDeterminer(X, N, P, C) ('!'|'?')* 
    		   		 #derefQuery(#and(#cons(ART, X, N), C), V, QUERY)"/>

    <NLPattern name="q.query-what-noun-be-there"
    		   head="perf.q.query(LISTENER, V, #cons(NOUN, V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, [plural]) 
			   		 verb('verb.be'[symbol], [plural], P, [present-tense]) 
    		   		 'there'
    		   		 ('!'|'?')*"/>

    <NLPattern name="q.query-what-query-be-there"
    		   head="perf.q.query(LISTENER, V, QUERY)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' nounPhrase(X2, N2, P2, C2) 
			   		 verb('verb.be'[symbol], [plural], P, [present-tense]) 
    		   		 'there'
    		   		 ('!'|'?')*
    		   		 #derefQuery(C2, V, QUERY)"/>

    <NLPattern name="q.query-what-noun-can-X-verb"
    		   head="perf.q.query(LISTENER, V, #and(#cons(NOUN, V), verb.can(OBJECT, #cons(VERB:[symbol], OBJECT, V))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, N) 
			   		 (verb('verb.can'[symbol], N2, P2, T2)|verb('verb.may'[symbol], N2, P2, T2))
			   		 nounPhrase(X3, N3, P3, C3)
    		   		 verb(VERB, N4, P4, [infinitive-tense])
    		   		 ('!'|'?')*
    		   		 #derefFromContext(C3, OBJECT)"/>

    <NLPattern name="query-what-is-np's-prop-with-value"
    		   head="perf.q.query(LISTENER, V, #cons(PROPERTY:[property-with-value], OBJECT, V))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X2, N2, P2, C2)  '\'s'
			   		 noun(PROPERTY,N3) ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="query-what-is-the-prop-with-value-of-X"
    		   head="perf.q.query(LISTENER, V, #cons(PROPERTY:[property-with-value], OBJECT, V))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 [('would'|'could') 'you' 'tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' noun(PROPERTY,N3) 'of'
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="query-the-prop-with-value-of-X"
    		   head="perf.q.query(LISTENER, V, #cons(PROPERTY:[property-with-value], OBJECT, V))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey'|'please') [('!'|',')]]
			   		 'tell' 'me' 'the' noun(PROPERTY,N3) 'of'
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ('!'|'.')* 
    		   		 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.query-who-is-prep-this"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #cons(PREPOSITION, V, LOCATION)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 preposition(PREPOSITION)
    		   		 demonstrative-determiner(DETERMINER:[symbol], [singular]) 
    		   		 ('!'|'?')* 
     		   		 #derefFromContext(#and(#cons(DETERMINER, X:'object'[object], [singular]), noun(X,[singular])), LOCATION)"/>

    <NLPattern name="q.query-who-is-noun-prep-X"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #and(#cons(NOUN2, V), #cons(PREPOSITION, V, LOCATION))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 indefinite-article(ART:'a'[symbol], N) 
    		   		 noun(NOUN2, N2) 
    		   		 preposition(PREPOSITION)
    		   		 nounPhrase(X3, N3, P3, C3) 
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C3, LOCATION)"/>

    <NLPattern name="q.query-who-is-adjective"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #cons(ADJ, V)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 adjective(ADJ) ('!'|'?')*"/>

    <NLPattern name="q.query-property-with-value"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #cons(X2_PARENT:[property-with-value], V, X2)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 indefinite-article(ART:'a'[symbol], N) 
    		   		 noun(X2, [singular]) #sortParent(X2, X2_PARENT) ('!'|'?')* 
    		   		 #derefQuery(#and(#cons(ART, X, N), C), V, QUERY)"/>
    <NLPattern name="q.query-profession"
    		   head="perf.q.query(LISTENER, V, #and(character(V), profession(V, ROLE:[profession])))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 (indefinite-article('a'[symbol], [singular]) | 'the')
    		   		 noun(ROLE, [singular]) ('!'|'?')*"
    		   priority="200"/>
    <NLPattern name="q.query-profession2"
    		   head="perf.q.query(LISTENER, V, profession(SUBJECT, V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' 'purpose' 'of'
    		   		 nounPhrase(X2, N2, P2, C2) 
    		   		 ('!'|'?')*
    		   		 #derefFromContext(#and(noun('character'[character], [singular]), C2), SUBJECT)"/>

    <NLPattern name="q.query-who-be-prep-obj"
			   head="perf.q.query(LISTENER, V, #and(character(V), #cons(PREPOSITION, V, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"/>
    <NLPattern name="who-is-in-other-X"
    		   head="perf.q.query(LISTENER, V, #and(character(V), #and(#cons(PREPOSITION, V, V2), #and(#cons(X2, V2), !=(V2, OBJECT)))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 preposition(PREPOSITION) 
    		   		 ['the'] 'other'
    		   		 noun(X2, N2) ('!'|'?')*
    		   		 #derefFromContext(#and(noun(X2, NN2:[singular]), #cons('the'[symbol], X2, NN2)), OBJECT)"/>
    <NLPattern name="q.query-who-is-adverb"
    		   head="perf.q.query(LISTENER, V, #and(character(V), QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 adverb(ADVERB) ('!'|'?')* 
    		   		 #derefQuery(adverb(ADVERB), V, QUERY)"
    		   priority="150"/>
    <NLPattern name="q.query-who-is-there"
    		   head="perf.q.query(LISTENER, V, character(V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 'there' ('!'|'?')*"
    		   priority = "50"/>
    <NLPattern name="whoelse1"
    		   head="perf.q.query(LISTENER, V, #and(character(V), 
    										   #and(#cons(VERB, V, OBJECT), 
    										   #and(!=(V, SPEAKER), 
    										   	    !=(V, LISTENER)))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' 'else' verb(VERB, N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 [adverb('in-addition'[in-addition])] ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"
    		   priority="150"/>
    <NLPattern name="whoelse2"
    		   head="perf.q.query(LISTENER, V, #and(character(V), 
    										   #and(QUERY,
    										   #and(!=(V, SPEAKER), 
    										   	    !=(V, LISTENER)))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' 'else' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 indefinite-article(ART:'a'[symbol], N) 
    		   		 nounPhraseNoDeterminer(X, N, P, C) 
    		   		 [adverb('in-addition'[in-addition])]
    		   		 ('!'|'?')* 
    		   		 #derefQuery(#and(#cons(ART, X, N), C), V, QUERY)"
    		   priority="150"/>

    <NLPattern name="whoelse3"
    		   head="perf.q.query(LISTENER, V, #and(character(V), 
    										   #and(#cons(PREPOSITION, V, OBJECT),
    										   #and(!=(V, SPEAKER), 
    										   	    !=(V, LISTENER)))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' 'else' verb('verb.be'[symbol], N, P, [present-tense]) ['there']
    		   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) 
    		   		 [adverb('in-addition'[in-addition])]
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"
    		   priority="150"/>
    <NLPattern name="whoelse4"
    		   head="perf.q.query(LISTENER, V, #and(character(V), 
    										   #and(QUERY,
    										   #and(!=(V, SPEAKER), 
    										   	    !=(V, LISTENER)))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' 'else' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 adverb(ADVERB) [adverb('in-addition'[in-addition])] ('!'|'?')* 
    		   		 #derefQuery(adverb(ADVERB), V, QUERY)"
    		   priority="200"/>
    <NLPattern name="q.query-who-else-is-there"
			   head="perf.q.query(LISTENER, V, #and(character(V), 
    										   #and(!=(V, SPEAKER), 
    										   	    !=(V, LISTENER))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' 'else' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 'there' ('!'|'?')*"
    		   priority = "50"/>

    <NLPattern name="q.query-what-be-prep-obj"
			   head="perf.q.query(LISTENER, V, #and(object(V), #cons(PREPOSITION, V, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.query-what-noun-be-prep-obj"
			   head="perf.q.query(LISTENER, V, #and(#cons(NOUN, V), #cons(PREPOSITION, V, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, NN) verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) ('!'|'?')* 
    		   		 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.query-what-be-adverb"
			   head="perf.q.query(LISTENER, V, #and(object(V), QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 adverb(ADVERB) ('!'|'?')* 
    		   		 #derefQuery(adverb(ADVERB), V, QUERY)"/>

    <NLPattern name="q.query-what-noun-be-obj"
			   head="perf.q.query(LISTENER, V, #cons(PROPERTY_SYMBOL, OBJECT, V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' noun(PROPERTY_SYMBOL, [singular]) #symbolToSort(PROPERTY_SYMBOL, PROPERTY:[property-with-value])
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
					 nounPhrase(X, N2, P2, C) ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="q.query-what-be-the-noun-of-obj"
			   head="perf.q.query(LISTENER, V, #cons(PROPERTY_SYMBOL, OBJECT, V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
					 'the' noun(PROPERTY_SYMBOL, [singular]) #symbolToSort(PROPERTY_SYMBOL, PROPERTY:[property-with-value])
					 ('of'|'in'|'on')
			   		 nounPhrase(X, N2, P2, C) ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="q.query-what-be-the-noun-adverb"
			   head="perf.q.query(LISTENER, V, #cons(PROPERTY_SYMBOL, LOCATION, V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
					 'the' noun(PROPERTY_SYMBOL, [singular]) #symbolToSort(PROPERTY_SYMBOL, PROPERTY:[property-with-value])
					 adverb(X4:[space.location]) 
			   		 ('!'|'?')* 
    		   		 #derefFromContext(noun(X4,[singular]), LOCATION)"/>

    <NLPattern name="q.query-temperature-special-case"
    		   head="perf.q.query(LISTENER, V, #cons('temperature'[temperature], LOCATION, V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
					 'the' noun(PROPERTY_SYMBOL, [singular]) #symbolToSort(PROPERTY_SYMBOL, PROPERTY:[property-with-value])
					 ['in' ['here']]
			   		 ('!'|'?')* 
    		   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>

    <NLPattern name="q.query-temperature-special-case2"
    		   head="perf.q.query(LISTENER, V, #cons('temperature'[temperature], LOCATION, V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' ('hot'|'warm'|'cold')
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'it'
					 ('of'|'in')
			   		 nounPhrase(X, N2, P2, C) ('!'|'?')* 
    		   		 #derefFromContext(C, LOCATION)"/>

    <NLPattern name="q.query-temperature-special-case3"
    		   head="perf.q.query(LISTENER, V, #cons('temperature'[temperature], LOCATION, V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' ('hot'|'warm'|'cold')
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'it'
					 [('of'|'in')]
					 adverb(X4:[space.location]) ('!'|'?')* 
    		   		 #derefFromContext(noun(X4,[singular]), LOCATION)"/>

    <NLPattern name="q.query-temperature-special-case4"
    		   head="perf.q.query(LISTENER, V, #cons('temperature'[temperature], LOCATION, V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' ('hot'|'warm'|'cold')
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'it'
					 ['in' ['here']]
			   		 ('!'|'?')* 
    		   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>

    <NLPattern name="q.query-what-be-propernoun's-noun"
			   head="perf.q.query(LISTENER, V, #cons(PROPERTY_SYMBOL, OBJECT, V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 properNounCompound(X2, N2) '\'s'
					 noun(PROPERTY_SYMBOL, [singular]) ('!'|'?')* 
					 #symbolToSort(PROPERTY_SYMBOL, PROPERTY:[property-with-value])
    		   		 #derefFromContext(proper-noun(X2, N2), OBJECT)"
    		   priority="200"/>
    <NLPattern name="q.query-what-be-adj"
			   head="perf.q.query(LISTENER, V, #cons(ADJ, V))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 adjective(ADJ) ('!'|'?')* "/>

	<!-- example: what do you do? --> 
    <NLPattern name="q.query-where-can"
    		   head="perf.q.query(LISTENER, QUERY, verb.can(SUBJECT, #cons(VERB, SUBJECT, QUERY)))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.can'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 verb(VERB, N2, P2, [infinitive-tense]) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.query-where-relation"
    		   head="perf.q.query(LISTENER, QUERY, #cons(RELATION, SUBJECT, QUERY))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 preposition(RELATION) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.query-where-not-relation"
    		   head="perf.q.query(LISTENER, QUERY, #not(#cons(RELATION, SUBJECT, QUERY)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 'not'
			   		 preposition(RELATION) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.query-haveable-property"
    		   head="perf.q.query(LISTENER, QUERY, #cons(PROPERTY:[haveable-property-with-value], SUBJECT, QUERY))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('where'|'what') verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 'have'
			   		 preposition(PROPERTY) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.query-where-haveable-property-verb"
    		   head="perf.q.query(LISTENER, QUERY, #cons(PROPERTY:[haveable-property-with-value], SUBJECT, #cons(VERB:[symbol], SUBJECT, QUERY)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 'have'
			   		 preposition(PROPERTY) 
			   		 verb(VERB, VN, VP, [infinitive-tense]) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.query-where-not-haveable-property"
    		   head="perf.q.query(LISTENER, QUERY, #not(#cons(PROPERTY:[haveable-property-with-value], SUBJECT, QUERY)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.do'[symbol], N, P, [present-tense]) 'not' nounPhrase(X, N, P, C) 'have'
			   		 preposition(PROPERTY) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.query-where-not-haveable-property-verb"
    		   head="perf.q.query(LISTENER, QUERY, #not(#cons(PROPERTY:[haveable-property-with-value], SUBJECT, #cons(VERB:[symbol], SUBJECT, QUERY))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.do'[symbol], N, P, [present-tense]) 'not' nounPhrase(X, N, P, C) 'have'
			   		 preposition(PROPERTY) 
			   		 verb(VERB, VN, VP, [infinitive-tense]) ('!'|'?')* 
    		   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.query-what-noun-be-obj-prep"
			   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(#cons(TYPE, QUERY_VARIABLE), #cons(PREP, OBJECT, QUERY_VARIABLE)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') noun(TYPE, N) 
			   		 verb('verb.be'[symbol], N2, P2, [present-tense]) nounPhrase(X3, N3, P3, C3)
			   		 preposition(PREP)
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C3, OBJECT)"/>

	<NLPattern name="q.query-know"
			   head="perf.q.query(LISTENER, QUERY_V, QUERY)"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N, P, C)
			   		 verb('verb.know'[symbol], N2, P2, [infinitive-tense]) 
			   		 ['tell' 'me'] ['what' 'is']
			   		 nounPhrase(X3, N3, P3, C3)
			   		  ('!'|'?')*
			   		 #derefFromContext(C, LISTENER)
			   		 #derefQuery(C3, QUERY_V, QUERY)"/>

    <NLPattern name="q.query-who-can-verb-obj"
			   head="perf.q.query(LISTENER, V, #and(character(V), verb.can(V, #cons(VERB, V, OBJECT))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['do' 'you' 'know']
			   		 'who' verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 verb(VERB, N2, P2, [infinitive-tense]) 
			   		 nounPhrase(X3, N3, P3, C3)  ('!'|'?')* 
    		   		 #derefFromContext(C3, OBJECT)"/>

    <NLPattern name="q.query-who-can-verb-query"
			   head="perf.q.query(LISTENER, V, #and(character(V), #and(verb.can(V, #cons(VERB, V, QUERY_V)), QUERY)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['do' 'you' 'know']
			   		 'who' verb('verb.can'[symbol], N, P, [present-tense]) 
			   		 verb(VERB, N2, P2, [infinitive-tense]) 
			   		 nounPhrase(X3, N3, P3, C3)  ('!'|'?')* 
    		   		 #derefQuery(C3, QUERY_V, QUERY)"/>

    <NLPattern name="q.query-what-do-X-verb-past"
    		   head="perf.q.query(LISTENER, V, #and(PRED:#cons(V2,QUERY_ARG1,V), time.past(PRED)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.do'[symbol], N, P, [past-tense])
			   		 nounPhrase(X1, N, P, C1)
			   		 verb(V2, N2, [no-person], [infinitive-tense]) 
			   		  ('!'|'?')* 
    		   		 #derefFromContext(C1, QUERY_ARG1)"/>

    <NLPattern name="q.query-what-help-with"
    		   head="perf.q.query(LISTENER, V, verb.can(SUBJECT, verb.help(SUBJECT, LISTENER, V)))"	
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		  verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		  verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X1, N1, P1, C1)
		           	 verb('verb.help'[symbol], N2, P2, T2)
		           	 nounPhrase(X3, N3, P3, C3)
		           	 'with' ('!'|'?')* 
		           	 #derefFromContext(C1, SUBJECT)
		           	 #derefFromContext(C1, TARGET)"/>

	<!-- Passive voice question: -->
    <NLPattern name="q.query-passive"
    		   head="perf.q.query(LISTENER, X, #cons(VERB, SUBJECT, X))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense])
			   		 verb(VERB, N2, P2, [participle-tense]) 'by'
			   		 nounPhrase(X3, [singular], P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, SUBJECT)"/> 

    <NLPattern name="q.query-passive2"
    		   head="perf.q.query(LISTENER, X, #cons(VERB, X, SUBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X3, [singular], P3, C3)
			   		 verb(VERB, N2, P2, [participle-tense]) 'by'
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, SUBJECT)"/> 

    <NLPattern name="q.query-passive-not"
    		   head="perf.q.query(LISTENER, X, #not(#cons(VERB, SUBJECT, X)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense]) 'not'
			   		 verb(VERB, N2, P2, [participle-tense]) 'by'
			   		 nounPhrase(X3, [singular], P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, SUBJECT)"/> 

    <NLPattern name="q.query-noun-passive"
    		   head="perf.q.query(LISTENER, X, #and(#cons(NOUN, X), #cons(VERB, SUBJECT, X)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, NOUN_N) verb('verb.be'[symbol], N, P, [present-tense])
			   		 verb(VERB, N2, P2, [participle-tense]) 'by'
			   		 nounPhrase(X3, [singular], P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, SUBJECT)"/> 

    <NLPattern name="q.query-noun-passive-not"
    		   head="perf.q.query(LISTENER, X, #and(#cons(NOUN, X), #not(#cons(VERB, SUBJECT, X))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, NOUN_N)  verb('verb.be'[symbol], N, P, [present-tense]) 'not'
			   		 verb(VERB, N2, P2, [participle-tense]) 'by'
			   		 nounPhrase(X3, [singular], P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, SUBJECT)"/> 

    <NLPattern name="q.query-noun-adj"
    		   head="perf.q.query(LISTENER, X, #and(#cons(NOUN, X), #cons(ADJ, X)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, NOUN_N) verb('verb.be'[symbol], N, P, [present-tense])
			   		 adjective(ADJ)
			   		 ('!'|'?')*"/> 

    <NLPattern name="q.query-noun-not-adj"
    		   head="perf.q.query(LISTENER, X, #and(#cons(NOUN, X), #not(#cons(ADJ, X))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, NOUN_N) verb('verb.be'[symbol], N, P, [present-tense])
			   		 'not' adjective(ADJ)
			   		 ('!'|'?')*"/> 

	<!-- special cases of forms to say "what is your name?" --> 
    <NLPattern name="q.query-name"
    		   head="perf.q.query(LISTENER, VARIABLE, name(TARGET, VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 [[('would'|'can'|'could') 'you'] 'tell' 'me'] 'how' 'do' ('people'|'they') 'call'
			   		 nounPhrase(X, N, P, C)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, TARGET)"
			   priority="125"/> 
    <NLPattern name="q.query-name2"
    		   head="perf.q.query(LISTENER, VARIABLE, name(TARGET, VARIABLE))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] 
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X, N, P, C) 'called'
			   		 ('!'|'?')*
			   		 #derefFromContext(C, TARGET)"/> 

	<!-- questions where verbs are missing arguments --> 
    <NLPattern name="q.query-verb-missing-argument"
    		   head="perf.q.query(LISTENER, QUERY_V, #and(character(QUERY_V), COMPLETED_VERB))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
 			   		 [ verb('verb.do'[symbol], N, P, T) ['you']
			   		   verb('verb.know'[symbol], N2, P2, T2)
			   		   [('anyone'|'someone')] ]
			   		 'who' [verb('verb.may'[symbol], N3, P3, T3)]
			   		 verb(VERB, N4, P4, [infinitive-tense]) 
			   		  ('!'|'?')* 
    		   		 #completeVerbArgumentsFromContext(#cons(VERB, QUERY_V), COMPLETED_VERB)"/>
    <NLPattern name="q.predicate-verb-missing-argument"
    		   head="perf.q.predicate(LISTENER, COMPLETED_VERB)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.will'[symbol], N, P, T)
			   		 nounPhrase(X2, N2, P2, C2)
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		  ('!'|'?')* 
			   		 #derefFromContext(C2, OBJECT)
    		   		 #completeVerbArgumentsFromContext(#cons(VERB, OBJECT), COMPLETED_VERB)"/>
    <NLPattern name="q.predicate-verb-missing-argument2"
    		   head="perf.q.predicate(LISTENER, COMPLETED_VERB)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.do'[symbol], N, P, T) ['you']
			   		 verb('verb.think'[symbol], N2, P2, T2)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 (verb('verb.will'[symbol], N4, P4, T4) verb(VERB, N5, P5, [infinitive-tense]) |
			   		  verb(VERB, N5, P5, [present-tense]))
			   		  ('!'|'?')* 
			   		 #derefFromContext(C3, OBJECT)
    		   		 #completeVerbArgumentsFromContext(#cons(VERB, OBJECT), COMPLETED_VERB)"/>
    <NLPattern name="q.predicate-verb-missing-argument3"
    		   head="perf.q.predicate(LISTENER, #and(character(QUERY_V), COMPLETED_VERB))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
 			   		 'is' 'there' ('anyone'|'someone')
			   		 'who' 
			   		 ( (verb('verb.may'[symbol], N3, P3, T3) | verb('verb.will'[symbol], N3, P3, T3)) 
			   		   verb(VERB, N4, P4, [infinitive-tense]) |
			   		   verb(VERB, N4, P4, [present-tense]) )
			   		  ('!'|'?')* 
    		   		 #completeVerbArgumentsFromContext(#cons(VERB, QUERY_V), COMPLETED_VERB)"/>
    <NLPattern name="q.how-verb-missing-argument1"
    		   head="perf.q.how(LISTENER, COMPLETED_VERB)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' 
			   		 (verb('verb.may'[symbol], N1, P1, T1) | verb('verb.do'[symbol], N1, P1, T1))
			   		 nounPhrase(X2, N2, P2, C2)
			   		 verb(VERB:[symbol], N3, P3, [infinitive-tense])
			   		 ('!'|'?')* 
			   		 #derefFromContext(C2, SUBJECT)
    		   		 #completeVerbArgumentsFromContext(#cons(VERB, SUBJECT), COMPLETED_VERB)"/>
    		   		 
	<NLPattern name="q.query-know2"
			   head="perf.q.query(LISTENER, WHO, #and(character(WHO), verb.know(WHO, QUERY)))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who'
			   		 ( (verb('verb.may'[symbol], N, P, T) | verb('verb.will'[symbol], N, P, T)) 
			   		   verb('verb.know'[symbol], N2, P2, [infinitive-tense]) |
			   		   verb('verb.know'[symbol], N2, P2, [present-tense]) )
			   		 ['what' 'is']
			   		 nounPhrase(X3, N3, P3, C3)
			   		  ('!'|'?')*
			   		 #derefQuery(C3, QUERY_V, QUERY)"
			   priority="200"/>

    <NLPattern name="q.query-relative-direction"
    		   head="perf.q.query(LISTENER, QUERYV, relative-direction(SPEAKER, DIRECTION_SORT:[cardinal-direction], QUERYV))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'which' ('direction'|'way')
			   		 verb('verb.be'[symbol], N, P, T)
			   		 noun(DIRECTION_SYMBOL, [singular]) #symbolToSort(DIRECTION_SYMBOL, DIRECTION_SORT)
			   		 ('!'|'?')*"
			   priority="150"/>	   

    <NLPattern name="q.query-what-can-X-verb"
    		   head="perf.q.query(LISTENER, QUERYV, verb.can(SUBJECT, #cons(VERB, SUBJECT, QUERYV)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.can'[symbol], N, P, T)
			   		 nounPhrase(X2, N2, P2, C2)
			   		 verb(VERB, N3, P3, [infinitive-tense])
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/>

    <NLPattern name="q.query-what-can-X-verb-with-Y"
    		   head="perf.q.query(LISTENER, QUERYV, verb.can(SUBJECT, #cons(VERB, SUBJECT, QUERYV, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.can'[symbol], N, P, T)
			   		 nounPhrase(X2, N2, P2, C2)
			   		 verb(VERB, N3, P3, [infinitive-tense])
			   		 'with'
			   		 nounPhrase(X4, N4, P4, C4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)"/>

    <NLPattern name="q.query-noun-is-property-with-value"
    		   head="perf.q.query(LISTENER, V, #and(#cons(NOUN, V), #cons(ADJ_PARENT:[property-with-value], V, ADJ)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, NOUN_N)
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
 					 adjective(ADJ) #sortParent(ADJ, ADJ_PARENT)
					 ('!'|'?')*"
			   priority="200"/>

    <NLPattern name="q.query-noun-is-not-property-with-value"
    		   head="perf.q.query(LISTENER, V, #and(#cons(NOUN, V), #not(#cons(ADJ_PARENT:[property-with-value], V, ADJ))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] ('what'|'which') noun(NOUN, NOUN_N)
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'not'
 					 adjective(ADJ) #sortParent(ADJ, ADJ_PARENT)
					 ('!'|'?')*"
			   priority="200"/>

    <NLPattern name="q.query-what-is-x-spatial-prep"
    		   head="perf.q.query(LISTENER, V, #cons(RELATION:[spatial-relation], OBJECT, V))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
 					 preposition(RELATION)
					 ('!'|'?')*
					 #derefFromContext(C2, OBJECT)"/>

	<!-- example: what do you do? --> 
    <NLPattern name="q.query-role"
    		   head="perf.q.query(LISTENER, V, #and(character(V), role(V, ROLE:[role])))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 (indefinite-article('a'[symbol], [singular]) | 'the')
    		   		 noun(ROLE, [singular]) ('!'|'?')*"
    		   priority="150"/>
    <NLPattern name="q.query-role2"
			   head="perf.q.query(LISTENER, QUERY, role(OBJECT, QUERY))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 'do' ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"
    		   		 priority="200"/>
    <NLPattern name="q.query-role3"
			   head="perf.q.query(LISTENER, QUERY, role(OBJECT, LOCATION, QUERY))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' verb('verb.do'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 'do' 
			   		 preposition('space.at'[space.at])
			   		 nounPhrase(X2, [singular], [third-person], C2)
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)
    		   		 #derefFromContext(C2, LOCATION)"
    		   		 priority="200"/>

    <!-- example: where do you come from? --> 
    <NLPattern name="q.query-come-from"
			   head="perf.q.query(LISTENER, QUERY, verb.come-from(OBJECT, QUERY))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N2, P2, C)
			   		 verb('verb.come-from'[symbol], N3, P3, [present-tense]) 
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>
    <NLPattern name="q.query=come-from2"
			   head="perf.q.query(LISTENER, QUERY, verb.come-from(OBJECT, QUERY))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'where' verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N2, P2, C)
			   		 verb('verb.come-from'[symbol], N3, P3, [gerund-tense]) 
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>

	<!-- how long question patterns -->     		   		 
    <NLPattern name="q.query-duration"
			   head="perf.q.query(LISTENER, QUERY, time.duration(#cons(VERB, OBJECT), QUERY))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' 'long' 
			   		 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N2, P2, C)			   		 
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>
    <NLPattern name="q.query-duration2"
			   head="perf.q.query(LISTENER, QUERY, time.duration(goal(OBJECT, #cons(VERB, OBJECT)), QUERY))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'how' 'long' 
			   		 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N2, P2, C)		   		 
			   		 verb('verb.have'[symbol], N3, P3, [infinitive-tense]) 
			   		 'to'
			   		 verb(VERB, N4, P4, [infinitive-tense]) 
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="q.query-how-big"
    		   head="perf.q.query(LISTENER, QUERY, size(OBJECT2, QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'how' 
			   		 'big'
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X, N2, P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT2)"/>
    <NLPattern name="q.query-how-big2"
    		   head="perf.q.query(LISTENER, QUERY, size(OBJECT2, QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 'the' 'size' 'of'
			   		 nounPhrase(X, N2, P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT2)"/>
    <NLPattern name="q.query-how-long"
    		   head="perf.q.query(LISTENER, QUERY, length(OBJECT2, QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'how' 
			   		 'long'
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 nounPhrase(X, N2, P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT2)"/>
    <NLPattern name="q.query-how-long2"
    		   head="perf.q.query(LISTENER, QUERY, length(OBJECT2, QUERY))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 'the' 'length' 'of'
			   		 nounPhrase(X, N2, P2, C2)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT2)"/>

	<!-- what is needed for question patterns -->
    <NLPattern name="q.query-need-for1"
    		   head="perf.q.query(LISTENER, QUERY, verb.need-for(OBJECT, QUERY, #cons(VERB, OBJECT, NOUN_SORT)))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N2, P2, C)
			   		 verb('verb.need'[symbol], N3, P3, [infinitive-tense]) 
			   		 'to'
			   		 verb(VERB, N4, P4, [infinitive-tense]) 
			   		 (['some'] noun(NOUN, [uncountable]) | noun(NOUN, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular])) 
			   		 #symbolToSort(NOUN, NOUN_SORT)
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="q.query-need-for2"
    		   head="perf.q.query(LISTENER, QUERY, verb.need-for(X, QUERY, #cons(VERB, X, NOUN_SORT)))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 verb('verb.need'[symbol], N2, P2, [participle-tense]) 
			   		 'to'
			   		 verb(VERB, N4, P4, [infinitive-tense]) 
			   		 (['some'] noun(NOUN, [uncountable]) | noun(NOUN, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular])) 
			   		 #symbolToSort(NOUN, NOUN_SORT)
			   		 ('!'|'?')*"/>

    <NLPattern name="q.query-need-for-verb-adverb"
    		   head="perf.q.query(LISTENER, QUERY, verb.need-for(OBJECT, QUERY, #cons(VERB, OBJECT, ADVERB_SORT)))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N2, P2, C)		   		 
			   		 verb('verb.need'[symbol], N3, P3, [infinitive-tense]) 
			   		 'to'
			   		 verb(VERB, N4, P4, [infinitive-tense]) 
			   		 adverb(ADVERB) #symbolToSort(ADVERB, ADVERB_SORT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="q.query-noun-need-for-print1"
    		   head="perf.q.query(LISTENER, QUERY, verb.need-for(OBJECT, QUERY, action.print(OBJECT, NOUN2_SORT)))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 noun(NOUN1, NOUN1_N) #symbolToSort(NOUN1, QUERY)
			   		 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N2, P2, C)		   		 
			   		 verb('verb.need'[symbol], N3, P3, [infinitive-tense]) 
			   		 'to'
			   		 verb('action.print'[symbol], N4, P4, [infinitive-tense]) 
			   		 (['some'] noun(NOUN2, [uncountable]) | noun(NOUN2, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN2, [singular])) 
			   		 #symbolToSort(NOUN2, NOUN2_SORT)
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="q.query-noun-need-for-print2"
    		   head="perf.q.query(LISTENER, QUERY, verb.need-for(X, QUERY, action.print(X, NOUN2_SORT)))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ['tell' 'me'] 'what' 
			   		 noun(NOUN1, NOUN1_N) #symbolToSort(NOUN1, QUERY)
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 verb('verb.need'[symbol], N2, P2, [participle-tense]) 
			   		 'to'
			   		 verb('action.print'[symbol], N4, P4, [infinitive-tense]) 
			   		 (['some'] noun(NOUN2, [uncountable]) | noun(NOUN2, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN2, [singular])) 
			   		 #symbolToSort(NOUN2, NOUN2_SORT)
			   		 ('!'|'?')*"/>

    <NLPattern name="q.predicate-need-for-print1"
    		   head="perf.q.predicate(LISTENER, verb.need-for(OBJECT, QUERY, action.print(OBJECT, NOUN2_SORT)))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
					 verb('verb.do'[symbol], N, P, [present-tense]) 
			   		 nounPhrase(X, N2, P2, C)
			   		 verb('verb.need'[symbol], N3, P3, [infinitive-tense]) 
 			   		 noun(NOUN1, NOUN1_N) #symbolToSort(NOUN1, QUERY)
			   		 'to'
			   		 verb('action.print'[symbol], N4, P4, [infinitive-tense]) 
			   		 (['some'] noun(NOUN2, [uncountable]) | noun(NOUN2, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN2, [singular])) 
			   		 #symbolToSort(NOUN2, NOUN2_SORT)
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C, OBJECT)"/>			   		 

    <NLPattern name="q.predicate-need-for-print2"
    		   head="perf.q.predicate(LISTENER, verb.need-for(X, QUERY, action.print(X, NOUN2_SORT)))"			
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 noun(NOUN1, NOUN1_N) #symbolToSort(NOUN1, QUERY)
			   		 verb('verb.need'[symbol], N2, P2, [participle-tense]) 
			   		 'to'
			   		 verb('action.print'[symbol], N4, P4, [infinitive-tense]) 
			   		 (['some'] noun(NOUN2, [uncountable]) | noun(NOUN2, [plural]) | indefinite-article('a'[symbol], [singular]) noun(NOUN2, [singular])) 
			   		 #symbolToSort(NOUN2, NOUN2_SORT)
			   		 ('!'|'?')*"/>


    <!-- Patterns for performative "perf.q.whois.name" and "'perf.q.whois.no'name" -->
    <NLPattern name="q.whois.name-propernoun"
			   head="perf.q.whois.name(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'who' verb('verb.be'[symbol], N, P, T) 
    		   		 properNounCompound(X, N) ('!'|'?')* 
    		   		 #derefFromContext(proper-noun(X, N), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whois.name-propernoun2"
			   head="perf.q.whois.name(LISTENER, V, name(V, NAME))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'who' verb('verb.be'[symbol], N, [third-person], T) 
    		   		 properNounCompound(NAME, N) ('!'|'?')*"
    		   priority="50"/>
    <NLPattern name="q.whois.noname-pronoun"
			   head="perf.q.whois.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'who' (verb('verb.be'[symbol], N, P, [present-tense]) | verb('verb.be'[symbol], N, P, [past-tense])) 
    		   		 personal-pronoun(X, N, G, P) ('!'|'?')* 
    		   		 #derefFromContext(personal-pronoun(X, N, G, P), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whois.noname-the-obj"
			   head="perf.q.whois.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'who' (verb('verb.be'[symbol], N, P, [present-tense]) | verb('verb.be'[symbol], N, P, [past-tense])) 
    		   		 definite-article('the'[symbol], N)
    		   		 nounPhraseNoDeterminer(X, N, P, C) ('!'|'?')* 
    		   		 #derefFromContext(#and(#cons('the'[symbol], X, [plural]), C), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whois.noname-demonstrative-obj"
			   head="perf.q.whois.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'who' (verb('verb.be'[symbol], N, P, [present-tense]) | verb('verb.be'[symbol], N, P, [past-tense])) 
    		   		 demonstrative-determiner(DET, N)
    		   		 nounPhraseNoDeterminer(X, N, P, C) ('!'|'?')* 
    		   		 #derefFromContext(#and(#cons(DET, X, N), C), SUBJECT)"
    		   priority="200"/>

    <NLPattern name="who-is-this/that?"
    		   head="perf.q.whois.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 demonstrative-determiner(DET, N) ('!'|'?')* ('!'|'?')* 
    		   		 #derefFromContext(#and(#cons(DET, X:'character'[character], N), noun(X, [singular])), SUBJECT)"/>
    <NLPattern name="who-is-this?"
    		   head="perf.q.whois.noname(LISTENER, LISTENER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 demonstrative-pronoun(DET:'close-demonstrative-pronoun'[symbol], N, G, P) ('!'|'?')*"/>

    <NLPattern name="who-is-np?"
    		   head="perf.q.whois.noname(LISTENER, OBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'who' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 nounPhrase(X2, N2, P2, C2) ('!'|'?')*
    		   		 #derefFromContext(C2, OBJECT)"/>

    <!-- Patterns for performative "perf.q.whatis.name" and "perf.q.whatis.noname" -->
    <NLPattern name="q.whatis.name-propernoun"
			   head="perf.q.whatis.name(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 properNounCompound(X, N) ('!'|'?')* 
    		   		 #derefFromContext(proper-noun(X, N), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whatis.noname-personal-pronoun"
			   head="perf.q.whatis.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 personal-pronoun(X, N, G, P) ('!'|'?')* 
    		   		 #derefFromContext(personal-pronoun(X, N, G, P), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whatis.noname-the-obj"
			   head="perf.q.whatis.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 definite-article('the'[symbol], N)
    		   		 nounPhraseNoDeterminer(X, N, P, C) ('!'|'?')* 
    		   		 #derefFromContext(#and(#cons('the'[symbol], X, [plural]), C), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whatis.noname-demonstrative"
			   head="perf.q.whatis.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 demonstrative-determiner(DET, N)
    		   		 nounPhraseNoDeterminer(X, N, P, C) 
    		   		 [[','] nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L) #derefFromContext(C_L, LISTENER)]
    		   		 ('!'|'?')* 
    		   		 #derefFromContext(#and(#cons(DET, X, N), C), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whatis.noname-the-obj-prep-obj"
			   head="perf.q.whatis.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 definite-article(ART:'the'[symbol], N)
    		   		 nounPhraseNoDeterminer(X, N, P, C) 
    		   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) 
					 #derefFromContext(C2, O2) ('!'|'?')* 
    		   		 #derefFromContext(#and(#cons(ART, X, N), #and(C,#cons(PREPOSITION, X, O2))), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whatis.noname-demonstrative-prep-obj"
			   head="perf.q.whatis.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 demonstrative-determiner(DET, N)
    		   		 nounPhraseNoDeterminer(X, N, P, C) 
    		   		 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) 
					 #derefFromContext(C2, O2) ('!'|'?')* 
    		   		 #derefFromContext(#and(#cons(DET, X, N), #and(C,#cons(PREPOSITION, X, O2))), SUBJECT)"
    		   priority="200"/>
    <NLPattern name="q.whatis.noname-demonstrative-pronoun"
			   head="perf.q.whatis.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 demonstrative-pronoun('close-demonstrative-pronoun'[symbol], N, G, P) ('!'|'?')* 
    		   		 #derefFromContext(#and(close-demonstrative-determiner(X:'object'[object], N), noun(X,N)), SUBJECT)"/> 
    <NLPattern name="q.whatis.noname-demonstrative-pronoun2"
			   head="perf.q.whatis.noname(LISTENER, SUBJECT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]] ['do' 'you' 'know']
			   		 'what' verb('verb.be'[symbol], N, P, [present-tense]) 
    		   		 demonstrative-pronoun('far-demonstrative-pronoun'[symbol], N, G, P) ('!'|'?')* 
    		   		 #derefFromContext(#and(far-demonstrative-determiner(X:'object'[object], N), noun(X,N)), SUBJECT)"/> 

    <!-- Patterns for performative "perf.q.when" -->
    <NLPattern name="q.when-now-min"
			   head="perf.q.when(LISTENER, [time.now], [time.minute])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'what' 'time' ('is' 'it' | 'are' 'we' 'in') ('!'|'?')*"
			   priority = "200"/>
    <NLPattern name="q.when-now-scale"
			   head="perf.q.when(LISTENER, [time.now], SCALE:[time.unit])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'what' noun(SCALE_C, [singular]) #symbolToSort(SCALE_C,SCALE) ('is' 'it' | 'are' 'we' 'in') ('!'|'?')*"
			   priority = "150"/>
    <NLPattern name="q.when-now-day"
			   head="perf.q.when(LISTENER, [time.now], [time.day])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'what' 'day' 'of' 'the' 'week' ('is' 'it' | 'are' 'we' 'in') ('!'|'?')*"/>
    <NLPattern name="q.when-now-day2"
			   head="perf.q.when(LISTENER, [time.now], [time.day])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'what' 'day' 'is' 'today' ('!'|'?')*"/>
    <NLPattern name="q.when-now-day3"
			   head="perf.q.when(LISTENER, [time.now], [time.day])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'what' 'is' 'the' ['current'] 'date' ('!'|'?')*"
			   priority = "200"/>

	<!-- Patterns for performative "perf.request.action" -->
    <NLPattern name="request.action-single"
    		   head="perf.request.action(LISTENER, ACTION)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey'|'please'|'now') [('!'|',')]]
    		   		 perf.request.action.internal(LISTENER, ACTION)
    		         [[','] 'please'] 
    		         ('!'|'.')*"
    		   priority="125"/>

    <NLPattern name="request.action-single2"
    		   head="perf.request.action(LISTENER, ACTION)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey'|'please'|'now') [('!'|',')]]
    		   		 perf.request.action.internal(LISTENER, ACTION)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'.')*"/>

    <NLPattern name="request.action-single-constraint"
    		   head="perf.request.action(LISTENER, ACTION, CONDITION, CONSTRAINT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey'|'please'|'now') [('!'|',')]]
    		   		 perf.request.action.internal(LISTENER, ACTION, CONDITION, CONSTRAINT)
    		         [[','] 'please'] 
    		         ('!'|'.')*"
    		   priority="125"/>

    <NLPattern name="request.action-single-constraint2"
    		   head="perf.request.action(LISTENER, ACTION, CONDITION, CONSTRAINT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey'|'please'|'now') [('!'|',')]]
    		   		 perf.request.action.internal(LISTENER, ACTION, CONDITION, CONSTRAINT)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'.')*"/>

    <NLPattern name="request.action-double"
    		   head="perf.request.action(LISTENER, #list(ACTION1, ACTION2))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey'|'please'|'now') [('!'|',')]]
    		   		 perf.request.action.internal(LISTENER, ACTION1)
    		   		 'and'
    		   		 perf.request.action.internal(LISTENER, ACTION2)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'.')*"/>


    <!-- Patterns for performative "perf.q.action" -->
    <NLPattern name="q.action-single"
    		   head="perf.q.action(LISTENER, ACTION)"
    		   body="[('please'|'now') [',']] 
    		   		 (verb('verb.will'[symbol], N, P, T) | verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, [second-person])
    		   		 ['please']
    		   		 perf.request.action.internal(LISTENER, ACTION)
    		         [[','] 'please'] 
    		         ('!'|'?')*"
    		   priority="125"/>

    <NLPattern name="q.action-single2"
    		   head="perf.q.action(LISTENER, ACTION)"
    		   body="[('please'|'now') [',']] 
    		   		 (verb('verb.will'[symbol], N, P, T) | verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, [second-person])
    		   		 ['please']
    		   		 perf.request.action.internal(LISTENER, ACTION)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/>

    <NLPattern name="q.action-single-constraint"
    		   head="perf.q.action(LISTENER, ACTION, CONDITION, CONSTRAINT)"
    		   body="[('please'|'now') [',']] 
    		   		 (verb('verb.will'[symbol], N, P, T) | verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, [second-person])
    		   		 ['please']
    		   		 perf.request.action.internal(LISTENER, ACTION, CONDITION, CONSTRAINT)
    		         [[','] 'please'] 
    		         ('!'|'?')*"
    		   priority="125"/>

    <NLPattern name="q.action-single-constraint2"
    		   head="perf.q.action(LISTENER, ACTION, CONDITION, CONSTRAINT)"
    		   body="[('please'|'now') [',']] 
    		   		 (verb('verb.will'[symbol], N, P, T) | verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, [second-person])
    		   		 ['please']
    		   		 perf.request.action.internal(LISTENER, ACTION, CONDITION, CONSTRAINT)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/>

    <NLPattern name="q.action-double"
    		   head="perf.q.action(LISTENER, #list(ACTION1, ACTION2))"
    		   body="[('please'|'now') [',']] 
    		   		 (verb('verb.will'[symbol], N, P, T) | verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, [second-person])
    		   		 ['please']
    		   		 perf.request.action.internal(LISTENER, ACTION1)
    		   		 'and'
    		   		 perf.request.action.internal(LISTENER, ACTION2)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/>

    <!-- Patterns for performative "perf.request.action/perf.q.action", when it's an action.give -->    
    <NLPattern name="q.action-can-give"
    		   head="perf.q.action(LISTENER, action.give(LISTENER,OBJECT_LIST,SPEAKER))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, P)
    		   		 ['please']
    		         'have' 
    		         nounPhraseListFromContext(OBJECT_LIST)
    		         [[','] 'please'] ('!'|'?')*
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)"
    		         priority="200"/>		         
    <NLPattern name="request.give-subjectpronoun"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,OBJECT_LIST,SPEAKER))"
    		   body="verb('action.give'[symbol], N, P, T) object-personal-pronoun(X1, N, G, P)
    		         nounPhraseListFromContext(OBJECT_LIST)
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)"
    		   priority="125"/>
    <NLPattern name="request.give-subjectpronoun2"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,OBJECT_LIST,SPEAKER))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         nounPhraseListFromContext(OBJECT_LIST) 'to' 
    		         object-personal-pronoun(X1, N1, G1, P1) 
    		         #derefFromContext(subject-personal-pronoun(X1, N1, G1, P1), SPEAKER)"/>
    <NLPattern name="request.give-subject-object"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,OBJECT_LIST,TARGET))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         nounPhraseListFromContext(OBJECT_LIST) 'to' 
    		         nounPhrase(X3, N3, P3, CO3) 
    		         #derefFromContext(CO3, TARGET)"/>
    <NLPattern name="request.give-hand-over"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,OBJECT_LIST,SPEAKER))"
    		   body="'hand' 'over'
    		         nounPhraseListFromContext(OBJECT_LIST)"/>
    <NLPattern name="request.action-can-give-query"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,QUERY_VARIABLE,TARGET), QUERY, [number.1])"
    		   body="verb('action.give'[symbol], N, P, T) 
    		         nounPhrase(X2, N2, P2, CO) 
    		   		 'to' nounPhrase(X3, N3, P3, C3) 
    		         #derefFromContext(C3, TARGET)
    		         #derefQuery(CO, QUERY_VARIABLE, QUERY)"/>
    <NLPattern name="request.action-can-give-query2"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,QUERY_VARIABLE,TARGET), QUERY, [number.1])"
    		   body="verb('action.give'[symbol], N, P, T) 
    		         object-personal-pronoun(X3, N3, G3, P3)
    		         nounPhrase(X2, N2, P2, CO)
    		         #derefFromContext(subject-personal-pronoun(X3, N3, G3, P3), TARGET)
    		         #derefQuery(CO, QUERY_VARIABLE, QUERY)"/>    		    		         

    <NLPattern name="request.give-hand-to-X"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,OBJECT_LIST,INDIRECT))"
    		   body="'hand'
    		         nounPhraseListFromContext(OBJECT_LIST) 'to' 
    		         nounPhrase(X3, N3, P3, C3)
    		         #derefFromContext(C3, INDIRECT)"/>

    <NLPattern name="request.give-haveable-property-with-value"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,SUBJECT,#cons(PROPERTY:[haveable-property-with-value], SUBJECT, OBJECT)))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         nounPhrase(X2, N2, P2, CO)
    		         preposition(PROPERTY)
    		         nounPhrase(X3, N3, P3, CO3) 
    		         #derefFromContext(CO, SUBJECT)
    		         #derefFromContext(CO3, OBJECT)"/>
    <NLPattern name="request.give-haveable-property-with-value-verb"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,SUBJECT,#cons(PROPERTY:[haveable-property-with-value], SUBJECT, #cons(VERB:[symbol], SUBJECT))))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         nounPhrase(X2, N2, P2, CO)
    		         preposition(PROPERTY)
    		         verb(VERB, VN, VP, [infinitive-tense])
    		         #derefFromContext(CO, SUBJECT)"/>
    <NLPattern name="request.give-haveable-property-with-value-verb2"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,SUBJECT,#cons(PROPERTY:[haveable-property-with-value], SUBJECT, #cons(VERB:[symbol], SUBJECT, OBJECT))))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         nounPhrase(X2, N2, P2, CO)
    		         preposition(PROPERTY)
    		         verb(VERB, VN, VP, [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO3) 
    		         #derefFromContext(CO, SUBJECT)
    		         #derefFromContext(CO3, OBJECT)"/>
    <NLPattern name="request.give-permission-to-verb1"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,SUBJECT, permission-to(SUBJECT, #cons(VERB:[symbol], SUBJECT))))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         preposition('permission-to'[permission-to])
    		         nounPhrase(X2, N2, P2, CO2)
    		         'to'
    		         verb(VERB, VN, VP, [infinitive-tense]) 
    		         #derefFromContext(CO2, SUBJECT)"/>
    <NLPattern name="request.give-permission-to-verb2"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,SUBJECT, permission-to(SUBJECT, #cons(VERB:[symbol], SUBJECT))))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         preposition('permission-to'[permission-to])
    		         verb(VERB, VN, VP, [infinitive-tense])
    		         'to'
    		         nounPhrase(X2, N2, P2, CO2) 
    		         #derefFromContext(CO2, SUBJECT)"/>
    <NLPattern name="request.give-permission-to-verb1-object"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,SUBJECT, permission-to(SUBJECT, #cons(VERB:[symbol], SUBJECT, OBJECT))))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         preposition('permission-to'[permission-to])
    		         nounPhrase(X2, N2, P2, CO2)
    		         'to'
    		         verb(VERB, VN, VP, [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO3) 
    		         #derefFromContext(CO2, SUBJECT)
    		         #derefFromContext(CO3, OBJECT)"/>
    <NLPattern name="request.give-permission-to-come-with-object"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,SUBJECT, permission-to(SUBJECT, verb.follow(SUBJECT, OBJECT))))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         preposition('permission-to'[permission-to])
    		         nounPhrase(X2, N2, P2, CO2)
    		         'to'
    		         verb('verb.come'[symbol], VN, VP, [infinitive-tense])
    		         'with'
    		         nounPhrase(X3, N3, P3, CO3) 
    		         #derefFromContext(CO2, SUBJECT)
    		         #derefFromContext(CO3, OBJECT)"/>
    <NLPattern name="request.give-permission-to-come-with-object2"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER,SUBJECT, permission-to(SUBJECT, verb.follow(SUBJECT, OBJECT))))"
    		   body="verb('action.give'[symbol], N, P, T)
    		         nounPhrase(X2, N2, P2, CO2)
    		         preposition('permission-to'[permission-to])
    		         verb('verb.come'[symbol], VN, VP, [infinitive-tense])
    		         'with'
    		         nounPhrase(X3, N3, P3, CO3) 
    		         #derefFromContext(CO2, SUBJECT)
    		         #derefFromContext(CO3, OBJECT)"/>

    <NLPattern name="need-permission-to-np"
    		   head="perf.request.action.internal(LISTENER, action.give(LISTENER, SUBJECT, permission-to(SUBJECT, #cons(VERB, SUBJECT, LOCATION))))"
    		   body="nounPhrase(X2, N2, P2, CO2)
    		   		 verb('verb.need'[symbol], N, P, T)
    		         preposition('permission-to'[permission-to])
    		         verb(VERB, N4, P4, T4)
    		         nounPhrase(X3, N3, P3, CO3) 
    		         #derefFromContext(CO2, SUBJECT)
    		         #derefFromContext(CO3, LOCATION)"/>

    <NLPattern name="q.action-define"
    		   head="perf.q.action(LISTENER, verb.define(LISTENER,NOUN))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
    		   		 [
    		   		 	(verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) 
    		   		 	'you' ['please']
    		   		 	verb('verb.tell'[symbol], N2, [second-person], T2)
    		   		 	nounPhrase(X3, N3, P3, C3)
    		   		 	#derefFromContext(C3, SPEAKER)
    		   		 ]
			   		 'what' verb('verb.be'[symbol], [singular], P4, [present-tense]) 
			   		 indefinite-article('a'[symbol], [singular])  noun(NOUN_C, [singular]) #symbolToSort(NOUN_C,NOUN) 
			   		 [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"
			   priority="200"/>
    <NLPattern name="q.action-define2"
    	       head="perf.q.action(LISTENER, verb.define(LISTENER,NOUN))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'what' verb('verb.be'[symbol], [singular], P, [present-tense]) 
			   		 noun(NOUN_C, [uncountable]) #symbolToSort(NOUN_C,NOUN) 
			   		 [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"
			   priority="200"/>
    <NLPattern name="action-3laws"
			   head="perf.request.action.internal(LISTENER, verb.define(LISTENER,NOUN))"
    		   body="verb('verb.enumerate'[symbol], [singular], P, [present-tense]) 
			   		 ['the'] noun(NOUN_C:'three-laws-of-robotics'[three-laws-of-robotics], [plural]) #symbolToSort(NOUN_C,NOUN)"
			   priority="300"/>
    <NLPattern name="action-define-noun"
			   head="perf.request.action.internal(LISTENER, verb.define(LISTENER,NOUN))"
    		   body="verb('verb.define'[symbol], [singular], P, [present-tense]) 
			   		 noun(NOUN_C, N) #symbolToSort(NOUN_C,NOUN)"
			   priority="300"/>
    <NLPattern name="action-define-noun2"
			   head="perf.q.action(LISTENER, verb.define(LISTENER,NOUN))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'what' verb('verb.be'[symbol], [plural], P, [present-tense]) 
			   		 noun(NOUN_C, [plural]) #symbolToSort(NOUN_C,NOUN) 
			   		 [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"
			   priority="200"/>

    <NLPattern name="request.action-query"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB,LISTENER,QUERY_VARIABLE), QUERY, [number.1])"
    		   body="verb(VERB, N, [second-person], T)
    		         nounPhrase(X2, N2, P2, CO)
    		         #derefQuery(CO, QUERY_VARIABLE, QUERY)"/>

    <NLPattern name="request.action-follow"
    		   head="perf.request.action.internal(LISTENER, verb.follow(LISTENER,OBJECT))"
    		   body="(verb('verb.come'[symbol], N, [second-person], T)|verb('verb.walk'[symbol], N, [second-person], T))
    		   		 'with'
    		         nounPhrase(X2, N2, P2, CO)
    		         #derefFromContext(CO, OBJECT)"/>

	<NLPattern name="request.action-this"
			   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, OBJECT2))"
			   body="verb(VERB, N, P, [present-tense])
    		   		 demonstrative-pronoun('close-demonstrative-pronoun'[symbol], N2, G2, P2) 
    		   		 #derefFromContext(#and(close-demonstrative-determiner(X2:'object'[object], N2), noun(X2,N2)), OBJECT2)"/> 

    <!-- the last line here (not equal to listener) is to prevent ambiguities with the last object -->
	<NLPattern name="request.action-2-objects"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, OBJECT2, OBJECT3))"
    		   body="verb(VERB, N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)
			   		 #derefFromContext(subject-personal-pronoun('subject-personal-pronoun.you'[symbol],[grammatical-number],[gender],[second-person]), LISTENER)
			   		 #notequal(OBJECT3, LISTENER)"
    		   priority="50"/>

	<NLPattern name="request.action-to"
			   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, OBJECT2, OBJECT3))"
			   body="verb(VERB, N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 'to'
			   		 nounPhrase(X3, N3, P3, C3)
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"/>
	<NLPattern name="request.action-drop-in"
			   head="perf.request.action.internal(LISTENER, action.drop(LISTENER, OBJECT2, OBJECT3))"
			   body="verb('action.drop'[symbol], N, [second-person], T)
			   		 nounPhrase(X2, N2, P2, C2)
			   		 (preposition('space.at'[space.at]) | preposition('space.directly.on.top.of'[space.directly.on.top.of])) 
			   		 nounPhrase(X3, N3, P3, C3)
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"/>

    <!-- This one is defined as perf.request.action directly, since with the proper noun, it is ambiguous otherwise -->
	<NLPattern name="request.action-propernoun"
    		   head="perf.request.action(LISTENER, #cons(VERB, LISTENER, OBJECT2, NOUN))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey'|'please'|'now') [('!'|',')]]
    		   		 verb(VERB, N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 properNounCompound(NOUN, N3)
			   		 #derefFromContext(C2, OBJECT2)
    		         [[','] 'please'] 
    		         ('!'|'.')*"
    		   priority="50"/>

	<NLPattern name="request.action-2-objects-negated"
			   head="perf.request.action.internal(LISTENER, #not(#cons(VERB, LISTENER, OBJECT2, OBJECT3)))"
			   body="verb('verb.do'[symbol], ND, PD, [present-tense])
			   		 'not'
			   		 verb(VERB, N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"/>
	<NLPattern name="request.action-object-noun-negated"
			   head="perf.request.action.internal(LISTENER, #not(#cons(VERB:'verb.call'[symbol], LISTENER, OBJECT2, NOUN)))"
			   body="verb('verb.do'[symbol], ND, PD, [present-tense])
			   		 'not'
			   		 verb(VERB, N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 noun(NOUN, N3) 
			   		 #derefFromContext(C2, OBJECT2)"
		   	   priority="200"/>
	<NLPattern name="request.action-propernoun-negated"
			   head="perf.request.action.internal(LISTENER, #not(#cons(VERB, LISTENER, OBJECT2, NOUN)))"
			   body="verb('verb.do'[symbol], ND, PD, [present-tense])
			   		 'not'
			   		 verb(VERB, N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 properNounCompound(NOUN, N3)
			   		 #derefFromContext(C2, OBJECT2)"/>
	<NLPattern name="request.go-in"
			   head="perf.request.action.internal(LISTENER, #cons('verb.enter'[symbol], LISTENER, OBJECT2))"
			   body="verb(VERB, N, P, [present-tense])
			   		 #symbolToSort(VERB, VERBSORT) #subsumes([verb.go], VERBSORT)
			   		 ('in'|'into')
			   		 nounPhrase(X2, N2, P2, C2)
			   		 #derefFromContext(C2, OBJECT2)"/>

	<NLPattern name="request.action-taketo"
			   head="perf.request.action.internal(LISTENER, verb.take-to(LISTENER, OBJECT2, OBJECT3))"
			   body="(verb('action.take'[symbol], N, P, [present-tense]) | verb('verb.show'[symbol], N, P, [present-tense]))
			   		 nounPhrase(X2, N2, P2, C2)
			   		 'to'
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"
			   priority="200"/>
	<NLPattern name="request.action-taketo2"
			   head="perf.request.action.internal(LISTENER, verb.take-to(LISTENER, SPEAKER, OBJECT3))"
			   body="verb('verb.show'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 'the' ('way'|'path') 'to'
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 #derefFromContext(C2, SPEAKER)
			   		 #derefFromContext(C3, OBJECT3)"
			   priority="200"/>

	<NLPattern name="request.action-letme-taketo"
			   head="perf.request.action.internal(LISTENER, verb.take-to(SPEAKER, OBJECT2, OBJECT3))"
			   body="verb('verb.let'[symbol], N0, P0, [present-tense])
			   		 'me'
			   		 verb('action.take'[symbol], N1, P1, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 'to'
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"
			   priority="200"/>

	<NLPattern name="request.action-letme-verb"
			   head="perf.request.action.internal(LISTENER, #cons(VERB, SPEAKER))"
			   body="verb('verb.let'[symbol], N0, P0, [present-tense])
			   		 'me'
			   		 verb(VERB, N1, P1, [present-tense])"/>

	<NLPattern name="request.action-connectto"
			   head="perf.request.action.internal(LISTENER, verb.connect-to(LISTENER, OBJECT2, OBJECT3))"
			   body="verb('verb.connect'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ('to'|'with')
			   		 nounPhrase(X3, N3, P3, C3) ['again'] 
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"
			   priority="200"/>
	<NLPattern name="request.action-connectto2"
			   head="perf.request.action.internal(LISTENER, verb.connect-to(LISTENER, OBJECT2, OBJECT3))"
			   body="verb('verb.put'[symbol], N, P, [present-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 'through' 'to'
			   		 nounPhrase(X3, N3, P3, C3) ['again'] 
			   		 #derefFromContext(C2, OBJECT2)
			   		 #derefFromContext(C3, OBJECT3)"
			   priority="200"/>
	<NLPattern name="request.action-connectto3"
			   head="perf.request.action.internal(LISTENER, verb.connect-to(LISTENER, SPEAKER, OBJECT3))"
			   body="'i'
			   		 (verb('verb.want'[symbol], N, P, [present-tense])|verb('verb.need'[symbol], N, P, [present-tense]))
			   		 'to'
			   		 verb('action.talk'[symbol], N2, P2, T2)
			   		 'to'
			   		 nounPhrase(X3, N3, P3, C3) ['again'] 
			   		 #derefFromContext(C3, OBJECT3)"/>
   	<NLPattern name="q.action-connectto"
			   head="perf.q.action(LISTENER, verb.connect-to(LISTENER, SPEAKER, OBJECT3))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 verb('verb.can'[symbol], N, P, [present-tense])
			   		 'i'
			   		 verb('action.talk'[symbol], N2, P2, T2)
			   		 ('to'|'with')
			   		 nounPhrase(X3, N3, P3, C3) ['again'] 
			   		 [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT3)"/>
	<!--NLPattern name="q.action-taketo"
			   head="perf.q.action(LISTENER, verb.take-to(LISTENER, SPEAKER, OBJECT3))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('can'|'could') 'you'
			   		 (verb('action.take'[symbol], N, P, [present-tense]) | verb('verb.show'[symbol], N, P, [present-tense]))
			   		 nounPhrase(X2, N2, P2, C2)
			   		 'to'
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
			   		 #derefFromContext(C2, SPEAKER)
			   		 #derefFromContext(C3, OBJECT3)"
			   priority="200"/-->
    <NLPattern name="request.action-tell"
    		   head="perf.request.action.internal(LISTENER, action.talk(LISTENER, perf.request.action(TARGET, ACTION)))"
    		   body="(verb('verb.tell'[symbol], N, [second-person], T)|
    		   		  verb('verb.ask'[symbol], N, [second-person], T)|
    		   		  verb('verb.instruct'[symbol], N, [second-person], T))
    		   		 nounPhrase(X2, N2, P2, CO)
    		   		 #derefFromContext(CO, TARGET)
    		   		 ['to']
    		   		 perf.request.action.internal(TARGET, ACTION)"/>
    <!--NLPattern name="q.action-tell2"
    		   head="perf.q.action(LISTENER, action.talk(LISTENER, perf.request.action(TARGET, ACTION)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 (verb('verb.tell'[symbol], N, [second-person], T)|verb('verb.ask'[symbol], N, [second-person], T)|verb('verb.instruct'[symbol], N, [second-person], T))
    		   		 nounPhrase(X3, N3, P3, CO)
    		   		 #derefFromContext(CO, TARGET)
    		   		 ['to']
    		   		 perf.request.action.internal(TARGET, ACTION)
    		         [[','] 'please'] 
    		         [[','] (nounPhraseNoDeterminer(X_L2, [singular], [second-person], C_L2) |
    		           		 nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2)) #derefFromContext(C_L2, LISTENER)]
    		         ('!'|'?')*"/-->
    <NLPattern name="request.action-tell3"
    		   head="perf.request.action.internal(LISTENER, action.talk(LISTENER, perf.request.action(TARGET, ACTION)))"
    		   body="verb('verb.have'[symbol], N, [second-person], T)
    		   		 nounPhrase(X2, N2, P2, CO)
    		   		 #derefFromContext(CO, TARGET)
    		   		 ['to']
    		   		 perf.request.action.internal(TARGET, ACTION)"/>

	<NLPattern name="request.action-i-want"
			   head="perf.request.action.internal(LISTENER, #cons(VERB, SPEAKER, OBJECT))"
			   body="'i'
			   		 (verb('verb.want'[symbol], N, P, [present-tense])|verb('verb.need'[symbol], N, P, [present-tense]))
			   		 'to'
			   		 verb(VERB, VN, VP, [infinitive-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ['with' 'me']
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="request.action-i-want2"
			   head="perf.request.action.internal(LISTENER, #cons(VERB, SPEAKER))"
			   body="'i'
			   		 (verb('verb.want'[symbol], N, P, [present-tense])|verb('verb.need'[symbol], N, P, [present-tense]))
			   		 'to'
			   		 verb(VERB, VN, VP, [infinitive-tense])
			   		 ['with' 'me']"/>
	<NLPattern name="request.action-let-me"
			   head="perf.request.action.internal(LISTENER, #cons(VERB, SPEAKER, OBJECT))"
			   body="verb('verb.let'[symbol],N, P, [present-tense])
			   		 'me'
			   		 verb(VERB, VN, VP, [infinitive-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 #derefFromContext(C2, OBJECT)"/>
	<NLPattern name="request.action-let-me-take"
			   head="perf.request.action.internal(LISTENER, action.take(SPEAKER, OBJECT))"
			   body="verb('verb.let'[symbol],N, P, [present-tense])
			   		 'me'
			   		 verb('action.take'[symbol], VN, VP, [infinitive-tense])
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ['with' 'me']
			   		 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="request.action-go-outside-object"
    		   head="perf.request.action.internal(LISTENER, verb.leave(LISTENER, OBJECT))"
    		   body="(verb('verb.go'[symbol], N, [second-person], T)|verb('verb.get'[symbol], N, [second-person], T))
    		   		 'outside'
    		   		 nounPhrase(X2, N2, P2, C2)
    		         #derefFromContext(C2, OBJECT)"
    		   priority="150"/>

    <!-- requests with phrasal verbs -->
    <NLPattern name="request.action-phrasal1"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, TARGET))"
    		   body="phrasal-verb(VERB, N, [second-person], T, PREP)
    		   		 nounPhrase(X3, N3, P3, CO)
    		   		 #token(PREP)
    		         #derefFromContext(CO, TARGET)"
    		   priority="150"/>
    <NLPattern name="request.action-phrasal2"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, TARGET))"
    		   body="phrasal-verb(VERB, N, [second-person], T, PREP)
    		   		 #token(PREP)
    		   		 nounPhrase(X3, N3, P3, CO)
    		         #derefFromContext(CO, TARGET)"
    		   priority="150"/>
    <!--NLPattern name="q.action-phrasal1"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, TARGET))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 phrasal-verb(VERB, N2, [second-person], T2, PREP)
    		   		 nounPhrase(X3, N3, P3, CO)
    		   		 #token(PREP)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
    		         #derefFromContext(CO, TARGET)"
    		   priority="150"/>
    <NLPattern name="q.action-phrasal2"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, TARGET))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 phrasal-verb(VERB, N2, [second-person], T2, PREP)
    		   		 #token(PREP)
    		   		 nounPhrase(X3, N3, P3, CO)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
    		         #derefFromContext(CO, TARGET)"
    		   priority="250"/-->
    <NLPattern name="request.action-phrasal-2args"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, OBJ3, OBJ4))"
    		   body="phrasal-verb(VERB, N, [second-person], T, PREP)
    		   		 nounPhrase(X3, N3, P3, C3)
    		   		 #token(PREP)
    		   		 nounPhrase(X4, N4, P4, C4)
    		         #derefFromContext(C3, OBJ3)
    		         #derefFromContext(C4, OBJ4)"
    		   priority="150"/>
    <!--NLPattern name="q.action-phrasal-2args"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, OBJ3, OBJ4))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 nounPhrase(X3, N3, P3, C3)
    		   		 #token(PREP)
    		   		 nounPhrase(X4, N4, P4, C4)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
    		         #derefFromContext(C3, OBJ3)
    		         #derefFromContext(C4, OBJ4)"
    		   priority="150"/-->

    <NLPattern name="request.action-phrasal2-a-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, V), #cons(NOUN, V), [number.1])"
    		   body="phrasal-verb(VERB, N, [second-person], T, PREP)
    		   		 (#token(PREP)
    		   		  indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular])
    		   		  |
    		   		  indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular])
    		   		  #token(PREP)
    		   		 )"/>

    <NLPattern name="request.action-phrasal2-all-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, V), #cons(NOUN, V), [all])"
    		   body="phrasal-verb(VERB, N, [second-person], T, PREP)
    		   		 (#token(PREP)
    		   		  definite-article('all'[symbol], [plural]) ['the'] noun(NOUN, [plural])
    		   		  |
    		   		  definite-article('all'[symbol], [plural]) ['the'] noun(NOUN, [plural])
    		   		  #token(PREP)
    		   		 )"
    		   priority="200"/>

    <NLPattern name="request.action-phrasal2-noun-in-all-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, V), #and(#cons(NOUN, V), #and(space.at(V, V2), #cons(NOUN2, V2)) ), [all])"
    		   body="phrasal-verb(VERB, N, [second-person], T, PREP)
    		   		 (#token(PREP) ['the'] noun(NOUN, [plural])
    		   		  (preposition('space.at'[space.at])|'on') definite-article('all'[symbol], [plural]) noun(NOUN2, [plural])
    		   		  |
    		   		  ['the'] noun(NOUN, [plural]) #token(PREP)
    		   		  (preposition('space.at'[space.at])|'on') definite-article('all'[symbol], [plural]) noun(NOUN2, [plural])
    		   		  |
    		   		  ['the'] noun(NOUN, [plural])
    		   		  (preposition('space.at'[space.at])|'on') definite-article('all'[symbol], [plural]) noun(NOUN2, [plural])
    		   		  #token(PREP)
    		   		 )"/>

    <!--NLPattern name="q.action-phrasal2-all-noun"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, V), #cons(NOUN, V), [all])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 phrasal-verb(VERB, N2, [second-person], T2, PREP)
    		   		 (#token(PREP)
    		   		  definite-article('all'[symbol], [plural]) ['the'] noun(NOUN, [plural])
    		   		  |
    		   		  definite-article('all'[symbol], [plural]) ['the'] noun(NOUN, [plural])
    		   		  #token(PREP)
    		   		 )
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/>

    <NLPattern name="q.action-phrasal2-noun-in-all-noun"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, V), #and(#cons(NOUN, V), #and(space.at(V, V2), #cons(NOUN2, V2)) ), [all])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 phrasal-verb(VERB, N2, [second-person], T2, PREP)
    		   		 (#token(PREP) ['the'] noun(NOUN, [plural])
    		   		  (preposition('space.at'[space.at])|'on') definite-article('all'[symbol], [plural]) noun(NOUN2, [plural])
    		   		  |
    		   		  ['the'] noun(NOUN, [plural]) #token(PREP)
    		   		  (preposition('space.at'[space.at])|'on') definite-article('all'[symbol], [plural]) noun(NOUN2, [plural])
    		   		  |
    		   		  ['the'] noun(NOUN, [plural])
    		   		  (preposition('space.at'[space.at])|'on') definite-article('all'[symbol], [plural]) noun(NOUN2, [plural])
    		   		  #token(PREP)
    		   		 )
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/-->    		         

    <NLPattern name="request.action-phrasal-something"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, V), object(V), [number.1])"
    		   body="phrasal-verb(VERB, N, [second-person], T, PREP)
    		   		 (#token(PREP) ('something'|'anything') |
    		   		  ('something'|'anything') #token(PREP))"/>

    <NLPattern name="request.action-something"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, V), object(V), [number.1])"
    		   body="verb(VERB, N, [second-person], T) ('something'|'anything')"/>

    <!--NLPattern name="q.action-something"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, V), object(V), [number.1])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 verb(VERB, N2, [second-person], T2) ('something'|'anything')
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/>

    <NLPattern name="q.action-phrasal-something"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, V), object(V), [number.1])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 phrasal-verb(VERB, N2, [second-person], T2, PREP)
    		   		 (#token(PREP) ('something'|'anything') |
    		   		  ('something'|'anything') #token(PREP))
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/-->


    <!-- special case of the verb send, which means "tell to go" -->
    <NLPattern name="request.action-send"
    		   head="perf.request.action.internal(LISTENER, action.talk(LISTENER, perf.request.action(TARGET, verb.go-to(TARGET, LOCATION))))"
    		   body="verb('verb.send'[symbol], N, [second-person], T)
    		   		 nounPhrase(X2, N2, P2, CO)
    		   		 noun(X3:[space.location], N3)
    		         #derefFromContext(CO, TARGET)
    		         #derefFromContext(noun(X3, N3), LOCATION)"
    		   priority="150"/>
    <!--NLPattern name="q.action-send"
    		   head="perf.q.action(LISTENER, action.talk(LISTENER, perf.request.action(TARGET, verb.go-to(TARGET, LOCATION))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 verb('verb.send'[symbol], N2, [second-person], T2)
    		   		 nounPhrase(X3, N3, P3, CO)
    		   		 noun(X4:[space.location], N4)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
    		         #derefFromContext(CO, TARGET)
    		         #derefFromContext(noun(X4, N4), LOCATION)"
    		   priority="150"/-->
    <NLPattern name="request.action-send-to"
    		   head="perf.request.action.internal(LISTENER, action.talk(LISTENER, perf.request.action(TARGET, verb.go-to(TARGET, LOCATION))))"
    		   body="verb('verb.send'[symbol], N, [second-person], T)
    		   		 nounPhrase(X2, N2, P2, CO)
    		   		 'to'
    		   		 nounPhrase(X3, N3, P3, C3)
    		         #derefFromContext(CO, TARGET)
    		         #derefFromContext(C3, LOCATION)"
    		   priority="200"/>
    <!--NLPattern name="q.action-send-to"
    		   head="perf.q.action(LISTENER, action.talk(LISTENER, perf.request.action(TARGET, verb.go-to(TARGET, LOCATION))))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 verb('verb.send'[symbol], N2, [second-person], T2)
    		   		 nounPhrase(X3, N3, P3, CO)
    		   		 'to'
    		   		 nounPhrase(X4, N4, P4, C4)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
    		         #derefFromContext(CO, TARGET)
    		         #derefFromContext(C4, LOCATION)"
    		   priority="200"/-->

    <!-- special cases of the verb drop" -->

    <NLPattern name="request.action-drop-to-floor"
    		   head="perf.request.action.internal(LISTENER, action.drop(LISTENER, TARGET))"
    		   body="(verb('action.drop'[symbol], N, [second-person], T) | verb('verb.put'[symbol], N, [second-person], T))
    		   		 nounPhrase(X2, N2, P2, CO)
    		   		 (preposition('space.at'[space.at]) | preposition('space.directly.on.top.of'[space.directly.on.top.of])) 
    		   		 'the' noun('ground'[ground], [singular])
    		         #derefFromContext(CO, TARGET)"/>
    <!--NLPattern name="q.action-drop-to-floor"
    		   head="perf.q.action(LISTENER, action.drop(LISTENER, TARGET))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N0, [second-person], T0) | verb('verb.will'[symbol], N0, [second-person], T0)) subject-personal-pronoun(X1, N0, G, [second-person])
    		   		 ['please']
    		   		 (verb('action.drop'[symbol], N, [second-person], T) | verb('verb.put'[symbol], N, [second-person], T))
    		   		 nounPhrase(X2, N2, P2, CO)
    		   		 (preposition('space.at'[space.at]) | preposition('space.directly.on.top.of'[space.directly.on.top.of])) 
    		   		 'the' noun('ground'[ground], [singular])
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
    		         #derefFromContext(CO, TARGET)"/-->

  	<!-- Patterns for performative "perf.request.action" and "perf.q.action" (they are the same except the later is a question) -->
    <!--NLPattern name="q.action-verb-object"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb(V2, N2, [no-person], [infinitive-tense])
    		         [(preposition('space.at'[space.at])|'on')]
    		         nounPhrase(X3, N3, P3, CO) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 #derefFromContext(CO, OBJECT)"
    		   		 priority="200"/>

    <NLPattern name="q.action-verb-all-noun"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER, Q), #cons(NOUN, Q), [all])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb(V2, N2, [no-person], [infinitive-tense])
    		         definite-article('all'[symbol], [plural])
    		         ['the']
    		         noun(NOUN, [plural])
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)"
    		   		 priority="250"/>

    <NLPattern name="q.action-verb-all-noun-in-np"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER, Q), #and(#cons(NOUN, Q), space.at(Q, OBJECT)), [all])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb(V2, N2, [no-person], [infinitive-tense])
    		         definite-article('all'[symbol], [plural])
    		         ['the']
    		         noun(NOUN, [plural])
    		         (preposition('space.at'[space.at])|'on')
    		         nounPhrase(X2, N2, G2, C2)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		         #derefFromContext(C2, OBJECT)"/>

	<NLPattern name="q.action-this"
			   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, OBJECT3))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb(VERB, N2, [no-person], [infinitive-tense])
    		   		 demonstrative-pronoun('close-demonstrative-pronoun'[symbol], N3, G3, P3) 
    		   		 [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		   		 #derefFromContext(#and(close-demonstrative-determiner(X3:'object'[object], N3), noun(X3,N3)), OBJECT3)"/> 

    <NLPattern name="q.action-pull-from-object"
    		   head="perf.q.action(LISTENER, action.pull(LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb('action.pull'[symbol], N2, [no-person], [infinitive-tense])
    		         'from'
    		         nounPhrase(X3, N3, P3, CO) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 #derefFromContext(CO, OBJECT)"/-->
    <NLPattern name="q.predicate-verb-generic-object"
    		   head="perf.q.predicate(LISTENER, #and(verb.can(LISTENER, #cons(V2, LISTENER, QUERY_VARIABLE)), #cons(OBJECTNOUN, QUERY_VARIABLE)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb(V2, N2, [no-person], [infinitive-tense])
    		         noun(OBJECTNOUN, [plural]) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)"
    		   		 priority="250"/>

<!--     <NLPattern name="request.action-verb-np"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, OBJECT))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         [(preposition('space.at'[space.at])|'on')]
    		         nounPhrase(X3, N3, P3, CO) 
    		         #derefFromContext(CO, OBJECT)"/>
 -->
    <NLPattern name="request.action-verb-np-list"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, OBJECT_LIST))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         [(preposition('space.at'[space.at])|'on')]
    		         nounPhraseListFromContext(OBJECT_LIST)"/>

    <!--NLPattern name="q.action-verb-np-list"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER, OBJECT_LIST))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb(V2, N2, P2, [infinitive-tense])
    		         [(preposition('space.at'[space.at])|'on')]
    		         nounPhraseListFromContext(OBJECT_LIST)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/-->

    <NLPattern name="request.action-verb-all-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, Q), #cons(NOUN, Q), [all])"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         definite-article('all'[symbol], [plural])
    		         ['the']
    		         noun(NOUN, [plural])"
    		   priority="125"/>

    <NLPattern name="request.action-verb-all-noun-in-np"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, Q), #and(#cons(NOUN, Q), space.at(Q, OBJECT)), [all])"
    		   body="verb(V2, N2, [no-person], [infinitive-tense])
    		         definite-article('all'[symbol], [plural])
    		         ['the']
    		         noun(NOUN, [plural])
    		         (preposition('space.at'[space.at])|'on')
    		         nounPhrase(X2, N2, G2, C2)
    		         #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="request.action-3dprint-noun"
    		   head="perf.request.action.internal(LISTENER, action.print(LISTENER, V), #cons(NOUN, V), [number.1])"
    		   body="verb('action.print'[symbol], N2, P2, [infinitive-tense])
    		         noun(NOUN, N3)"
    		   priority="150"/>
    <NLPattern name="request.action-verb-np-direction"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, OBJECT, DIRECTION_SORT:[direction]))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO) 
    		         noun(DIRECTION, [singular]) #symbolToSort(DIRECTION, DIRECTION_SORT)
    		         #derefFromContext(CO, OBJECT)"/>
    <NLPattern name="request.action-pull-from-np"
    		   head="perf.request.action.internal(LISTENER, action.pull(LISTENER, OBJECT))"
    		   body="verb('action.pull'[symbol], N2, P2, [infinitive-tense])
    		         'from'
    		         nounPhrase(X3, N3, P3, CO) 
    		         #derefFromContext(CO, OBJECT)"/>
    <!--NLPattern name="q.action-can/will-pronoun-verb-query"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER, QUERY_VARIABLE), QUERY, [number.1])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) 
    		   		 subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb(V2, N2, [no-person], [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 #derefQuery(CO, QUERY_VARIABLE, QUERY)"/--> 		         

    <NLPattern name="request.action-verb-query-query"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, QUERY_VARIABLE3, QUERY_VARIABLE4), #and(QUERY3, QUERY4), [number.1])"
    		   body="phrasal-verb(VERB, N2, [second-person], [present-tense], PREP)
    		         nounPhrase(X3, N3, P3, C3)
    		         #token(PREP)
    		         nounPhrase(X4, N4, P4, C4)
    		         #derefQuery(C3, QUERY_VARIABLE3, QUERY3)
    		         #derefQuery(C4, QUERY_VARIABLE4, QUERY4)"/>
    <!--NLPattern name="q.action-verb-query-query"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, QUERY_VARIABLE3, QUERY_VARIABLE4), #and(QUERY3, QUERY4), [number.1])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         phrasal-verb(VERB, N2, [second-person], [present-tense], PREP)
    		         nounPhrase(X3, N3, P3, C3)
    		         #token(PREP)
    		         nounPhrase(X4, N4, P4, C4)
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
    		         #derefQuery(C3, QUERY_VARIABLE3, QUERY3)
    		         #derefQuery(C4, QUERY_VARIABLE4, QUERY4)"/-->

     <NLPattern name="request.action-verb-query-np"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, QUERY_VARIABLE3, OBJECT4), QUERY3, [number.1])"
    		   body="phrasal-verb(VERB, N2, [second-person], [present-tense], PREP)
    		         nounPhrase(X3, N3, P3, C3)
    		         #token(PREP)
    		         nounPhrase(X4, N4, P4, C4)
    		         #derefQuery(C3, QUERY_VARIABLE3, QUERY3)
    		         #derefFromContext(C4, OBJECT4)"
    		   priority="125"/>
    <!--NLPattern name="q.action-verb-query-np"
    		   head="perf.q.action(LISTENER, #cons(VERB, LISTENER, QUERY_VARIABLE3, OBJECT4), QUERY3, [number.1])"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         phrasal-verb(VERB, N2, [second-person], [present-tense], PREP)
    		         nounPhrase(X3, N3, P3, C3)
    		         #token(PREP)
    		         nounPhrase(X4, N4, P4, C4)
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*
    		         #derefQuery(C3, QUERY_VARIABLE3, QUERY3)
    		         #derefFromContext(C4, OBJECT4)"/-->

    <NLPattern name="request.action-verb-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, X), #cons(NOUN, X), [number.1])"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         (['some'] noun(NOUN, [uncountable]) | 
    		          ['some'] noun(NOUN, [plural]) | 
    		          indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular])) "/>
    <NLPattern name="request.action-reprodudemedia-noun"
    		   head="perf.request.action.internal(LISTENER, verb.reproduce-media(LISTENER, X), #cons(NOUN:[media], X), [number.1])"
    		   body="verb('verb.reproduce-media'[symbol], N2, P2, [infinitive-tense])
    		         (['some'] noun(NOUN, [uncountable]) | 
    		          ['some'] noun(NOUN, [plural]) | 
    		          indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular])) "
    		   priority="150"/>    		        
    <NLPattern name="request.action-verb-adjective-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, X), #and(#cons(NOUN, X), #cons(ADJ, X)), [number.1])"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         (['some'] adjective(ADJ) noun(NOUN, [uncountable]) | 
    		          ['some'] adjective(ADJ) noun(NOUN, [plural]) | 
    		          indefinite-article('a'[symbol], [singular]) adjective(ADJ) noun(NOUN, [singular]))"/>    		         
    <NLPattern name="request.action-verb-adjective-with-value-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, X), #and(#cons(NOUN, X), #cons(ADJ_PARENT:[property-with-value], X, ADJ)), [number.1])"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         (['some'] adjective(ADJ)  noun(NOUN, [uncountable]) | 
    		          ['some'] adjective(ADJ) noun(NOUN, [plural]) | 
    		          indefinite-article('a'[symbol], [singular]) adjective(ADJ) noun(NOUN, [singular])) 
    		         #sortParent(ADJ, ADJ_PARENT)"
    		   priority="150"/> 

    <NLPattern name="request.action-phrasalverb-obj-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, OBJECT, X), #cons(NOUN, X), [number.1])"
    		   body="phrasal-verb(V2, N2, [second-person], T2, PREP)
    		         nounPhrase(X3, N3, P3, CO)
    		         #token(PREP)
    		         (['some'] noun(NOUN, [uncountable]) | 
    		          ['some'] noun(NOUN, [plural]) | 
    		          indefinite-article('a'[symbol], [singular]) noun(NOUN, [singular]))
    		         #derefFromContext(CO, OBJECT)"/>
    <NLPattern name="request.action-phrasalverb-obj-adjective-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, OBJECT, X), #and(#cons(NOUN, X), #cons(ADJ, X)), [number.1])"
    		   body="phrasal-verb(V2, N2, [second-person], T2, PREP)
    		         nounPhrase(X3, N3, P3, CO)
    		         #token(PREP)
    		         (['some'] adjective(ADJ) noun(NOUN, [uncountable]) | 
    		          ['some'] adjective(ADJ) noun(NOUN, [plural]) | 
    		          indefinite-article('a'[symbol], [singular]) adjective(ADJ) noun(NOUN, [singular]))
    		         #derefFromContext(CO, OBJECT)"/>
    <NLPattern name="request.action-phrasalverb-obj-adjective-with-value-noun"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, OBJECT, X), #and(#cons(NOUN, X), #cons(ADJ_PARENT:[property-with-value], X, ADJ)), [number.1])"
    		   body="phrasal-verb(V2, N2, [second-person], T2, PREP)
    		         nounPhrase(X3, N3, P3, CO)
    		         #token(PREP)
    		         (['some'] adjective(ADJ) noun(NOUN, [uncountable]) | 
    		          ['some'] adjective(ADJ) noun(NOUN, [plural]) | 
    		          indefinite-article('a'[symbol], [singular]) adjective(ADJ) noun(NOUN, [singular])) 
    		         #sortParent(ADJ, ADJ_PARENT)
    		         #derefFromContext(CO, OBJECT)"
    		   priority="150"/>     		   

    <NLPattern name="request.action-adverb"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[space.location]))"
    		   body="verb(V2, N2, [second-person], T2)
    		         adverb(LSYMBOL) #symbolToSort(LSYMBOL,LSORT)"
    		   priority="200"/>
    <NLPattern name="request.action-object-adverb"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, OBJECT, LSORT:[space.location]))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO)
    		         adverb(LSYMBOL) 
    		         #derefFromContext(CO, OBJECT)
    		         #symbolToSort(LSYMBOL,LSORT)"/>

    <NLPattern name="request.action-indirect-with-np"
    		   head="perf.request.action.internal(LISTENER, #cons(V, LISTENER, VARIABLE:[#id], INDIRECT), #cons(V4, OBJECT, VARIABLE), [all])"
    		   body="verb(V, N, P, T) object-personal-pronoun(X2, N2, G2, P2)
    		         ('everything'|'what'|'all')
    		         nounPhrase(X3, N3, P3, C3)
    		         verb(V4, N4, P4, T4)
    		         #derefFromContext(subject-personal-pronoun(X2, N2, G2, P2), INDIRECT)
    		         #derefFromContext(C3, OBJECT)"/>

    <NLPattern name="request.action-with-np"
    		   head="perf.request.action.internal(LISTENER, #cons(V, LISTENER, VARIABLE:[#id]), #cons(V4, OBJECT, VARIABLE), [all])"
    		   body="verb(V, N, P, T)
    		         ('everything'|'what'|'all')
    		         nounPhrase(X3, N3, P3, C3)
    		         verb(V4, N4, P4, T4)
    		         #derefFromContext(C3, OBJECT)"/>

    <NLPattern name="request.action-with-np-in-np"
    		   head="perf.request.action.internal(LISTENER, #cons(V, LISTENER, VARIABLE:[#id], WHERE), #cons(V4, OBJECT, VARIABLE), [all])"
    		   body="verb(V, N, P, T)
    		         ('everything'|'what'|'all')
    		         nounPhrase(X3, N3, P3, C3)
    		         verb(V4, N4, P4, T4)
    		         (preposition('space.at'[space.at])|'on')
    		         nounPhrase(X5, N5, P5, C5)
    		         #derefFromContext(C3, OBJECT)
    		         #derefFromContext(C5, WHERE)"/>

    <NLPattern name="request.action-phrasal-with-np-in-np"
    		   head="perf.request.action.internal(LISTENER, #cons(V, LISTENER, VARIABLE:[#id], WHERE), #cons(V4, OBJECT, VARIABLE), [all])"
    		   body="phrasal-verb(V, N, P, T, PREP)
    		         ('everything'|'what'|'all')
    		         nounPhrase(X3, N3, P3, C3)
    		         verb(V4, N4, P4, T4)
    		         #token(PREP)
    		         nounPhrase(X5, N5, P5, C5)
    		         #derefFromContext(C3, OBJECT)
    		         #derefFromContext(C5, WHERE)"
    		   priority="150"/>

    <NLPattern name="request.action-all-noun-np-verb"
    		   head="perf.request.action.internal(LISTENER, #cons(V, LISTENER, VARIABLE:[#id]), #and(#cons(V4, OBJECT, VARIABLE), #cons(NOUN, VARIABLE)), [all])"
    		   body="verb(V, N, P, T)
    		         ('all'|'the'|'all' 'the')
    		         noun(NOUN, [plural])
    		         nounPhrase(X3, N3, P3, C3)
    		         verb(V4, N4, P4, T4)
    		         #derefFromContext(C3, OBJECT)"/>

    <NLPattern name="request.action-drop-all-noun-in-np"
    		   head="perf.request.action.internal(LISTENER, action.drop(LISTENER, VARIABLE:[#id], WHERE), #cons(NOUN, VARIABLE), [all])"
    		   body="verb('action.drop'[symbol], N, P, T)
    		         ('all'|'the'|'all' 'the')
    		         noun(NOUN, [plural])
    		         (preposition('space.at'[space.at])|'on')
    		         nounPhrase(X5, N5, P5, C5)
    		         #derefFromContext(C5, WHERE)"
    		   priority="150"/>

    <NLPattern name="request.action-drop-all-noun-np-verb-in-np"
    		   head="perf.request.action.internal(LISTENER, action.drop(LISTENER, VARIABLE:[#id], WHERE), #and(#cons(V4, OBJECT, VARIABLE), #cons(NOUN, VARIABLE)), [all])"
    		   body="verb('action.drop'[symbol], N, P, T)
    		         ('all'|'the'|'all' 'the')
    		         noun(NOUN, [plural])
    		         nounPhrase(X3, N3, P3, C3)
    		         verb(V4, N4, P4, T4)
    		         (preposition('space.at'[space.at])|'on')
    		         nounPhrase(X5, N5, P5, C5)
    		         #derefFromContext(C3, OBJECT)
    		         #derefFromContext(C5, WHERE)"
    		   priority="150"/>

    <NLPattern name="request.action-open-door-to-np"
    		   head="perf.request.action.internal(LISTENER, action.open(LISTENER, OBJECT))"
    		   body="verb('action.open'[symbol], N2, P2, [infinitive-tense])
    		         ['the'] noun(NOUN:'door'[door], NN) 'to'
    		         nounPhrase(X3, N3, P3, CO) 
    		         #derefFromContext(CO, OBJECT1)
    		         #derefFromContext(#and(noun(NOUN,NN), verb.belong(NOUN, OBJECT1)), OBJECT)"
    		   priority="200"/>
    <NLPattern name="request.action-open-np-door"
    		   head="perf.request.action.internal(LISTENER, action.open(LISTENER, OBJECT))"
    		   body="verb('action.open'[symbol], N2, P2, [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO) ['\'s']
    		         noun(NOUN:'door'[door], NN) 
    		         #derefFromContext(CO, OBJECT1)
    		         #derefFromContext(#and(noun(NOUN,NN), verb.belong(NOUN, OBJECT1)), OBJECT)"
    		   priority="125"/>
    <!--NLPattern name="q.action-open-door-to-np"
    		   head="perf.q.action(LISTENER, action.open(LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb('action.open'[symbol], N2, P2, [infinitive-tense])
    		         ['the'] noun(NOUN:'door'[door], NN) 'to'
    		         nounPhrase(X3, N3, P3, CO) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(CO, OBJECT1)
    		         #derefFromContext(#and(noun(NOUN,NN), verb.belong(NOUN, OBJECT1)), OBJECT)"
    		   priority="200"/>
    <NLPattern name="q.action-open-np-door"
    		   head="perf.q.action(LISTENER, action.open(LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb('action.open'[symbol], N2, P2, [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO) ['\'s']
    		         noun(NOUN:'door'[door], NN)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(CO, OBJECT1)
    		         #derefFromContext(#and(noun(NOUN,NN), verb.belong(NOUN, OBJECT1)), OBJECT)"
    		   priority="200"/-->

    <NLPattern name="request.action-close-door-to-np"
    		   head="perf.request.action.internal(LISTENER, action.close(LISTENER, OBJECT))"
    		   body="verb('action.close'[symbol], N2, P2, [infinitive-tense])
    		         ['the'] noun(NOUN:'door'[door], NN) 'to'
    		         nounPhrase(X3, N3, P3, CO) 
    		         #derefFromContext(CO, OBJECT1)
    		         #derefFromContext(#and(noun(NOUN,NN), verb.belong(NOUN, OBJECT1)), OBJECT)"
    		   priority="200"/>
    <NLPattern name="request.action-close-np-door"
    		   head="perf.request.action.internal(LISTENER, action.close(LISTENER, OBJECT))"
    		   body="verb('action.close'[symbol], N2, P2, [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO) ['\'s']
    		         noun(NOUN:'door'[door], NN) 
    		         #derefFromContext(CO, OBJECT1)
    		         #derefFromContext(#and(noun(NOUN,NN), verb.belong(NOUN, OBJECT1)), OBJECT)"/>
    <!--NLPattern name="q.action-close-door-to-np"
    		   head="perf.q.action(LISTENER, action.close(LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb('action.close'[symbol], N2, P2, [infinitive-tense])
    		         ['the'] noun(NOUN:'door'[door], NN) 'to'
    		         nounPhrase(X3, N3, P3, CO) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(CO, OBJECT1)
    		         #derefFromContext(#and(noun(NOUN,NN), verb.belong(NOUN, OBJECT1)), OBJECT)"
    		   priority="200"/>
    <NLPattern name="q.action-close-np-door"
    		   head="perf.q.action(LISTENER, action.close(LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb('action.close'[symbol], N2, P2, [infinitive-tense])
    		         nounPhrase(X3, N3, P3, CO) ['\'s']
    		         noun(NOUN:'door'[door], NN)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(CO, OBJECT1)
    		         #derefFromContext(#and(noun(NOUN,NN), verb.belong(NOUN, OBJECT1)), OBJECT)"
    		   priority="200"/-->

    <NLPattern name="request.action-I-need-character-in-X"
    		   head="perf.request.action.internal(LISTENER, action.talk(LISTENER, perf.request.action(CHARACTER, verb.enter(CHARACTER, TARGET))))"
    		   body="subject-personal-pronoun(X1, N, G, [first-person])
    		         verb('verb.need'[symbol], N2, G2, T2)
    		         nounPhrase(X3, N3, P3, C3)
    		         (preposition('space.at'[space.at])|'on')
    		         nounPhrase(X4, [singular], P4, C4)
    		         #derefFromContext(C3, CHARACTER)
    		         #derefFromContext(C4, TARGET)"/>

    <!--NLPattern name="q.action-no-arguments"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb(V2, N2, [no-person], [infinitive-tense]) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)"
    		   priority="50"/-->
    <NLPattern name="request.action-no-arguments"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER))"
    		   body="verb(V2, N2, P2, [infinitive-tense])"
    		   priority="50"/>

    <!--NLPattern head="perf.q.action(LISTENER, verb.follow(LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		         verb('verb.come'[symbol], N2, [no-person], [infinitive-tense])
    		         'with'
    		         nounPhrase(X3, N3, P3, CO) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		   		 #derefFromContext(CO, OBJECT)"/-->

    <NLPattern name="request.action-go-direction"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction]))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         (adverb(LSYMBOL)|[('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular])) 
    		         #symbolToSort(LSYMBOL,LSORT)"
    		   priority="200"/>

    <NLPattern name="request.action-move-to-direction"
    		   head="perf.request.action.internal(LISTENER, verb.move-to(LISTENER, LSORT:[direction]))"
    		   body="verb('verb.move-to'[symbol], N2, P2, [infinitive-tense])
    		         (adverb(LSYMBOL)|['the'] noun(LSYMBOL, [singular])) 
    		         #symbolToSort(LSYMBOL,LSORT)"
    		   priority="250"/>    		   

    <NLPattern name="request.action-go-direction-amount"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], ASORT:[amount]))"
    		   body="verb(V2, N2, P2, [infinitive-tense]) 
    		   		 [('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular])
    		   		 #symbolToSort(LSYMBOL,LSORT)
    		   		 adverb(ASYMBOL) #symbolToSort(ASYMBOL,ASORT)"/>
    <NLPattern name="request.action-go-direction-amount2"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], ASORT:[amount]))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         adverb(LSYMBOL) #symbolToSort(LSYMBOL,LSORT)
    		         adverb(ASYMBOL) #symbolToSort(ASYMBOL,ASORT)"/>

    <NLPattern name="request.action-go-amount-direction"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], ASORT:[amount]))"
    		   body="verb(V2, N2, [second-person], T2)
    		         adverb(ASYMBOL) #symbolToSort(ASYMBOL,ASORT)
    		         [('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular]) #symbolToSort(LSYMBOL,LSORT)"/>
    <NLPattern name="request.action-go-amount-direction2"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], ASORT:[amount]))"
    		   body="verb(V2, N2, [second-person], T2)
    		         adverb(ASYMBOL) #symbolToSort(ASYMBOL,ASORT)
    		         adverb(LSYMBOL) #symbolToSort(LSYMBOL,LSORT)"/>

    <NLPattern name="request.action-go-direction-far"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], [space.far]))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         adverb(LSYMBOL) #symbolToSort(LSYMBOL,LSORT)
    		         adverb('space.far'[space.far])"/>
    <NLPattern name="request.action-go-direction-far2"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], [space.far]))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         [('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular]) #symbolToSort(LSYMBOL,LSORT)
    		         adverb('space.far'[space.far])"/>

    <NLPattern name="request.action-go-direction-twice"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], '2'[number]))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         adverb(LSYMBOL) #symbolToSort(LSYMBOL,LSORT)
    		         'twice'"/>
    <NLPattern name="request.action-go-direction-twice2"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], '2'[number]))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         [('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular]) #symbolToSort(LSYMBOL,LSORT)
    		         'twice'"/>

    <NLPattern name="request.action-go-direction-n-times"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], NUMBER))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         adverb(LSYMBOL) #symbolToSort(LSYMBOL,LSORT)
    		         cardinal(NUMBER) 'times'"/>
    <NLPattern name="request.action-go-direction-n-times2"
    		   head="perf.request.action.internal(LISTENER, #cons(V2, LISTENER, LSORT:[direction], NUMBER))"
    		   body="verb(V2, N2, P2, [infinitive-tense])
    		         [('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular]) #symbolToSort(LSYMBOL,LSORT)
    		         cardinal(NUMBER) 'times'"/>

    <!--NLPattern name="q.action-go-direction"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER, LSORT:[direction]))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		         verb(V2, N2, [second-person], T2)
    		         (adverb(LSYMBOL)|[('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular])) 
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #symbolToSort(LSYMBOL,LSORT)"/>
    <NLPattern name="q.action-go-direction-amount"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER, LSORT:[direction], ASORT:[amount]))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		         verb(V2, N2, [second-person], T2)
    		         (adverb(LSYMBOL)|[('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular])) #symbolToSort(LSYMBOL,LSORT)
    		         adverb(ASYMBOL) #symbolToSort(ASYMBOL,ASORT)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/>
    <NLPattern name="q.action-go-amount-direction"
    		   head="perf.q.action(LISTENER, #cons(V2, LISTENER, LSORT:[direction], ASORT:[amount]))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		         verb(V2, N2, [second-person], T2)
    		         adverb(ASYMBOL) #symbolToSort(ASYMBOL,ASORT)
    		         (adverb(LSYMBOL)|[('to'|'toward'|'towards')] ['the'] noun(LSYMBOL, [singular])) #symbolToSort(LSYMBOL,LSORT)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')*"/-->

    <NLPattern name="request.action-move-to-X"
    		   head="perf.request.action.internal(LISTENER, verb.move-to(LISTENER, direction.towards(OBJECT)))"
    		   body="(verb('verb.move'[symbol], N, P, [present-tense])|
    		          verb('verb.go'[symbol], N, P, [present-tense])|
    		          verb('verb.walk'[symbol], N, P, [present-tense]))
    		         preposition('direction.towards'[direction.towards])
    		         nounPhrase(X2, [singular], P2, C2)
    		         #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="request.action-move-to-me"
    		   head="perf.request.action.internal(LISTENER, verb.move-to(LISTENER, direction.towards(SPEAKER)))"
    		   body="(verb('verb.move'[symbol], N, P, [present-tense])|
    		          verb('verb.go'[symbol], N, P, [present-tense])|
    		          verb('verb.walk'[symbol], N, P, [present-tense]))
    		         ('this' 'way'|'my' 'way'|['in'] 'this' 'direction'|['in'] 'my' 'direction')"/>

    <!--NLPattern name="q.action-move-to-X"
    		   head="perf.q.action(LISTENER, verb.move-to(LISTENER, direction.towards(OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		         (verb('verb.move'[symbol], N, P, [present-tense])|
    		          verb('verb.go'[symbol], N, P, [present-tense])|
    		          verb('verb.walk'[symbol], N, P, [present-tense]))
    		         preposition('direction.towards'[direction.towards])
    		         nounPhrase(X2, [singular], P2, C2)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.action-move-to-me"
    		   head="perf.q.action(LISTENER, verb.move-to(LISTENER, direction.towards(SPEAKER)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		         (verb('verb.move'[symbol], N, P, [present-tense])|
    		          verb('verb.go'[symbol], N, P, [present-tense])|
    		          verb('verb.walk'[symbol], N, P, [present-tense]))
    		         ('this' 'way'|'my' 'way'|['in'] 'this' 'direction'|['in'] 'my' 'direction')
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* "/-->

    <!-- get out of here / get out, etc. rule -->
    <NLPattern name="request.action-get-out"
    		   head="perf.request.action.internal(LISTENER, verb.go(LISTENER, [space.away]))"
    		   body="verb('verb.get'[symbol], N2, [second-person], T2) (noun('space.away'[space.away], N3) | 'out')"
    		   priority="300"/>
    <!-- Special case, needed due to the way my multi-token identification works -->
    <NLPattern name="request.action-get-out2"
    		   head="perf.request.action.internal(LISTENER, verb.go(LISTENER, [space.away]))"
    		   body="'get out of' 'the' 'way'"
    		         priority="300"/>
    <!-- Special case for take X from Y -->
    <NLPattern name="request.action-take-X-form-Y"
    		   head="perf.request.action.internal(LISTENER, action.take(LISTENER, OBJECT))"
    		   body="verb('action.take'[symbol], N2, [second-person], T2)
    		         nounPhrase(X2, [singular], P2, C2)
    		         'from'
    		         nounPhrase(X3, [singular], P3, C3)
    		         #derefFromContext(C3, OBJECT3)
    		         #derefFromContext(#and(space.at(X2, OBJECT3), C2), OBJECT)"/>
    <!--NLPattern head="perf.q.action(LISTENER, action.take(LISTENER, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
    		   		 ['please']
    		   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
    		         verb('action.take'[symbol], N2, [second-person], T2)
    		         nounPhrase(X2, [singular], P2, C2)
    		         'from'
    		         nounPhrase(X3, [singular], P3, C3)
    		         [[','] 'please']
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)] 
    		         ('!'|'?')* 
    		         #derefFromContext(C3, OBJECT3)
    		         #derefFromContext(#and(space.at(X2, OBJECT3), C2), OBJECT)"/-->

    <!-- Special case for go to sleep -->
    <NLPattern name="request.action-go-to-sleep"
    		   head="perf.request.action.internal(LISTENER, verb.sleep(LISTENER))"
    		   body="verb('verb.go-to'[symbol], N2, [second-person], T2)
    		         'sleep'"/>

	<!-- Special case for "join me in the rover" -->
    <!--NLPattern head="perf.q.action(LISTENER, verb.go-to(LISTENER, OBJECT4))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
			           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [('please'|'now') [',']] 
			   		 (verb('verb.can'[symbol], N, [second-person], T) | verb('verb.will'[symbol], N, [second-person], T)) subject-personal-pronoun(X1, N, G, P:[second-person])
			   		 ['please']
			   		 #derefFromContext(subject-personal-pronoun(X1, N, G, P), LISTENER)
			         verb('verb.join'[symbol], N2, [second-person], T2)
			         nounPhrase(X3, [singular], P3, C3)
			         (preposition('space.at'[space.at])|'on')
			         nounPhrase(X4, [singular], P4, C4)
			         [[','] 'please']
			         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)] 
			         ('!'|'?')* 
			         #derefFromContext(C3, SPEAKER)
			         #derefFromContext(C4, OBJECT4)"/-->
    <NLPattern name="action-go-to"
			   head="perf.request.action.internal(LISTENER, verb.go-to(LISTENER, OBJECT4))"
		       body="verb('verb.join'[symbol], N2, [second-person], T2)
			         nounPhrase(X3, [singular], P3, C3)
			         (preposition('space.at'[space.at])|'on')
			         nounPhrase(X4, [singular], P4, C4)
			         #derefFromContext(C3, SPEAKER)
			         #derefFromContext(C4, OBJECT4)"/>

    <!-- help! -->
    <NLPattern name="request.action-help"
    		   head="perf.request.action.internal(LISTENER, verb.help(LISTENER, SPEAKER))"
    		   body="verb('verb.help'[symbol], N2, [second-person], T2)"
    		   priority="200"/>

    <!--NLPattern head="perf.q.action(LISTENER, verb.help(LISTENER, SPEAKER, #cons(VERB:[symbol], SUBJECT, OBJECT)))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 (verb('verb.can'[symbol], N0, [second-person], T0) | verb('verb.will'[symbol], N0, [second-person], T0)) subject-personal-pronoun(X0, N0, G0, P0:[second-person])
    		   		 ['please']
    		         verb('verb.help'[symbol], N, [second-person], T) 
    		         nounPhrase(X2, [singular], P2, C2)
    		         verb(VERB, N3, P3, [present-tense])
    		         nounPhrase(X4, [singular], P4, C4)
    		         [[','] 'please'] 
    		         [[','] nounPhraseNoDeterminer(X_L2, [singular], [third-person], C_L2) #derefFromContext(#and(noun('character'[character], [singular]), C_L2), LISTENER)]
    		         ('!'|'?')* 
    		         #derefFromContext(C2, SUBJECT)
    		         #derefFromContext(C4, OBJECT)"/-->
    <NLPattern name="request.action-help-verb"
    		   head="perf.request.action.internal(LISTENER, verb.help(LISTENER, SPEAKER, #cons(VERB:[symbol], SUBJECT, OBJECT)))"
    		   body="verb('verb.help'[symbol], N, [second-person], T) 
    		         nounPhrase(X2, [singular], P2, C2)
    		         verb(VERB, N3, P3, [present-tense])
    		         nounPhrase(X4, [singular], P4, C4)
    		         #derefFromContext(C2, SUBJECT)
    		         #derefFromContext(C4, OBJECT)"/>

    <NLPattern name="request.action-hold-on"
    		   head="perf.request.action.internal(LISTENER, verb.wait(LISTENER))"
    		   body="verb('verb.wait'[symbol], N, [second-person], T)
    		   		 [[','] ['i' 'will'] 'be' ['right'] 'back']"/>


    <!-- requests involving numbers -->
    <NLPattern name="request.action-verb-number-query"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB:[symbol], LISTENER, V), QUERY, NUMBER)"
    		   body="verb(VERB, N, P, T)
    		   		 cardinal(NUMBER)
    		   		 nounPhrase(X2, N2, P2, C2)
    		         #derefQuery(C2, V, QUERY)"/>

    <!--NLPattern name="q.action-verb-number-query"
    		   head="perf.q.action(LISTENER, #cons(VERB:[symbol], LISTENER, V), QUERY, NUMBER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']]  
    		   		 (verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, P)
    		   		 ['please']
    		   		 verb(VERB, VN, VP, VT)
    		   		 cardinal(NUMBER)
    		   		 nounPhrase(X2, N2, P2, C2)  		 
					 [[','] 'please'] ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)
    		         #derefQuery(C2, V, QUERY)"/-->
 		         
    <NLPattern name="request.action-phrasal-verb-number-query-object"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB:[symbol], LISTENER, V, OBJECT3), QUERY, NUMBER)"
    		   body="phrasal-verb(VERB, N, P, T, PREP)
    		   		 cardinal(NUMBER)
    		   		 nounPhrase(X2, N2, P2, C2)
		   		 	 #token(PREP)
		   		 	 nounPhrase(X3, N3, P3, C3)
    		         #derefQuery(C2, V, QUERY)
    		         #derefFromContext(C3, OBJECT3)"
    		   priority="200"/>

    <!--NLPattern name="q.action-phrasal-verb-number-query-object"
    		   head="perf.q.action(LISTENER, #cons(VERB:[symbol], LISTENER, V, OBJECT3), QUERY, NUMBER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']]  
    		   		 (verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, P)
    		   		 ['please']
		   		 	 phrasal-verb(VERB, VN, VP, VT, PREP)
    		   		 cardinal(NUMBER)
    		   		 nounPhrase(X2, N2, P2, C2)
		   		 	 #token(PREP)
		   		 	 nounPhrase(X3, N3, P3, C3)
					 [[','] 'please'] ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)
    		         #derefQuery(C2, V, QUERY)
    		         #derefFromContext(C3, OBJECT3)"
    		   priority="200"/-->

    <NLPattern name="request.action-phrasal-verb-number-query-query"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB:[symbol], LISTENER, V, V2), #and(QUERY, QUERY2), NUMBER)"
    		   body="phrasal-verb(VERB, N, P, T, PREP)
    		   		 cardinal(NUMBER)
    		   		 nounPhrase(X2, N2, P2, C2)
		   		 	 #token(PREP)
		   		 	 nounPhrase(X3, N3, P3, C3)
    		         #derefQuery(C2, V, QUERY)
    		         #derefQuery(C3, V2, QUERY2)"/>

    <!--NLPattern name="q.action-phrasal-verb-number-query-query"
    		   head="perf.q.action(LISTENER, #cons(VERB:[symbol], LISTENER, V, V2), #and(QUERY, QUERY2), NUMBER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']]  
    		   		 (verb('verb.may'[symbol], N, P, T) | verb('verb.can'[symbol], N, P, T)) 
    		   		 subject-personal-pronoun(X1, N, G, P)
    		   		 ['please']
		   		 	 phrasal-verb(VERB, VN, VP, VT, PREP)
    		   		 cardinal(NUMBER)
    		   		 nounPhrase(X2, N2, P2, C2)
		   		 	 #token(PREP)
		   		 	 nounPhrase(X3, N3, P3, C3)
					 [[','] 'please'] ('!'|'?')* 
    		         #derefFromContext(subject-personal-pronoun(X1, N, G, P), SPEAKER)
    		         #derefQuery(C2, V, QUERY)
    		         #derefQuery(C3, V2, QUERY2)"/-->

     <!-- perf.moreresults -->
    <NLPattern name="moreresults"
			   head="perf.moreresults(LISTENER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 ['please' [',']] 
    		   		 indefinite-pronoun('pronoun.anyone.else'[symbol],N,G,P)
    		          [[','] 'please'] ('!'|'?')*"
    		   priority="200"/>
    <NLPattern name="moreresults2"
			   head="perf.moreresults(LISTENER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 ['please' [',']] 
    		   		 ('who'|'what'|'where') 'else'
    		          [[','] 'please'] ('!'|'?')*"/>
    <NLPattern name="moreresults3"
			   head="perf.moreresults(LISTENER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 'and' '?' '?'*"/>
    <NLPattern name="moreresults4"
			   head="perf.moreresults(LISTENER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 ['please' [',']] 
    		   		 indefinite-pronoun('pronoun.anyone.else'[symbol],N,G,P)
    		          [[','] 'please'] ('!'|'?')*"
    		   priority="200"/>

     <!-- perf.request.repeataction -->
    <NLPattern name="repeataction"
			   head="perf.request.repeataction(LISTENER)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 ('again' |
    		   		  adverb('small-amount'[small-amount]) 'more' |
    		   		  'one' 'more' 'time')
	 		         [[','] 'please'] ('!'|'.')*"/>
    <NLPattern name="repeataction2"
			   head="perf.request.repeataction(LISTENER, VERBSORT)"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		   		 [('please'|'now') [',']] 
    		   		 verb('verb.keep'[symbol], N2, P2, [present-tense]) verb(VERB, N3, P3, [gerund-tense]) 
    		   		 #symbolToSort(VERB, VERBSORT)
	 		         [[','] 'please'] ('!'|'.')*"/>
    <NLPattern name="request.action-keep-gerund"
    		   head="perf.request.action.internal(LISTENER, #cons(VERB, LISTENER, DIRECTION_SORT:[direction]))"
    		   body="verb('verb.keep'[symbol], N2, P2, [present-tense]) 
    		   		 verb(VERB, N3, P3, [gerund-tense]) 
    		   		 noun(DIRECTION, [singular]) #symbolToSort(DIRECTION, DIRECTION_SORT)"/>

    <!-- perf.q.howmany patterns -->
    <NLPattern name="q.howmany-X"
    		   head="perf.q.howmany(LISTENER, V, QUERY)"			
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' nounPhrase(X, N, P, C) ('!'|'?')* 
		   		 	 #derefQuery(C, V, QUERY)"/>    
    <NLPattern name="q.howmany-X-are-there"
    		   head="perf.q.howmany(LISTENER, V, QUERY)"			
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) ['there'] ('!'|'?')* 
		   		 	 #derefQuery(C, V, QUERY)"/>
    <NLPattern name="q.howmany-X-you-see"
    		   head="perf.q.howmany(LISTENER, V, QUERY)"			
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' nounPhrase(X, N, P, C) 
		   		 	 (verb('verb.do'[symbol], N2, P2, [present-tense]) | verb('verb.can'[symbol], N2, P2, [present-tense]))
		   		 	 'you' verb('verb.see'[symbol], N3, P3, [present-tense]) ('!'|'?')* 
		   		 	 #derefQuery(C, V, QUERY)"/>
    <NLPattern name="q.howmany-X-are-there-in"
    		   head="perf.q.howmany(LISTENER, V, #and(#cons(PREPOSITION, V, OBJECT), QUERY))"			
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) ['there']
		   		 	 preposition(PREPOSITION) nounPhrase(X2, [singular], P2, C2) 
		   		 	 ('!'|'?')* 
		   		 	 #derefQuery(C, V, QUERY)
		   		 	 #derefFromContext(C2, OBJECT)"/>
    <NLPattern name="q.howmany-X-are-there-here"
    		   head="perf.q.howmany(LISTENER, V, #and(space.at(V, LOCATION), QUERY))"			
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' nounPhrase(X, N, P, C) verb('verb.be'[symbol], N, P, [present-tense]) ['there']
		   		 	 ['in'] 'here'
		   		 	 ('!'|'?')* 
		   		 	 #derefQuery(C, V, QUERY)
		   		 	 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>
    <NLPattern name="q.howmany-X-Y-have"
    		   head="perf.q.howmany(LISTENER, V, #and(verb.have(OWNER, V), QUERY))"			
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' nounPhrase(X, N, P, C) 
		   		 	 verb('verb.do'[symbol], N2, P2, [present-tense]) nounPhrase(X2, N2, P2, C2) 'have' ('!'|'?')* 
		   		 	 #derefQuery(C, V, QUERY)
		   		 	 #derefFromContext(C2, OWNER)"/>
    <NLPattern name="q.howmany-X-Y-haveable-property"
    		   head="perf.q.howmany(LISTENER, V, #cons(PROPERTY:[property-with-value], OWNER, V))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' noun(PROPERTY, PN)
		   		 	 verb('verb.do'[symbol], N2, P2, [present-tense]) nounPhrase(X2, N2, P2, C2) 'have' ('!'|'?')* 
		   		 	 #derefFromContext(C2, OWNER)"
		   	   priority="200"/>
    <NLPattern name="q.howmany-X-are-Y"
    		   head="perf.q.howmany(LISTENER, V, #and(#cons(A, V), QUERY))"			
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' nounPhrase(X, N, P, C) 
		   		 	 verb('verb.be'[symbol], N2, P2, [present-tense]) adjective(A) ('!'|'?')* 
		   		 	 #derefQuery(C, V, QUERY)"/>
    <NLPattern name="q.howmany-X-are-Y2"
    		   head="perf.q.howmany(LISTENER, V, #and(#cons(A_PARENT:[property-with-value], V, A:[property-with-value]), QUERY))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' nounPhrase(X, N, P, C) 
		   		 	 verb('verb.be'[symbol], N2, P2, [present-tense]) adjective(A) #sortParent(A, A_PARENT) ('!'|'?')* 
		   		 	 #derefQuery(C, V, QUERY)"
		   	   priority="200"/>
    <NLPattern name="q.howmany-X-in-Y"
    		   head="perf.q.howmany(LISTENER, V, #and(#cons(NOUN,V),space.at(V,LOC)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' 
		   		 	 noun(NOUN,N)
		   		 	 [verb('verb.be'[symbol], N2, P2, [present-tense]) 'there']
		   		 	 (preposition('space.at'[space.at])|'on')
		   		 	 nounPhrase(X3, N3, P3, C3)
		   		 	 ('!'|'?')* 
		   		 	 #derefFromContext(C3, LOC)"/>
    <NLPattern name="q.howmany-X-that-verb-Y"
    		   head="perf.q.howmany(LISTENER, V, #and(QUERY,#cons(VERB:[symbol],V,OBJ)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' 
		   		 	 nounPhrase(XN, NN, PN, CN)
		   		 	 'that'
		   		 	 verb(VERB, N, P, [present-tense])
		   		 	 nounPhrase(X2, N2, P2, C2)
		   		 	 (verb('verb.be'[symbol], N3, P3, [present-tense]) 'there' |
		   		 	  (verb('verb.do'[symbol], N3, P3, [present-tense]) | verb('verb.can'[symbol], N3, P3, [present-tense]))
		   		 	 'you' verb('verb.see'[symbol], N4, P4, [present-tense]))
		   		 	 ('!'|'?')* 
		   		 	 #derefQuery(CN, V, QUERY)
		   		 	 #derefFromContext(C2, OBJ)"/>

    <NLPattern name="q.howmany-X-that-not-verb-Y"
    		   head="perf.q.howmany(LISTENER, V, #and(QUERY,#not(#cons(VERB:[symbol],V,OBJ))))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'how' 'many' 
		   		 	 nounPhrase(XN, NN, PN, CN)
		   		 	 ('that'|'who')
		   		 	 ('do'|'does') 'not'
		   		 	 verb(VERB, N, P, [present-tense])
		   		 	 nounPhrase(X2, N2, P2, C2)
		   		 	 (verb('verb.be'[symbol], N3, P3, [present-tense]) 'there' |
		   		 	  (verb('verb.do'[symbol], N3, P3, [present-tense]) | verb('verb.can'[symbol], N3, P3, [present-tense]))
		   		 	 'you' verb('verb.see'[symbol], N4, P4, [present-tense]))
		   		 	 ('!'|'?')* 
		   		 	 #derefQuery(CN, V, QUERY)
		   		 	 #derefFromContext(C2, OBJ)"/>

 	<!-- perf.q.when patterns --> 
    <NLPattern name="q.when-action"
    		   head="perf.q.when(LISTENER, #cons(VERB,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'when' 'did' 
		   		 	 nounPhrase(X, N, P, C) verb(VERB, NV, PV, [infinitive-tense]) 
		   		 	 nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)
		   		 	 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.when-day-action"
    		   head="perf.q.when(LISTENER, #cons(VERB,SUBJECT,OBJECT), UNIT:[time.unit])"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'what' noun(UNIT,N) 'did' 
		   		 	 nounPhrase(X, N, P, C) verb(VERB, NV, PV, [infinitive-tense]) 
		   		 	 nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)
		   		 	 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.when-action-no-object"
    		   head="perf.q.when(LISTENER, #cons(VERB,SUBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'when' 'did' 
		   		 	 nounPhrase(X, N, P, C) verb(VERB, NV, PV, [infinitive-tense]) ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.when-passive-action"
    		   head="perf.q.when(LISTENER, #cons(VERB,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'when' verb('verb.be'[symbol], N, P, [past-tense])
		   		 	 nounPhrase(X, N, P, C) verb(VERB, NV, PV, [participle-tense]) ('!'|'?')* 
		   		 	 #derefFromContext(C, OBJECT)"/>

    <NLPattern name="q.when-go-action"
    		   head="perf.q.when(LISTENER, verb.go-to(SUBJECT,#cons(VERB,SUBJECT,OBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'when' 'did' 
		   		 	 nounPhrase(X, N, P, C) 
		   		 	 verb('verb.go-to'[symbol], NV, PV, [infinitive-tense])
		   		 	 verb(VERB, NV, PV, [infinitive-tense]) nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)
		   		 	 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.when-go-action2"
    		   head="perf.q.when(LISTENER, verb.go-to(SUBJECT,#cons(VERB,SUBJECT,OBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'when' 'did' 
		   		 	 nounPhrase(X, N, P, C) 
		   		 	 verb('verb.go-to'[symbol], NV, PV, [infinitive-tense])
		   		 	 verb(VERB, NV, PV, [infinitive-tense]) noun(OBJECT, [plural]) ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.when-relation"
    		   head="perf.q.when(LISTENER, #cons(PREPOSITION,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'when' 'was' 
		   		 	 nounPhrase(X, N, P, C) 
		   		 	 preposition(PREPOSITION)
 					 nounPhrase(X2, N2, P2, C2) ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)
		   		 	 #derefFromContext(C2, OBJECT)"/>

    <NLPattern name="q.when-property"
    		   head="perf.q.when(LISTENER, #cons(ADJECTIVE,SUBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'when' 'was' 
		   		 	 nounPhrase(X, N, P, C) 
		   		 	 adjective(ADJECTIVE)  ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.when-property-unit"
    		   head="perf.q.when(LISTENER, #cons(ADJECTIVE,SUBJECT), UNIT:[time.unit])"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'what' noun(UNIT,N) 'was' 
		   		 	 nounPhrase(X, N2, P, C) 
		   		 	 adjective(ADJECTIVE)  ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="q.when-phrasal"
    		   head="perf.q.when(LISTENER, #cons(VERB,SUBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		   		 	 'when' 'did'
		   		 	 nounPhrase(X, N, P, C) 
		   		 	 phrasal-verb(VERB, N2, P2, T2, PREP)
		   		 	 #token(PREP)
		   		 	 ('!'|'?')* 
		   		 	 #derefFromContext(C, SUBJECT)"/>

 	<!-- 'which' patterns --> 
    <NLPattern name="which-is-my"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, QUERY)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'which' verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) ('!'|'?')* 
    		   		 #derefQuery(C, QUERY_VARIABLE, QUERY)"/>
    <NLPattern name="which-noun-is-mine"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, QUERY)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'which' noun(NOUN,N2) verb('verb.be'[symbol], N, P, [present-tense])
			   		 possessive-pronoun(PP2, [singular], G3, P3) ('!'|'?')* 
    		   		 #derefQuery(#and(#cons(PP2, NOUN, N2), noun(NOUN, N2)), QUERY_VARIABLE, QUERY)"/>
    <NLPattern name="which-object-should-action"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(#cons(X, QUERY_VARIABLE), goal(SUBJECT, #cons(VERB, SUBJECT, QUERY_VARIABLE))))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'which' 
			   		 noun(X, N)
			   		 verb('verb.shall'[symbol], N2, P2, T2)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 verb(VERB, N4, P4, [infinitive-tense])
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C3, SUBJECT)"/>
    <NLPattern name="which-direction-is-X-facing"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, facing-direction(SUBJECT, QUERY_VARIABLE))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'which' noun('cardinal-direction'[cardinal-direction], N0) 
			   		 verb('verb.be'[symbol], N, P, T)
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 (verb('verb.face'[symbol], N3, P3, [gerund-tense])|
			   		  verb('verb.look-at'[symbol], N3, P3, [gerund-tense])|
			   		  'looking')
			   		 ('!'|'?')* 
    		   		 #derefFromContext(C2, SUBJECT)"/>
    <NLPattern name="which-query-do-X-verb"
    		   head="perf.q.query(LISTENER, QUERY_VARIABLE, #and(#cons(VERB, SUBJECT, QUERY_VARIABLE), QUERY))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ('which'|'what') nounPhrase(X0, N0, P0, C0)
			   		 verb('verb.do'[symbol], N, P, T)
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 verb(VERB, N3, P3, T3)
			   		 ('!'|'?')* 
    		   		 #derefQuery(C0, QUERY_VARIABLE, QUERY)
    		   		 #derefFromContext(C2, SUBJECT)"/>

    <NLPattern name="which-is-superlative-object"
    		   head="perf.q.query(LISTENER, V, #and(#cons(NOUN, V), #cons(SUPERLATIVE, V, OBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('which'|'what') verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' adjective(SUPERLATIVE) #subsumes([superlative-adjective], SUPERLATIVE)
			   		 noun(NOUN, N2) 
			   		 ('to'|'from')
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT)"/>
    <NLPattern name="which-is-superlative-object2"
    		   head="perf.q.query(LISTENER, V, #and(#cons(NOUN, V), #cons(SUPERLATIVE, V, OBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('which'|'what') verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' noun(NOUN, N2) 
			   		 adjective(SUPERLATIVE) #subsumes([superlative-adjective], SUPERLATIVE) ('to'|'from')
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT)"/>
    <NLPattern name="which-is-nearest"
    		   head="perf.q.query(LISTENER, V, #and(#cons(NOUN, V), space.nearest-to(V, SPEAKER)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('which'|'what') verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' adjective('space.nearest-to'[space.nearest-to])
			   		 noun(NOUN, N2) ('!'|'?')*"/>
    <NLPattern name="which-is-farthest"
    		   head="perf.q.query(LISTENER, V, #and(#cons(NOUN, V), space.farthest-from(V, SPEAKER)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 ('which'|'what') verb('verb.be'[symbol], N, P, [present-tense]) 
			   		 'the' adjective('space.farthest-from'[space.farthest-from])
			   		 noun(NOUN, N2) ('!'|'?')*"/>

    <NLPattern name="lights-on1"
    		   head="perf.request.action.internal(LISTENER,verb.switch-on(LISTENER,OBJECT))"
		   	   body="('light'|'lights') 'on'
			   		 #derefFromContext(#and(close-demonstrative-determiner(X:'light'[light], N:[singular]), noun(X,N)), OBJECT)"
			   priority="200"/>
    <NLPattern name="lights-off1"
    		   head="perf.request.action.internal(LISTENER,verb.switch-off(LISTENER,OBJECT))"
		   	   body="('light'|'lights') 'off'
			   		 #derefFromContext(#and(close-demonstrative-determiner(X:'light'[light], N:[singular]), noun(X,N)), OBJECT)"
			   priority="200"/>
    <NLPattern name="lights-on2"
    		   head="perf.request.action.internal(LISTENER,verb.switch-on(LISTENER,OBJECT))"
		   	   body="verb('verb.switch-on'[symbol], N:[singular], P, [present-tense]) 'the' ('light'|'lights')
			   		 #derefFromContext(#and(close-demonstrative-determiner(X:'light'[light], N), noun(X,N)), OBJECT)"
			   priority="200"/>
    <NLPattern name="lights-off2"
    		   head="perf.request.action.internal(LISTENER,verb.switch-off(LISTENER,OBJECT))"
		   	   body="verb('verb.switch-off'[symbol], N:[singular], P, [present-tense]) 'the' ('light'|'lights')
			   		 #derefFromContext(#and(close-demonstrative-determiner(X:'light'[light], N), noun(X,N)), OBJECT)"
			   priority="200"/>
    <NLPattern name="lights-on3"
    		   head="perf.request.action.internal(LISTENER,verb.switch-on(LISTENER,OBJECT))"
		   	   body="verb('verb.switch'[symbol], N:[singular], P, [present-tense]) 'the' ('light'|'lights') 'on'
			   		 #derefFromContext(#and(close-demonstrative-determiner(X:'light'[light], N), noun(X,N)), OBJECT)"
			   priority="200"/>
    <NLPattern name="lights-off3"
    		   head="perf.request.action.internal(LISTENER,verb.switch-off(LISTENER,OBJECT))"
		   	   body="verb('verb.switch'[symbol], N:[singular], P, [present-tense]) 'the' ('light'|'lights') 'off'
			   		 #derefFromContext(#and(close-demonstrative-determiner(X:'light'[light], N), noun(X,N)), OBJECT)"
			   priority="200"/>

 	<!-- request to stop an action --> 
    <NLPattern name="stopaction-gerund"
    		   head="perf.request.stopaction(LISTENER,#cons(VERB,LISTENER))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [('please'|'now') [',']] verb('verb.stop'[symbol], N, P, [present-tense]) 
			   		 verb(VERB, N2, P2, [gerund-tense]) ('!'|'.')*"/>
    <NLPattern name="stopaction-gerund-obj"
    		   head="perf.request.stopaction(LISTENER,#cons(VERB,LISTENER,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [('please'|'now') [',']] verb('verb.stop'[symbol], N, P, [present-tense]) 
			   		 verb(VERB, N2, P2, [gerund-tense]) 
			   		 nounPhrase(X, N3, P3, C) ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>
    <NLPattern name="stopaction-talking-to-obj"
    		   head="perf.request.stopaction(LISTENER,action.talk(LISTENER,EMPTY,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [('please'|'now') [',']] verb('verb.stop'[symbol], N, P, [present-tense]) 
			   		 verb('action.talk'[symbol], N2, P2, [gerund-tense]) 
			   		 'to'
			   		 nounPhrase(X, N3, P3, C) ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>
    <NLPattern name="stopaction-donot"
    		   head="perf.request.stopaction(LISTENER,#cons(VERB,LISTENER,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [('please'|'now') [',']] verb('verb.do'[symbol], N, P, [present-tense]) 'not'
			   		 verb(VERB, N2, P2, [present-tense]) 
			   		 nounPhrase(X, N3, P3, C) ('!'|'.')*
			   		 #derefFromContext(C, OBJECT)"/>

 	<!-- why question patterns --> 
    <NLPattern name="why-gerund1"
    		   head="perf.q.why(LISTENER,#cons(V,SUBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb(V, N2, P2, [gerund-tense]) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="why-gerund2"
    		   head="perf.q.why(LISTENER,#cons(V,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb(V, N2, P2, [gerund-tense]) 
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C3, OBJECT)"/>
    <NLPattern name="why-do-1"
    		   head="perf.q.why(LISTENER,#cons(V,SUBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.do'[symbol], N, P, T) 
			   		 nounPhrase(X, N2, P2, C) 
			   		 verb(V, N3, P3, [present-tense]) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="why-do-2"
    		   head="perf.q.why(LISTENER,#cons(V,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.do'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb(V, N2, P2, [present-tense]) 
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C3, OBJECT)"/>
    <NLPattern name="why-do-adverb"
    		   head="perf.q.why(LISTENER,#cons(V,SUBJECT,LSORT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.do'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb(V, N2, P2, [present-tense]) 
			   		 adverb(LSYMBOL) #symbolToSort(LSYMBOL,LSORT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="why-donot-1"
    		   head="perf.q.why(LISTENER,#not(#cons(V,SUBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.do'[symbol], N, P, T) 'not'
			   		 nounPhrase(X, N2, P2, C) 
			   		 verb(V, N3, P3, [present-tense]) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="why-donot-2"
    		   head="perf.q.why(LISTENER,#not(#cons(V,SUBJECT,OBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.do'[symbol], N, P, T) 'not'
			   		 nounPhrase(X, N, P, C) 
			   		 verb(V, N2, P2, [present-tense]) 
			   		 nounPhrase(X3, N3, P3, C3) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C3, OBJECT)"/>
    <NLPattern name="why-donot-2-anything"
    		   head="perf.q.why(LISTENER,#not(#cons(V,SUBJECT,'pronoun.anything'[pronoun.anything])))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 (verb('verb.do'[symbol], N, P, T)|verb('verb.can'[symbol], N, P, T)) 'not'
			   		 nounPhrase(X, N, P, C) 
			   		 verb(V, N2, P2, [present-tense]) 
			   		 ('anything'|'nothing'|'a' 'thing')
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="why-property"
    		   head="perf.q.why(LISTENER,#cons(LSYMBOL,SUBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C) 
			   		 ['so']
			   		 adjective(LSYMBOL)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="why-property-with-value"
    		   head="perf.q.why(LISTENER,#cons(LSYMBOL_PARENT:[property-with-value],SUBJECT,LSYMBOL:[property-with-value]))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C) 
			   		 ['so']
			   		 adjective(LSYMBOL) #sortParent(LSYMBOL, LSYMBOL_PARENT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>
    <NLPattern name="why-property2"
    		   head="perf.q.why(LISTENER,#cons(LSYMBOL,SUBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.do'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb('verb.feel'[symbol], N2, P2, [infinitive-tense]) 
			   		 ['so']
			   		 adjective(LSYMBOL)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="why-property-with-value2"
    		   head="perf.q.why(LISTENER,#cons(LSYMBOL_PARENT:[property-with-value],SUBJECT,LSYMBOL:[property-with-value]))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.do'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C) 
			   		 verb('verb.feel'[symbol], N2, P2, [infinitive-tense])
			   		 ['so']
			   		 adjective(LSYMBOL) #sortParent(LSYMBOL, LSYMBOL_PARENT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>		
    <NLPattern name="why-property-with-value3"
    		   head="perf.q.why(LISTENER,#cons(LSYMBOL:[property-with-value],SUBJECT,LSYMBOL2))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 'the' noun(LSYMBOL, N2)
			   		 ('of'|'in') nounPhrase(X, N3, P3, C)  
			   		 ['so'] adjective(LSYMBOL2) 
			   		 #symbolToSort(LSYMBOL, LSYMBOLSORT) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"
			   priority="200"/>
    <NLPattern name="why-property-with-value4"
    		   head="perf.q.why(LISTENER,#cons(LSYMBOL:[property-with-value],LOCATION,LSYMBOL2))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 ['the'] noun(LSYMBOL, N2)
			   		 ['so'] adjective(LSYMBOL2) 
					 adverb(X3:[space.location]) ('!'|'?')*
					 #derefFromContext(noun(X3,[singular]), LOCATION)
			   		 #symbolToSort(LSYMBOL, LSYMBOLSORT)"/>

    <NLPattern name="why-property-with-value5"
    		   head="perf.q.why(LISTENER,#cons(PROP:[property-with-value],OBJECT,VALUE))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 properNounCompound(X, N2) '\'s'
			   		 noun(PROP, N3)
			   		 ['so'] adjective(VALUE)  ('!'|'?')*
					 #derefFromContext(proper-noun(X, N2), OBJECT)"
			   priority="200"/>

    <NLPattern name="why-gravity-implied-here"
    		   head="perf.q.why(LISTENER, gravity(LOCATION,LSYMBOL2))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 ['the'] noun('gravity'[gravity], N2)
			   		 ['so'] adjective(LSYMBOL2) 
					 ('!'|'?')*
					 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>

    <NLPattern name="why-relation"
    		   head="perf.q.why(LISTENER,#cons(LSYMBOL,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C)
			   		 preposition(LSYMBOL)
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(C2, OBJECT)"/>
    <NLPattern name="why-relation-adverb"
    		   head="perf.q.why(LISTENER,space.at(SUBJECT,LSORT:[space.location]))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C)
			   		 adverb(LSYMBOL)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #symbolToSort(LSYMBOL, LSORT)"/>
    <NLPattern name="why-relation-adverb2"
    		   head="perf.q.why(LISTENER,space.at(SUBJECT,LSORT:[space.location]))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'what' 
			   		 verb('verb.be'[symbol], N, P, T) 
			   		 nounPhrase(X, N, P, C)
			   		 verb('verb.do'[symbol], N2, P2, [gerund-tense]) 
			   		 adverb(LSYMBOL)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #symbolToSort(LSYMBOL, LSORT)"/>
    <NLPattern name="why-is-there"
    		   head="perf.q.why(LISTENER, QUERY)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 'there'
			   		 indefinite-article('a'[symbol], [singular]) nounPhraseNoDeterminer(X, [singular], P2, C)
			   		 ('!'|'?')*
			   		 #derefQuery(C, QUERY_V, QUERY)"/>
    <NLPattern name="why-is-there-in"
    		   head="perf.q.why(LISTENER, #and(#cons(PREP, QUERY_V, OBJECT), QUERY))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) ['there']
			   		 indefinite-article('a'[symbol], [singular]) nounPhraseNoDeterminer(X, [singular], P2, C2)
			   		 preposition(PREP)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT)
			   		 #derefQuery(C2, QUERY_V, QUERY)"/>
    <NLPattern name="why-is-there-in-here"
    		   head="perf.q.why(LISTENER, #and(space.at(QUERY_V, OBJECT), QUERY))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) ['there']
			   		 indefinite-article('a'[symbol], [singular]) nounPhraseNoDeterminer(X, [singular], P2, C3)
			   		 ['in'] 'here'
			   		 ('!'|'?')*
			   		 #derefFromContext(noun('space.here'[space.here], [singular]), OBJECT)
			   		 #derefQuery(C3, QUERY_V, QUERY)"
			   priority="150"/>
    <NLPattern name="why-is-there-not"
    		   head="perf.q.why(LISTENER,#not(#cons(SORT,QUERY_VARIABLE)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 'there' 'no'
			   		 noun(SORT,N2)
			   		 ('!'|'?')*"/>
    <NLPattern name="why-is-there-not-here"
    		   head="perf.q.why(LISTENER,#not(#and(#cons(SORT,QUERY_VARIABLE), space.at(QUERY_VARIABLE, LOCATION))))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.be'[symbol], N, P, T) 'there' 'no'
			   		 noun(SORT,N2)
			   		 noun(L3:[space.location],N3)
			   		 ('!'|'?')*
			   		 #derefFromContext(noun(L3, N3), LOCATION)"/>
    <NLPattern name="why-there-is-not"
    		   head="perf.q.why(LISTENER,#not(#cons(SORT,QUERY_VARIABLE)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 'there' verb('verb.be'[symbol], N, P, T) 'no'
			   		 noun(SORT,N2)
			   		 ('!'|'?')*"/>
    <NLPattern name="why-can-not-action"
    		   head="perf.q.why(LISTENER,#not(verb.can(SUBJECT,#cons(VERB,SUBJECT,OBJECT))))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.can'[symbol], N, P, T) 'not' nounPhrase(X2, N2, P2, C2)
			   		 verb(VERB, N3, P3, T3)
			   		 nounPhrase(X4, N4, P4, C4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)"/>

    <NLPattern name="why-can-not2-action"
    		   head="perf.q.why(LISTENER,#not(verb.can(SUBJECT,#cons(VERB,SUBJECT,OBJECT))))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.can'[symbol], N, P, T) nounPhrase(X2, N2, P2, C2) 'not'
			   		 verb(VERB, N3, P3, T3)
			   		 nounPhrase(X4, N4, P4, C4)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)"/>

    <NLPattern name="why-can-not2-action-3args"
    		   head="perf.q.why(LISTENER,#not(verb.can(SUBJECT,#cons(VERB,SUBJECT,OBJECT,OBJECT2))))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'why' 
			   		 verb('verb.can'[symbol], N, P, T) nounPhrase(X2, N2, P2, C2) 'not'
			   		 verb(VERB, N3, P3, T3)
			   		 nounPhrase(X4, N4, P4, C4)
			   		 nounPhrase(X5, N5, P5, C5)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)
			   		 #derefFromContext(C4, OBJECT)
			   		 #derefFromContext(C5, OBJECT2)"/>

	<NLPattern name="why-last-human"
			   head="perf.q.why(LISTENER, #not(#and(!=(QUERY_V, SUBJECT), #and(human(QUERY_V), alive(QUERY_V)))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'why'
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 'the' ('last'|'only')
			   		 noun('human'[human], N2) ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
	<NLPattern name="why-last-human-here"
			   head="perf.q.why(LISTENER, #not(#and(!=(QUERY_V, SUBJECT), #and(human(QUERY_V), #and(alive(QUERY_V), space.at(QUERY_V, LOCATION))))))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'why'
			   		 verb('verb.be'[symbol], N, P, [present-tense]) nounPhrase(X, N, P, C) 
			   		 'the' ('last'|'only')
			   		 noun('human'[human], N2) 
			   		 noun(L3:[space.location], N3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)
			   		 #derefFromContext(noun(L3, N3), LOCATION)"/>

	<NLPattern name="why-is-it-adj-in-X"
			   head="perf.q.why(LISTENER, #cons(ADJ, OBJ))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'why'
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'it'
			   		 ['so']
			   		 adjective(ADJ)
			   		 preposition('space.at'[space.at])
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJ)"/>
	<NLPattern name="why-is-it-adj-in-here"
			   head="perf.q.why(LISTENER, #cons(ADJ, LOCATION))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'why'
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'it'
			   		 ['so']
			   		 adjective(ADJ)
			   		 [preposition('space.at'[space.at])]
			   		 'here'
			   		 ('!'|'?')*
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>
	<NLPattern name="why-no-light-special-case"
			   head="perf.q.why(LISTENER, dark(OBJ))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'why'
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'there'
			   		 'no' 'light'
			   		 preposition('space.at'[space.at])
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJ)"/>
	<NLPattern name="why-no-light-special-case-here"
			   head="perf.q.why(LISTENER, dark(LOCATION))"
			   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'why'
			   		 verb('verb.be'[symbol], N, P, [present-tense]) 'there'
			   		 'no' 'light'
			   		 [preposition('space.at'[space.at])]
			   		 'here'
			   		 ('!'|'?')*
			   		 #derefFromContext(noun('space.here'[space.here],[singular]), LOCATION)"/>
    <NLPattern name="why-do-phrasal-verb1"
    		   head="perf.q.why(LISTENER, #cons(VERB, SUBJECT, OBJECT))"
    		   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
			   		 'why'
			   		 verb('verb.do'[symbol], N, P, T)
			   		 nounPhrase(X2, N2, P2, CO2)
    		   		 phrasal-verb(VERB, N3, P3, T3, PREP)
    		   		 ( nounPhrase(X4, N4, P4, CO4) #token(PREP) |
    		   		   #token(PREP) nounPhrase(X4, N4, P4, CO4) )
    		   		 ('!'|'?')*
    		         #derefFromContext(CO2, SUBJECT)
    		         #derefFromContext(CO4, OBJECT)"/>

    <NLPattern name="why-donot-know-special-form"
    		   head="perf.q.why(LISTENER,#not(verb.know(SUBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'how' 
			   		 verb('verb.do'[symbol], N, P, T) 'not'
			   		 nounPhrase(X, N2, P2, C) 
			   		 verb('verb.know'[symbol], N3, P3, [present-tense]) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>
    <NLPattern name="why-donot-know-special-form2"
    		   head="perf.q.why(LISTENER,#not(verb.know(SUBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'how' ['come']
			   		 nounPhrase(X, N2, P2, C) 
			   		 verb('verb.do'[symbol], N, P, T) 'not'
			   		 verb('verb.know'[symbol], N3, P3, [present-tense]) 
			   		 ('!'|'?')*
			   		 #derefFromContext(C, SUBJECT)"/>

    <NLPattern name="why-do-np-verb-noun"
    		   head="perf.q.why(LISTENER,#cons(VERB, SUBJECT, NOUN))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ('how' 'come'|'why')
			   		 verb('verb.do'[symbol], N, P, T)
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 verb(VERB, N3, P3, [infinitive-tense]) 
			   		 (noun(NOUN,[plural]) | noun(NOUN,[uncountable]) |
			   		  indefinite-article('a'[symbol], [singular]) noun(NOUN,[singular]))
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/>

    <NLPattern name="why-verb-present-continuous-noun"
    		   head="perf.q.why(LISTENER,#cons(VERB, SUBJECT, NOUN))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 ('how' 'come'|'why')
			   		 verb('verb.be'[symbol], N, P, T)
			   		 nounPhrase(X2, N2, P2, C2) 
			   		 verb(VERB, N3, P3, [gerund-tense]) 
			   		 (noun(NOUN,[plural]) | noun(NOUN,[uncountable]) |
			   		  indefinite-article('a'[symbol], [singular]) noun(NOUN,[singular]))
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, SUBJECT)"/>

	<!-- whose rules -->
    <NLPattern name="whose-noun-is-this"
    		   head="perf.q.query(LISTENER, QUERY_V, verb.own(QUERY_V, OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'whose' 
			   		 noun(X, N)
			   		 verb('verb.be'[symbol], N2, P2, [present-tense])
			   		 demonstrative-determiner(DET, N3)
			   		 ('!'|'?')*
			   		 #derefFromContext(#and(noun(X, N), #cons(DET, X, N3)), OBJECT)"/>

    <NLPattern name="who-is-the-owner-object"
    		   head="perf.q.query(LISTENER, QUERY_V, verb.own(QUERY_V, OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'who' 
			   		 verb('verb.be'[symbol], N, P, [present-tense])
			   		 'the' noun('owner'[owner], N2)
			   		 'of'
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT)"/>

	<!-- perf.q.distance rules -->
    <NLPattern name="distance-howfar-from-X-is-Y"
    		   head="perf.q.distance(LISTENER, OBJECT1, OBJECT2)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'how' 'far' ['away'] 
			   		 'from'
			   		 nounPhrase(X2, N2, P2, C2)
			   		 verb('verb.be'[symbol], N, P, T)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT1)
			   		 #derefFromContext(C3, OBJECT2)"/>

    <NLPattern name="distance-howfar-from-X-is-Y-unit"
    		   head="perf.q.distance(LISTENER, OBJECT1, OBJECT2, UNIT:[distance.unit])"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'how' 'far' ['away'] 
			   		 'from'
			   		 nounPhrase(X2, N2, P2, C2)
			   		 verb('verb.be'[symbol], N, P, T)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 [',']
			   		 'in' noun(UNIT_SYMBOL, N4) #symbolToSort(UNIT_SYMBOL, UNIT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT1)
			   		 #derefFromContext(C3, OBJECT2)"/>

    <NLPattern name="distance-howfar-is-X"
    		   head="perf.q.distance(LISTENER, SPEAKER, OBJECT2)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'how' 'far' ['away'] 
			   		 verb('verb.be'[symbol], N, P, T)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT2)"/>

    <NLPattern name="distance-howfar-is-X-unit"
    		   head="perf.q.distance(LISTENER, SPEAKER, OBJECT2, UNIT:[distance.unit])"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'how' 'far' ['away'] 
			   		 verb('verb.be'[symbol], N, P, T)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 [','] 'in' noun(UNIT_SYMBOL, N4) #symbolToSort(UNIT_SYMBOL, UNIT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT2)"/>

    <NLPattern name="distance-what-distance-to-X"
    		   head="perf.q.distance(LISTENER, SPEAKER, OBJECT2)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'what'
			   		 verb('verb.be'[symbol], N, P, T)
			   		 ['the'] 'distance' 'to'
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT2)"/>

    <NLPattern name="distance-what-distance-to-X-unit"
    		   head="perf.q.distance(LISTENER, SPEAKER, OBJECT2, UNIT:[distance.unit])"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'what'
			   		 verb('verb.be'[symbol], N, P, T)
			   		 ['the'] 'distance' 'to'
			   		 nounPhrase(X3, N3, P3, C3)
			   		 [','] 'in' noun(UNIT_SYMBOL, N4) #symbolToSort(UNIT_SYMBOL, UNIT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT2)"/>

    <NLPattern name="distance-what-distance-X-Y"
    		   head="perf.q.distance(LISTENER, OBJECT1, OBJECT2)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'what'
			   		 verb('verb.be'[symbol], N, P, T)
			   		 ['the'] 'distance'
			   		 ('between'|'from')
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ('and'|'to')
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT1)
			   		 #derefFromContext(C3, OBJECT2)"/>

    <NLPattern name="distance-what-distance-X-Y-unit"
    		   head="perf.q.distance(LISTENER, OBJECT1, OBJECT2, UNIT:[distance.unit])"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'what'
			   		 verb('verb.be'[symbol], N, P, T)
			   		 ['the'] 'distance'
			   		 ('between'|'from')
			   		 nounPhrase(X2, N2, P2, C2)
			   		 ('and'|'to')
			   		 nounPhrase(X3, N3, P3, C3)
			   		 [','] 'in' noun(UNIT_SYMBOL, N4) #symbolToSort(UNIT_SYMBOL, UNIT)
			   		 ('!'|'?')*
			   		 #derefFromContext(C2, OBJECT1)
			   		 #derefFromContext(C3, OBJECT2)"/>

    <NLPattern name="distance-how-many-unit-away-is-X"
    		   head="perf.q.distance(LISTENER, SPEAKER, OBJECT2, UNIT:[distance.unit])"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 'how' 'many'
			   		 noun(UNIT_SYMBOL, N4) #symbolToSort(UNIT_SYMBOL, UNIT)
			   		 ['away']
			   		 verb('verb.be'[symbol], N, P, T)
			   		 nounPhrase(X3, N3, P3, C3)
			   		 ('!'|'?')*
			   		 #derefFromContext(C3, OBJECT2)"/>

	<!-- e.g.: "I cannot parse the sentence" -->
    <NLPattern name="cannot-verb"
    		   head="perf.inform(LISTENER,#not(verb.can(OBJECT,#cons(VERB, OBJECT, 'sentence'[sentence]))))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
			   		 nounPhrase(X, N, P, C)
			   		 verb('verb.can'[symbol], NV, PV, TV) 'not'
			   		 verb(VERB, NV2, PV2, [infinitive-tense]) 
			   		 'the' 'sentence'
			   		 ('!'|'?')*
			   		 #derefFromContext(C, OBJECT)"
			   priority="150"/>

 	<!-- followup question patterns --> 
    <NLPattern name="where-followup"
    		   head="perf.q.whereis(LISTENER)"
		   	   body="'where' ('!'|'?')*"/>

    <NLPattern name="where-followup-with-location"
    		   head="perf.q.whereis(LISTENER, LOCATION, space.at(LOCATION, LOCATION_CONSTRAINT))"
		   	   body="'where' 
		   	   		 preposition('space.at'[space.at])
			   		 nounPhrase(X, N, P, C)
			   		 #derefFromContext(C, LOCATION_CONSTRAINT)
		   	   		 ('!'|'?')*"/>

    <NLPattern name="howmany-followup"
    		   head="perf.q.howmany(LISTENER)"
		   	   body="'how' 'many' ('!'|'?')*"/>

    <NLPattern name="why-followup"
    		   head="perf.q.why(LISTENER)"
		   	   body="'why' ('!'|'?')*"/>

    <NLPattern name="why-followup2"
    		   head="perf.q.why(LISTENER)"
		   	   body="'how' 'come' ('!'|'?')*"/>

    <NLPattern name="why-not-followup"
    		   head="perf.q.why(LISTENER)"
		   	   body="'why' 'not' ('!'|'?')*"/>

    <NLPattern name="who-followup"
    		   head="perf.q.query-followup(LISTENER,'character'[character])"
		   	   body="'who' ('!'|'?')*"/>

    <NLPattern name="which-followup"
    		   head="perf.q.query-followup(LISTENER,'object'[object])"
		   	   body="'which' [('one'|'ones')] ('!'|'?')*"/>

    <NLPattern name="which-followup2"
    		   head="perf.q.query-followup(LISTENER,'any'[any])"
		   	   body="['like'] 'what' ('!'|'?')*"/>

    <NLPattern name="which-followup3"
    		   head="perf.q.query-followup(LISTENER,'any'[any])"
		   	   body="'what' 'is' ['it'] ('!'|'?')*"
		   	   priority="150"/>

    <NLPattern name="which-followup4"
    		   head="perf.q.query-followup(LISTENER, NOUN)"
		   	   body="['i' 'mean' [',']] ('which'|'what') noun(NOUN, N) ('!'|'?')*"/>

    <NLPattern name="which-how"
    		   head="perf.q.how(LISTENER)"
		   	   body="'how' [('do'|'can') 'i' 'do' 'that'] ('!'|'?')*"/>

 	<!-- perf.ack.denyrequest patterns --> 
    <NLPattern name="denyrequest"
			   head="perf.ack.denyrequest(LISTENER)"
		   	   body="'i' 'can' 'not' 'do' 'that' ('!'|'.')*"/>

 	<!-- cause explanation patterns --> 
    <NLPattern name="cause-saxon"
    		   head="perf.inform(LISTENER, relation.cause(#cons(X2:[property-with-value], OBJECT, X3), CLAUSE2))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
    		           nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
    		         nounPhrase(X, N, P, C) '\'s' noun(X2, [singular])
			   		 verb('verb.be'[symbol], N, P, T) adjective(X3) 
			   		 ('because'|'because of')
		   	   		 perf.inform(LISTENER, CLAUSE2)
		   	   		 #derefFromContext(C, OBJECT)"/> 

    <NLPattern name="cause2"
    		   head="perf.inform(LISTENER, relation.cause(#cons(V,SUBJECT1,OBJECT1), CLAUSE2))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
					 nounPhrase(X, N, P, C)  verb(V, N, P, T) nounPhrase(X2, N2, P2, C2)
					 ('because'|'because of')
		   	   		 perf.inform(LISTENER, CLAUSE2)
		   	   		 #derefFromContext(C, SUBJECT1)
		   	   		 #derefFromContext(C2, OBJECT1)"/> 	
    <NLPattern name="cause2-simple"
    		   head="perf.inform(LISTENER, relation.cause(#cons(V,SUBJECT1,OBJECT1),#cons(V3,SUBJECT2,OBJECT2)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
					 nounPhrase(X, N, P, C)  verb(V, N, P, T) nounPhrase(X2, N2, P2, C2)
					 ('because'|'because of')
					 nounPhrase(X3, N3, P3, C3) verb(V3, N3, P3, T3) noun(O2SYMBOL, N4) 
					 ('!'|'.')*
					 #symbolToSort(O2SYMBOL,OBJECT2)
					 #derefFromContext(C, SUBJECT1)
					 #derefFromContext(C2, OBJECT1)
					 #derefFromContext(C3, SUBJECT2)"
			   priority="200"/>

    <NLPattern name="cause1"
    		   head="perf.inform(LISTENER, relation.cause(#cons(V,SUBJECT1), CLAUSE2))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
					 nounPhrase(X, N, P, C)  verb(V, N, P, T)
					 ('because'|'because of')
		   	   		 perf.inform(LISTENER, CLAUSE2)
		   	   		 #derefFromContext(C, SUBJECT1)"/>
    <NLPattern name="cause1-simple"
    		   head="perf.inform(LISTENER, relation.cause(#cons(V,SUBJECT1), #cons(V3,SUBJECT2,OBJECT2)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
					 nounPhrase(X, N, P, C)  verb(V, N, P, T)
					 ('because'|'because of')
					 nounPhrase(X3, N3, P3, C3) verb(V3, N3, P3, T3) noun(O2SYMBOL, N4) 
					 ('!'|'.')*
					 #symbolToSort(O2SYMBOL,OBJECT2)
					 #derefFromContext(C, SUBJECT1)
					 #derefFromContext(C3, SUBJECT2)"
			   priority="200"/>

    <!--NLPattern name="cause1"
    		   head="perf.inform(LISTENER, relation.cause(#cons(V,SUBJECT1,OBJECT1),#cons(V3,SUBJECT2,OBJECT2)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
					 nounPhrase(X, N, P, C)  verb(V, N, P, T) nounPhrase(X2, N2, P2, C2)
					 'because'
					 nounPhrase(X3, N3, P3, C3)  verb(V3, N3, P3, T3) nounPhrase(X4, N4, P4, C4)
					 ('!'|'.')*
					 #derefFromContext(C, SUBJECT1)
					 #derefFromContext(C2, OBJECT1)
					 #derefFromContext(C3, SUBJECT2)
					 #derefFromContext(C4, OBJECT2)
					 "/-->

	<!-- perf.q.how patterns --> 
    <NLPattern name="q.how-verb"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X2, N2, P2, C2)
		           	 verb(VERB, N3, P3, [infinitive-tense]) ('!'|'?')*
					 #derefFromContext(C2, SUBJECT)"/>
    <NLPattern name="q.how-verb-something"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT, [any]))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X2, N2, P2, C2)
		           	 verb(VERB, N3, P3, [infinitive-tense]) 
		           	 [('something'|'anything')] ('!'|'?')*
					 #derefFromContext(C2, SUBJECT)"/>
    <NLPattern name="q.how-verb-object"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X2, N2, P2, C2)
		           	 verb(VERB, N3, P3, [infinitive-tense])
					 nounPhrase(X4, N4, P4, C4) ('!'|'?')*
					 #derefFromContext(C2, SUBJECT)
					 #derefFromContext(C4, OBJECT)"/>
    <NLPattern name="q.how-locationadverb-except-there"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT,LSORT:[space.location]))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 verb(VERB, N2, P2, [infinitive-tense])
					 adverb(LSYMBOL) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #symbolToSort(LSYMBOL, LSORT) #doesnotsubsume([space.there], LSORT)"/>
    <NLPattern name="q.how-there"
    		   head="perf.q.how(LISTENER, #cons(VERB, SUBJECT, LOCATION))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 verb(VERB, N2, P2, [infinitive-tense])
					 'there' ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #derefFromContext(noun('space.location'[space.location], [singular]), LOCATION)"
			   priority="150"/>
    <NLPattern name="q.how-get-locationadverb-except-there"
    		   head="perf.q.how(LISTENER, verb.go(SUBJECT,LSORT:[space.location]))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 verb('verb.get'[symbol], N2, P2, [infinitive-tense])
					 adverb(LSYMBOL)  ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #symbolToSort(LSYMBOL, LSORT) #doesnotsubsume([space.there], LSORT)"
			   priority="200"/>
    <NLPattern name="q.how-get-locationadverb-past"
    		   head="perf.q.how(LISTENER, #and(V:verb.go(SUBJECT,LOCATION), time.past(V)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' verb('verb.do'[symbol], N, P, [past-tense])
		           	 nounPhrase(X, N, P, C)
		           	 verb('verb.get'[symbol], N2, P2, [infinitive-tense])
					 noun(X3:[space.location], N3) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #derefFromContext(noun(X3,N3), LOCATION)"/>
    <NLPattern name="q.how-noun"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT,LSORT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 verb(VERB, N2, P2, [infinitive-tense])
					 indefinite-article(ART, [singular]) (noun(LSYMBOL, [singular])|noun(LSYMBOL, [uncountable])) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #symbolToSort(LSYMBOL,LSORT)"/>
    <NLPattern name="q.how-more-noun"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT,LSORT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 verb(VERB, N2, P2, [infinitive-tense])
					 [('some'|'a' ['little'] 'bit')] ('more'|'additional'|'extra') 
					 (noun(LSYMBOL, [singular])|noun(LSYMBOL, [uncountable])) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #symbolToSort(LSYMBOL,LSORT)"/>

    <NLPattern name="q.how-noun-phrasal1"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT,LSORT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 phrasal-verb(VERB, N2, P2, [infinitive-tense], PREP)
		           	 #token(PREP)
					 (indefinite-article(ART, [singular]) noun(LSYMBOL, [singular]) | noun(LSYMBOL, [plural]) | noun(LSYMBOL, [uncountable])) ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #symbolToSort(LSYMBOL,LSORT)"/>
    <NLPattern name="q.how-noun-phrasal2"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT,LSORT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 phrasal-verb(VERB, N2, P2, [infinitive-tense], PREP)
					 (indefinite-article(ART, [singular]) noun(LSYMBOL, [singular]) | noun(LSYMBOL, [plural]) | noun(LSYMBOL, [uncountable]))
 		           	 #token(PREP)
					 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #symbolToSort(LSYMBOL,LSORT)"/>

    <NLPattern name="q.how-object"
    		   head="perf.q.how(LISTENER, #cons(VERB,SPEAKER,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' 'to' verb(VERB, N2, P2, [infinitive-tense])
					 nounPhrase(X3, N3, P3, C3) ('!'|'?')*
					 #derefFromContext(C3, OBJECT)"/>
    <NLPattern name="q.how-haveable-property-with-value"
    		   head="perf.q.how(LISTENER, verb.get(SUBJECT, #cons(PROPERTY:[haveable-property-with-value], SUBJECT, OBJECT)))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 (verb('verb.get'[symbol], N2, P2, [infinitive-tense]) |
		           	  verb('verb.obtain'[symbol], N2, P2, [infinitive-tense]))
		           	 preposition(PROPERTY) 
		           	 nounPhrase(X3, N3, P3, C3) 
					 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #derefFromContext(C3, OBJECT)"
			   priority="200"/>
    <NLPattern name="q.how-haveable-property-with-value-verb"
    		   head="perf.q.how(LISTENER, verb.get(SUBJECT, #cons(PROPERTY:[haveable-property-with-value], SUBJECT, #cons(VERB:[symbol], SUBJECT, OBJECT))))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' (verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		verb('verb.shall'[symbol], N, P, T))
		           	 nounPhrase(X, N, P, C)
		           	 (verb('verb.get'[symbol], N2, P2, [infinitive-tense]) |
		           	  verb('verb.obtain'[symbol], N2, P2, [infinitive-tense]))
		           	 preposition(PROPERTY) 
		           	 verb(VERB, VN, VP, [infinitive-tense])
		           	 nounPhrase(X3, N3, P3, C3) 
					 ('!'|'?')*
					 #derefFromContext(C, SUBJECT)
					 #derefFromContext(C3, OBJECT)"/>

    <NLPattern name="q.how-phrasalverb1-object"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X2, N2, P2, C2)
		           	 phrasal-verb(VERB, N3, P3, [infinitive-tense], PREP)
		           	 #token(PREP)
					 nounPhrase(X4, N4, P4, C4) ('!'|'?')*
					 #derefFromContext(C2, SUBJECT)
					 #derefFromContext(C4, OBJECT)"/>
    <NLPattern name="q.how-phrasalverb2-object"
    		   head="perf.q.how(LISTENER, #cons(VERB,SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X2, N2, P2, C2)
		           	 phrasal-verb(VERB, N3, P3, [infinitive-tense], PREP)
					 nounPhrase(X4, N4, P4, C4) 
		           	 #token(PREP)
					 ('!'|'?')*
					 #derefFromContext(C2, SUBJECT)
					 #derefFromContext(C4, OBJECT)"/>

    <NLPattern name="q.how-go-outside-object"
    		   head="perf.q.how(LISTENER, verb.leave(SUBJECT,OBJECT))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X2, N2, P2, C2)
		           	 (verb('verb.go'[symbol], N3, P3, [infinitive-tense])|verb('verb.get'[symbol], N3, P3, [infinitive-tense])) 
		           	 'outside'
					 nounPhrase(X4, N4, P4, C4) ('!'|'?')*
					 #derefFromContext(C2, SUBJECT)
					 #derefFromContext(C4, OBJECT)"/>

    <NLPattern name="q.how-help"
    		   head="perf.q.how(LISTENER, verb.help(SUBJECT,LISTENER))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X2, N2, P2, C2)
		           	 verb('verb.help'[symbol], N3, P3, [infinitive-tense])
					 ('!'|'?')*
					 #derefFromContext(C2, SUBJECT)"
			   priority="150"/>

    <NLPattern name="q.how-get-from"
    		   head="perf.q.how(LISTENER, verb.get-from(SUBJECT,OBJECT,SUBJECT2))"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 [(conjunction()|'ok'|'okay'|'great'|'and'|'alright'|'hey') [('!'|',')]]
		           	 'how' [(verb('verb.do'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.can'[symbol], N, P, [present-tense]) | 
		           	 		 verb('verb.shall'[symbol], N, P, T))]
		           	 nounPhrase(X2, N2, P2, C2)
		           	 phrasal-verb('verb.get-from'[symbol], N3, P3, T3, PREP)
		           	 nounPhrase(X4, N4, P4, C4)
		           	 #token(PREP)
		           	 nounPhrase(X5, N5, P5, C5)
					 ('!'|'?')*
					 #derefFromContext(C2, SUBJECT)
					 #derefFromContext(C4, OBJECT)
					 #derefFromContext(C5, SUBJECT2)"/>

	<!-- perf.rephrase.entity patterns --> 
    <NLPattern name="rephrase.entity"
    		   head="perf.rephrase.entity(LISTENER, OBJECT)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 ['no' [(','|'!'*)]]
		           	 nounPhrase(X, N, P, C)
		           	 verb('verb.mean'[symbol], N2, P2, T2) ['to' 'say']
		           	 nounPhrase(X3, N3, P3, C3)
					 ('!'|'?')*
					 #derefFromContext(C, SPEAKER)
					 #derefFromContext(C3, OBJECT)"
			   priority="200"/>
    <NLPattern name="rephrase.entity2"
    		   head="perf.rephrase.entity(LISTENER, OBJECT)"
		   	   body="[(nounPhraseNoDeterminer(X_L, [singular], [second-person], C_L) |
		           	 nounPhraseNoDeterminer(X_L, [singular], [third-person], C_L)) #derefFromContext(C_L, LISTENER) [',']]
		           	 ['no' [(','|'!'*)]]
		           	 nounPhrase(X, N, P, C)
		           	 verb('verb.want'[symbol], N2, P2, T2) 'to' 'say'
		           	 nounPhrase(X3, N3, P3, C3)
					 ('!'|'?')*
					 #derefFromContext(C, SPEAKER)
					 #derefFromContext(C3, OBJECT)"/>

    <!-- Noun phrases: 
    	X: the root "noun" or "proper noun"
    	N: the grammatical number (singular/prular)
    	P: the grammatical person (first/second/third)
    	C: a clause that represent the whole nounPhrase
	-->	
	<NLPattern name="nounphrase-skipdeterminer"
			   head="nounPhrase(X, N, P, C)"
			   body="nounPhraseNoDeterminer(X, N, P, C)"/>
	<NLPattern name="nounphrase-determiner"
			   head="nounPhrase(X, N, P, #and(#cons(ART, X, N), C))"
			   body="determiner(ART, N) nounPhraseNoDeterminerNoProperNoun(X, N, P, C)"/>
	<NLPattern name="nounphrase-determiner2"
			   head="nounPhrase(X, N, [third-person], proper-noun(X, N))"
			   body="'the' proper-noun(X, N)"/>
	<NLPattern name="nounphrase-determiner-preposition1"
			   head="nounPhrase(X, N, P, #and(#cons(ART, X, N), #and(C, PREPOSITION)))"
			   body="determiner(ART, N) nounPhraseNoDeterminer(X, N, P, C)
			   	     maybeNegatedPrepositionalPhrase(X, PREPOSITION)"/>
	<NLPattern name="nounphrase-determiner-preposition2"
			   head="nounPhrase(X, N, [third-person], #and(noun(X,N), PREPOSITION))"
			   body="noun(X, N) 
			   		 maybeNegatedPrepositionalPhrase(X, PREPOSITION)"/>
	<NLPattern name="nounphrase-determiner-preposition3"
			   head="nounPhrase(X, N, [third-person], #and(noun(X,N), #and(ADJ, PREPOSITION)))"
			   body="maybeNegatedAdjective(X, ADJ) noun(X, N) 
			   		 maybeNegatedPrepositionalPhrase(X, PREPOSITION)"/>
	<NLPattern name="nounphrase-determiner-preposition-adj-adj"
			   head="nounPhrase(X, N, [third-person], #and(noun(X,N), #and(ADJ1, #and(ADJ2, PREPOSITION))))"
			   body="maybeNegatedAdjective(X, ADJ1) maybeNegatedAdjective(X, ADJ2) noun(X, N) 
			   		 maybeNegatedPrepositionalPhrase(X, PREPOSITION)"/>
	<NLPattern name="nounphrase-all-of"
			   head="nounPhrase(X, [plural], P, #and(#cons(DET, X, [plural]), C))"
			   body="definite-article('all'[symbol], [plural]) ['of'] demonstrative-determiner(DET, [plural]) nounPhraseNoDeterminer(X, [plural], P, C)"/>
	<NLPattern name="nounphrase-all-the"
			   head="nounPhrase(X, [plural], P, #and(the(X, [plural]), C))"
			   body="definite-article('all'[symbol], [plural]) 'the' nounPhraseNoDeterminer(X, [plural], P, C)"/>
	<NLPattern name="nounphrase-all-posessive"
			   head="nounPhrase(X, [plural], P, #and(#cons(POSSESSIVE, X, [plural]), C))"
			   body="definite-article('all'[symbol], [plural]) ['of']
			   	     possessive-determiner(POSSESSIVE, N) nounPhraseNoDeterminer(X, [plural], P, C)"/>
	<NLPattern name="nounphrase-the-other"
			   head="nounPhrase(X, N, P, #and(#cons(ART, X, N), #and(determiner.other(X, N), C)))"
			   body="determiner(ART, N) 'other' nounPhraseNoDeterminer(X, N, P, C)"/>
	<NLPattern name="nounphrase-subject-pronoun"
			   head="nounPhrase(X, N, P, subject-personal-pronoun(X, N, G, P))"
			   body="subject-personal-pronoun(X, N, G, P)"/>
	<NLPattern name="nounphrase-object-pronoun"
			   head="nounPhrase(X, N, P, object-personal-pronoun(X, N, G, P))"
			   body="object-personal-pronoun(X, N, G, P)"/>
	<NLPattern name="nounphrase-indefinite-pronoun"
			   head="nounPhrase(X, N, P, indefinite-pronoun(X, N, G, P))"
			   body="indefinite-pronoun(X, N, G, P)"/>
	<NLPattern name="nounphrase-indefinite-pronoun-adjective"
			   head="nounPhrase(X, N, P, #and(indefinite-pronoun(X, N, G, P), ADJ))"
			   body="indefinite-pronoun(X, N, G, P) maybeNegatedAdjective(X, ADJ)"/>
	<NLPattern name="nounphrase-saxon-genitive1"
			   head="nounPhrase(X2, N2, [third-person], #and(saxon-genitive(X,X2), #and(noun(X2, N2), C)))"
			   body="nounPhraseNoDeterminer(X, N, P, C) '\'s' noun(X2, N2)"/>
	<NLPattern name="nounphrase-saxon-genitive2"
			   head="nounPhrase(X2, N2, [third-person], #and(saxon-genitive(X,X2), 
														#and(noun(X2, N2),
														#and(#cons(ART, X, N), C))))"
			   body="determiner(ART, N) nounPhraseNoDeterminer(X, N, P, C) '\'s' noun(X2, N2)"/>

	<NLPattern name="nounphrase-adjective-phrase"
			   head="nounPhraseNoDeterminer(X, N, [third-person], #and(adjective(X, A), noun(X, N)))"
			   body="noun(X, N) ('that'|'who')
			   		 (verb('verb.be'[symbol], N, [third-person], T)|
			   		  verb('verb.seem'[symbol], N, [third-person], T))
			   		 adjective(A)"/>
	<NLPattern name="nounphrase-adjective-phrase-not"
			   head="nounPhraseNoDeterminer(X, N, [third-person], #and(#not(adjective(X, A)), noun(X, N)))"
			   body="noun(X, N) ('that'|'who')
			   		 (verb('verb.be'[symbol], N, [third-person], T) 'not'|
			   		  verb('verb.do'[symbol], NN, [third-person], TT) 'not' verb('verb.seem'[symbol], N, [third-person], T))
			   		 adjective(A)"/>
	<NLPattern name="nounphrase-noun"
			   head="nounPhraseNoDeterminer(X, N, [third-person], noun(X, N))"
			   body="noun(X, N)"/>
	<NLPattern name="nounphrase-adjective"
			   head="nounPhraseNoDeterminer(X, N, P, #and(ADJ, C))"
			   body="maybeNegatedAdjective(X, ADJ) nounPhraseNoDeterminer(X, N, P, C)"/>
	<NLPattern name="nounphrase-propernoun"
			   head="nounPhraseNoDeterminer(X, N, [third-person], proper-noun(X, N))"
			   body="proper-noun(X, N)"/>
	<NLPattern name="nounphrase-propernoun2"
			   head="nounPhraseNoDeterminer(X, N, [third-person], proper-noun(X3, N))"
			   body="proper-noun(X, N) proper-noun(X2, N) #concatenateSymbols(X,' '[symbol],X2,X3)"/>

	<NLPattern name="nounphrase-npn-adjective-phrase"
			   head="nounPhraseNoDeterminerNoProperNoun(X, N, [third-person], #and(adjective(X, A), noun(X, N)))"
			   body="noun(X, N) ('that'|'who')
			   		 (verb('verb.be'[symbol], N, [third-person], T)|
			   		  verb('verb.seem'[symbol], N, [third-person], T))
			   		 adjective(A)"/>
	<NLPattern name="nounphrase-npn-adjective-phrase-not"
			   head="nounPhraseNoDeterminerNoProperNoun(X, N, [third-person], #and(#not(adjective(X, A)), noun(X, N)))"
			   body="noun(X, N) ('that'|'who')
			   		 (verb('verb.be'[symbol], N, [third-person], T) 'not'|
			   		  verb('verb.do'[symbol], NN, [third-person], TT) 'not' verb('verb.seem'[symbol], N, [third-person], T))
			   		 adjective(A)"/>
	<NLPattern name="nounphrase-npn-noun"
			   head="nounPhraseNoDeterminerNoProperNoun(X, N, [third-person], noun(X, N))"
			   body="noun(X, N)"/>
	<NLPattern name="nounphrase-npn-adjective"
			   head="nounPhraseNoDeterminerNoProperNoun(X, N, P, #and(ADJ, C))"
			   body="maybeNegatedAdjective(X, ADJ) nounPhraseNoDeterminerNoProperNoun(X, N, P, C)"/>
	<NLPattern name="nounphrase-npn-that-verb-obj-phrase"
			   head="nounPhraseNoDeterminerNoProperNoun(X, N, [third-person], #and(#cons(VERB, X, O2), noun(X, N)))"
			   body="noun(X, N) ('that'|'who')
			   		 verb(VERB, N, [third-person], T) #symbolToSort(VERB, VERB_SORT) #subsumes([relation-verb], VERB_SORT) 
			   		 nounPhrase(X2, [singular], P2, C2) 
					 #derefFromContext(C2, O2)"/>
	<NLPattern name="nounphrase-npn-that-not-verb-obj-phrase"
			   head="nounPhraseNoDeterminerNoProperNoun(X, N, [third-person], #and(#not(#cons(VERB, X, O2)), noun(X, N)))"
			   body="noun(X, N) ('that'|'who')
			   		 verb('verb.do'[symbol], NN, [third-person], TT) 'not'
			   		 verb(VERB, N, P, T) #symbolToSort(VERB, VERB_SORT) #subsumes([relation-verb], VERB_SORT) 
			   		 nounPhrase(X2, [singular], P2, C2) 
					 #derefFromContext(C2, O2)"/>
	<NLPattern name="propernoun-compound1"
			   head="properNounCompound(X3, N)"
			   body="proper-noun(X, N) proper-noun(X2, N) #concatenateSymbols(X,' '[symbol],X2,X3)"/>
	<NLPattern name="propernoun-compound2"
			   head="properNounCompound(X, N)"
			   body="proper-noun(X, N)"/>

	<NLPattern name="negated-adjective"
			   head="maybeNegatedAdjective(X, #not(adjective(X, ADJ)))"
			   body="('not'|'non') adjective(ADJ)"/>
	<NLPattern name="adjective"
			   head="maybeNegatedAdjective(X, adjective(X, ADJ))"
			   body="adjective(ADJ)"/>

	<NLPattern name="negated-prepositional-phrase"
			   head="maybeNegatedPrepositionalPhrase(X, #not(#cons(PREPOSITION, X, O2)))"
			   body="'not'
			   		 preposition(PREPOSITION) 
			   		 nounPhrase(X2, [singular], P2, C2) 
					 #derefFromContext(C2, O2)"/>
	<NLPattern name="prepositional-phrase"
			   head="maybeNegatedPrepositionalPhrase(X, #cons(PREPOSITION, X, O2))"
			   body="preposition(PREPOSITION) 
			   		 nounPhrase(X2, [singular], P2, C2) 
					 #derefFromContext(C2, O2)"/>

	<NLPattern name="noun-phrase-list-last"
			   head="nounPhraseListFromContext(O)"
			   body="nounPhrase(X, N, P, C) #derefFromContext(C, O)"/>
	<!-- when I add this one back, I need some marker so that if there is a comma, we must expect an 'and' -->
	<!--NLPattern name="noun-phrase-list-comma"
			   head="nounPhraseListFromContext(#list(O, OL))"
			   body="nounPhrase(X, N, P, C) #derefFromContext(C, O)
			   		 ',' nounPhraseListFromContext(OL)"/-->
	<NLPattern name="noun-phrase-list-and"
			   head="nounPhraseListFromContext(#list(O, O2))"
			   body="nounPhrase(X, N, P, C) #derefFromContext(C, O)
			   		 'and' 
			   		 nounPhrase(X2, N2, P2, C2) #derefFromContext(C2, O2)"/>



</NLPatternRules>
